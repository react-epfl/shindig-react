<<<<<<< HEAD
=======
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..62aef71
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,22 @@

+.lock
+.plugins/
+version.ini
+devtest.war
+
+# Targets #
+###########

+java/graaasp/target/
+target/

diff --git a/config/oauth.json b/config/oauth.json
index 7fd714f..a45b028 100644
--- a/config/oauth.json
+++ b/config/oauth.json
@@ -31,7 +31,35 @@
       "consumer_secret" : "secret",
       "key_type" : "HMAC_SYMMETRIC"
     }
-  }
+  },
+  "http://graasp.epfl.ch/gadget/oauth_example.xml" : {
+        "google" : {
+            "consumer_secret" : "WbzgnbaXg2kdXHr2WEVnN+WF",
+            "consumer_key"    : "graasp.epfl.ch",
+            "key_type"        : "HMAC_SHA1"
+        }
+  },
+  "http://iamac71.epfl.ch:3000/gadget/oauth_graaasp.xml" : {
+        "graaasp" : {
+            "consumer_secret" : "kAgoDAEDKBoCnMdThTgoqN0Lvo1w7WBGjtSiqhrA",
+            "consumer_key"    : "M8dkbY4SYJNOSnf0CaMw",
+            "key_type"        : "HMAC_SHA1"
+        }
+  },
+  "http://iamac71.epfl.ch:3000/gadget/portability.xml" : {
+        "portability" : {
+            "consumer_secret" : "mJlIprRWyLD9iccVeXSfcTS2fKFwyVBg1HjT0frN",
+            "consumer_key"    : "MDHFY2Iy3blxxkj52xwY",
+            "key_type"        : "HMAC_SHA1"
+        }
+  },
+  "http://role-project.svn.sourceforge.net/viewvc/role-project/trunk/gadgets/cam/cam_oauth.xml" : {
+            "CamV2Service" : {
+                  "consumer_secret" : "66b54f9bc0d65a779399e11b46e3982c",
+                  "consumer_key" : "9eedb7987c2956c8adf9e5f5ad8acb69",
+                  "key_type" : "HMAC-SHA1"
+            }
+    },
 }
   
 
diff --git a/features/src/main/javascript/features/features.txt b/features/src/main/javascript/features/features.txt
index d583f78..9aae4f1 100644
--- a/features/src/main/javascript/features/features.txt
+++ b/features/src/main/javascript/features/features.txt
@@ -1,27 +1,7 @@
-#
-#  Licensed to the Apache Software Foundation (ASF) under one
-#  or more contributor license agreements.  See the NOTICE file
-#  distributed with this work for additional information
-#  regarding copyright ownership.  The ASF licenses this file
-#  to you under the Apache License, Version 2.0 (the
-#  "License"); you may not use this file except in compliance
-#  with the License.  You may obtain a copy of the License at
-# 
-#    http://www.apache.org/licenses/LICENSE-2.0
-# 
-#  Unless required by applicable law or agreed to in writing,
-#  software distributed under the License is distributed on an
-#  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-#  KIND, either express or implied.  See the License for the
-#  specific language governing permissions and limitations
-#  under the License.
-#
-# List each feature you want to support here
-
-features/globals/feature.xml
 features/analytics/feature.xml
 features/auth-refresh/feature.xml
 features/caja/feature.xml
+features/com.google.gadgets.analytics/feature.xml
 features/container/feature.xml
 features/content-rewrite/feature.xml
 features/core.config/feature.xml
@@ -36,6 +16,7 @@ features/core/feature.xml
 features/dynamic-height.util/feature.xml
 features/dynamic-height/feature.xml
 features/flash/feature.xml
+features/globals/feature.xml
 features/i18n/feature.xml
 features/jsondom/feature.xml
 features/locked-domain/feature.xml
@@ -61,11 +42,11 @@ features/security-token/feature.xml
 features/setprefs/feature.xml
 features/settitle/feature.xml
 features/shindig.auth/feature.xml
-features/shindig.container/feature.xml
 features/shindig.container-1.0/feature.xml
+features/shindig.container/feature.xml
 features/shindig.random/feature.xml
-features/shindig.uri/feature.xml
 features/shindig.uri.ext/feature.xml
+features/shindig.uri/feature.xml
 features/shindig.xhrwrapper/feature.xml
 features/skins/feature.xml
 features/swfobject/feature.xml
@@ -73,4 +54,3 @@ features/tabs/feature.xml
 features/views/feature.xml
 features/xhrwrapper/feature.xml
 features/xmlutil/feature.xml
-features/com.google.gadgets.analytics/feature.xml
diff --git a/features/src/main/javascript/features/shindig.container/feature.xml b/features/src/main/javascript/features/shindig.container/feature.xml
index eaf72b8..2217e1d 100644
--- a/features/src/main/javascript/features/shindig.container/feature.xml
+++ b/features/src/main/javascript/features/shindig.container/feature.xml
@@ -28,6 +28,10 @@ A map of view names to view attributes. Examples:
   <dependency>rpc</dependency>
   <dependency>osapi</dependency>
   <dependency>shindig.uri.ext</dependency>
+  <gadget>
+    <script src="util.js"/>
+    <script src="shindig-container.js"/>
+  </gadget>
   <container>
     <script src="util.js"/>
     <script src="cookies.js"/>
diff --git a/features/src/main/javascript/features/shindig.container/shindig-container.js b/features/src/main/javascript/features/shindig.container/shindig-container.js
index 337c26b..db2f53d 100644
--- a/features/src/main/javascript/features/shindig.container/shindig-container.js
+++ b/features/src/main/javascript/features/shindig.container/shindig-container.js
@@ -648,6 +648,17 @@ shindig.BaseIfrGadget.prototype.queryIfrGadgetType_ = function() {
   // Get the gadget metadata and check if the gadget requires the 'pubsub-2'
   // feature.  If so, then we use OpenAjax Hub in order to create and manage
   // the iframe.  Otherwise, we create the iframe ourselves.
+
+  // ***********************
+  // TODO: Evgeny's extension to avoid buggy metadata call
+  var gadget = this;
+  var subClass = shindig.IfrGadget;
+  for (var name in subClass) if (subClass.hasOwnProperty(name)) {
+    gadget[name] = subClass[name];
+  }
+  return;
+  // ***********************
+
   var request = {
     context: {
       country: "default",
@@ -660,7 +671,7 @@ shindig.BaseIfrGadget.prototype.queryIfrGadgetType_ = function() {
       moduleId: 1
     }]
   };
-
+  
   var makeRequestParams = {
     "CONTENT_TYPE" : "JSON",
     "METHOD" : "POST",
diff --git a/java/common/conf/readme.md b/java/common/conf/readme.md
new file mode 100644
index 0000000..a0da838
--- /dev/null
+++ b/java/common/conf/readme.md
@@ -0,0 +1 @@
+placeholder for shindig.properties file
diff --git a/java/common/conf/shindig.properties b/java/common/conf/shindig.properties
deleted file mode 100644
index 1eb829d..0000000
--- a/java/common/conf/shindig.properties
+++ /dev/null
@@ -1,149 +0,0 @@
-# Licensed to the Apache Software Foundation (ASF) under one
-# or more contributor license agreements.  See the NOTICE file
-# distributed with this work for additional information
-# regarding copyright ownership.  The ASF licenses this file
-# to you under the Apache License, Version 2.0 (the
-# "License"); you may not use this file except in compliance
-# with the License.  You may obtain a copy of the License at
-#
-#  http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing,
-# software distributed under the License is distributed on an
-# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-# KIND, either express or implied.  See the License for the
-# specific language governing permissions and limitations
-# under the License.
-
-# Location of feature manifests (comma separated)
-shindig.features.default=res://features/features.txt
-
-# Location of container configurations (comma separated)
-shindig.containers.default=res://containers/default/container.js
-
-# A file containing blacklisted gadgets.
-shindig.blacklist.file=
-
-### Inbound OAuth support
-# The URL base to use for full OAuth support (three-legged)
-shindig.oauth.base-url=/oauth/
-shindig.oauth.authorize-action=/WEB-INF/authorize.jsp
-
-### Outbound OAuth support
-shindig.signing.state-key=
-shindig.signing.key-name=
-shindig.signing.key-file=
-shindig.signing.global-callback-url=http://localhost:8080/gadgets/oauthcallback
-shindig.signing.enable-signed-callbacks=true
-
-# Set to true if you want to allow the use of 3-legged OAuth tokens when viewer != owner.
-# This setting is not recommeneded for pages that allow user-controlled javascript, since
-# that javascript could be used to make unauthorized requests on behalf of the viewer of the page
-shindig.signing.viewer-access-tokens-enabled=false
-
-# If enabled here, configuration values can be found in container configuration files.
-shindig.locked-domain.enabled=false
-
-# TODO: This needs to be moved to container configuration.
-shindig.content-rewrite.only-allow-excludes=false
-shindig.content-rewrite.include-urls=.*
-shindig.content-rewrite.exclude-urls=
-shindig.content-rewrite.include-tags=body,embed,img,input,link,script,style
-shindig.content-rewrite.expires=86400
-shindig.content-rewrite.proxy-url=/gadgets/proxy?container=default&url=
-shindig.content-rewrite.concat-url=/gadgets/concat?container=default&
-shindig.content-rewrite.enable-split-js-concat=true
-
-#
-# Default set of forced libs to allow for better caching
-#
-# NOTE: setting this causes the EndToEnd test to fail the opensocial-templates test
-shindig.gadget-rewrite.default-forced-libs=core:rpc
-#shindig.gadget-rewrite.default-forced-libs=
-
-#
-# Allow supported JavaScript features required by a gadget to be externalized on demand
-shindig.gadget-rewrite.externalize-feature-libs=false
-
-# Configuration for image rewriter
-shindig.image-rewrite.max-inmem-bytes = 1048576
-shindig.image-rewrite.max-palette-size = 256
-shindig.image-rewrite.allow-jpeg-conversion = true
-shindig.image-rewrite.jpeg-compression = 0.75
-shindig.image-rewrite.min-threshold-bytes = 200
-
-# Configuration for the os:Flash tag
-shindig.flash.min-version = 9.0.115
-
-# Configuration for template rewriter
-shindig.template-rewrite.extension-tag-namespace=http://ns.opensocial.org/2009/extensions
-
-# These values provide default TTLs for HTTP responses that don't use caching headers.
-shindig.cache.http.defaultTtl=3600000
-shindig.cache.http.negativeCacheTtl=60000
-
-# A default refresh interval for XML files, since there is no natural way for developers to
-# specify this value, and most HTTP responses don't include good cache control headers.
-shindig.cache.xml.refreshInterval=300000
-
-# Add entries in the form shindig.cache.lru.<name>.capacity to specify capacities for different
-# caches when using the LruCacheProvider.
-# It is highly recommended that the EhCache implementation be used instead of the LRU cache.
-shindig.cache.lru.default.capacity=1000
-shindig.cache.lru.expressions.capacity=1000
-shindig.cache.lru.gadgetSpecs.capacity=1000
-shindig.cache.lru.messageBundles.capacity=1000
-shindig.cache.lru.httpResponses.capacity=10000
-
-# The location of the EhCache configuration file.
-shindig.cache.ehcache.config=res://org/apache/shindig/common/cache/ehcache/ehcacheConfig.xml
-
-# True to enable JMX integration with cache stats
-shindig.cache.ehcache.jmx.enabled=true
-
-# true to enable JMX stats.
-shindig.cache.ehcache.jmx.stats=true
-
-# true to skip expensive encoding detection.
-# if true, will only attempt to validate utf-8. Assumes all other encodings are ISO-8859-1.
-shindig.http.fast-encoding-detection=true
-
-# Configuration for the HttpFetcher
-# Connection timeout, in milliseconds, for requests.
-shindig.http.client.connection-timeout-ms=5000
-
-# Maximum size, in bytes, of the object we fetched, 0 == no limit
-shindig.http.client.max-object-size-bytes=0
-
-# Strict-mode parsing for proxy and concat URIs ensures that the authority/host and path
-# for the URIs match precisely what is found in the container config for it. This is
-# useful where statistics and traffic routing patterns, typically in large installations,
-# key on hostname (and occasionally path). Enforcing this does come at the cost that
-# mismatches break, which in turn mandates that URI generation always happen in consistent
-# fashion, ie. by the class itself or tightly controlled code.
-shindig.uri.proxy.use-strict-parsing=false
-shindig.uri.concat.use-strict-parsing=false
-
-# Host:port of the proxy to use while fetching urls. Leave blank if proxy is
-# not to be used.
-org.apache.shindig.gadgets.http.basicHttpFetcherProxy=
-
-org.apache.shindig.serviceExpirationDurationMinutes=60
-
-#
-# Older versions of shindig used 'data' in the json-rpc response format
-# The spec calls for using 'result' instead, however to avoid breakage we
-# allow you to set it back to the old way here
-#
-# valid values are
-#  result  - new form
-#  data    - old broken form
-#  both    - return both fields for full compatibility
-#
-shindig.json-rpc.result-field=result
-
-# Remap "Internal server error"s received from the basicHttpFetcherProxy server to
-# "Bad Gateway error"s, so that it is clear to the user that the proxy server is
-# the one that threw the exception.
-shindig.accelerate.remapInternalServerError=true
-shindig.proxy.remapInternalServerError=true
diff --git a/java/common/src/main/java/org/apache/shindig/auth/BasicSecurityTokenCodec.java b/java/common/src/main/java/org/apache/shindig/auth/BasicSecurityTokenCodec.java
index 20ea4d8..c4750b8 100644
--- a/java/common/src/main/java/org/apache/shindig/auth/BasicSecurityTokenCodec.java
+++ b/java/common/src/main/java/org/apache/shindig/auth/BasicSecurityTokenCodec.java
@@ -78,8 +78,10 @@ public class BasicSecurityTokenCodec implements SecurityTokenCodec {
 
     try {
       String[] tokens = StringUtils.split(token, ':');
-      if (tokens.length != TOKEN_COUNT) {
+      if (tokens.length < TOKEN_COUNT) {
         throw new SecurityTokenException("Malformed security token");
+      }else{
+    	  tokens = this.parseToken(tokens);
       }
 
       return new BasicSecurityToken(
@@ -104,4 +106,25 @@ public class BasicSecurityTokenCodec implements SecurityTokenCodec {
    */
   public BasicSecurityTokenCodec() {
   }
+  /**
+   * Parses the security token
+   */
+  public String[] parseToken(String[] tokens) {
+	  int url_number = tokens.length-6;
+	  String[] output = new String[TOKEN_COUNT];
+	  //get array elements corresponding to broken url - http://host:port/gadget.xml -> ["http","//host","port/gadget.xml"]
+	  
+	  String[] url_array = new String[url_number];
+	  //copy first part (before url)
+	  System.arraycopy(tokens,0,output,0,4);
+	  //build url
+	  System.arraycopy(tokens, 4, url_array, 0, url_number);
+	  String url = Joiner.on(":").join(url_array);
+	  //copy url
+	  output[4] = url;
+	  //copy last part (after url)
+	  System.arraycopy(tokens,(4+url_number),output,5,2);
+	  
+	  return output;	  
+  }
 }
diff --git a/java/common/src/main/java/org/apache/shindig/protocol/DataServiceServlet.java b/java/common/src/main/java/org/apache/shindig/protocol/DataServiceServlet.java
index 84d7572..7e4c174 100644
--- a/java/common/src/main/java/org/apache/shindig/protocol/DataServiceServlet.java
+++ b/java/common/src/main/java/org/apache/shindig/protocol/DataServiceServlet.java
@@ -36,6 +36,8 @@ import java.util.concurrent.Future;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import java.util.regex.*;
+
 /**
  * Servlet used to process REST requests (/rest/* etc.)
  */
@@ -153,6 +155,9 @@ public class DataServiceServlet extends ApiServlet {
 
     // Always returns a non-null handler.
     RestHandler handler = getRestHandler(servletRequest);
+    // Hack for documents    
+    String path = servletRequest.getPathInfo();       
+    // -----
 
     Reader bodyReader = null;
     if (!servletRequest.getMethod().equals("GET") && !servletRequest.getMethod().equals("HEAD")) {
@@ -172,7 +177,10 @@ public class DataServiceServlet extends ApiServlet {
       Object response = responseItem.getResponse();
       // TODO: ugliness resulting from not using RestfulItem
       if (!(response instanceof DataCollection) && !(response instanceof RestfulCollection)) {
-        response = ImmutableMap.of("entry", response);
+        // Hack for documents, only single endpoints (rest/documents/5 or rest/documents)
+        if (!(path.matches("^/documents/[^/]*") || path.matches("^/documents[^/]*"))) {
+          response = ImmutableMap.of("entry", response);          
+        }
       }
 
       // JSONP style callbacks
@@ -180,7 +188,13 @@ public class DataServiceServlet extends ApiServlet {
           servletRequest.getParameter("callback") : null;
 
       if (callback != null) writer.write(callback + '(');
-      writer.write(converter.convertToString(response));
+      // Hack for documents, only single endpoints (rest/documents/5 or rest/documents)
+      if (path.matches("^/documents/[^/]*") || path.matches("^/documents[^/]*")) {
+        writer.write((String)response);
+      } else {
+        writer.write(converter.convertToString(response));
+      }
+      
       if (callback != null) writer.write(");\n");
     } else {
       sendError(servletResponse, responseItem);
>>>>>>> updates .gitignore, adds diff file for previous version of shindig
diff --git a/java/common/src/test/java/org/apache/shindig/auth/BasicSecurityTokenDecoderTest.java b/java/common/src/test/java/org/apache/shindig/auth/BasicSecurityTokenDecoderTest.java
new file mode 100644
index 0000000..ee289dd
--- /dev/null
+++ b/java/common/src/test/java/org/apache/shindig/auth/BasicSecurityTokenDecoderTest.java
@@ -0,0 +1,136 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.shindig.auth;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Lists;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Map;
+
+/**
+ * Tests for BasicSecurityTokenDecoder
+ */
+public class BasicSecurityTokenDecoderTest {
+
+  private BasicSecurityTokenDecoder decoder;
+
+  @Before
+  public void setUp() throws Exception {
+	  decoder = new BasicSecurityTokenDecoder();
+   }
+
+  @Test
+  public void testParseToken() throws Exception {
+	String[] tokens =  new String[9];
+	tokens[0] = "owner_id";
+	tokens[1] = "viewer_id";
+	tokens[2] = "module_id";
+	tokens[3] = "default";
+	tokens[4] = "http";
+	tokens[5] = "//localhost";
+	tokens[6] = "8080/gadgets/gadget.xml";
+	tokens[7] = "4";
+	tokens[8] = "1";
+
+	tokens = decoder.parseToken(tokens);
+
+    assertEquals("http://localhost:8080/gadgets/gadget.xml", tokens[4]);
+    assertEquals("4", tokens[5]);
+
+  }
+
+}
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.shindig.auth;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Lists;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Map;
+
+/**
+ * Tests for BasicSecurityTokenDecoder
+ */
+public class BasicSecurityTokenDecoderTest {
+
+  private BasicSecurityTokenDecoder decoder;
+
+  @Before
+  public void setUp() throws Exception {
+	  decoder = new BasicSecurityTokenDecoder();
+   }
+
+  @Test
+  public void testParseToken() throws Exception {
+	String[] tokens =  new String[9];
+	tokens[0] = "owner_id";
+	tokens[1] = "viewer_id";
+	tokens[2] = "module_id";
+	tokens[3] = "default";
+	tokens[4] = "http";
+	tokens[5] = "//localhost";
+	tokens[6] = "8080/gadgets/gadget.xml";
+	tokens[7] = "4";
+	tokens[8] = "1";
+
+	tokens = decoder.parseToken(tokens);
+
+    assertEquals("http://localhost:8080/gadgets/gadget.xml", tokens[4]);
+    assertEquals("4", tokens[5]);
+
+  }
+
+}

diff --git a/java/graaasp/pom.xml b/java/graaasp/pom.xml
new file mode 100644
index 0000000..a05f84c
--- /dev/null
+++ b/java/graaasp/pom.xml
@@ -0,0 +1,197 @@
+<?xml version="1.0" encoding="UTF-8"?><!--
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+-->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+
+  <parent>
+    <groupId>org.apache.shindig</groupId>
+    <artifactId>shindig-project</artifactId>
+    <version>2.0.0</version>
+    <relativePath>../../pom.xml</relativePath>
+  </parent>
+
+  <artifactId>shindig-graaasp</artifactId>
+  <packaging>jar</packaging>
+
+  <name>Graaasp SPI and API Implementations for Shindig</name>
+  <description>Provides implementations of the SPI and API for Graaasp inside the core of Shindig.</description>
+
+  <scm>
+      <connection>scm:svn:http://svn.apache.org/repos/asf/shindig/tags/shindig-project-2.0.0/java/samples</connection>
+      <developerConnection>scm:svn:https://svn.apache.org/repos/asf/shindig/tags/shindig-project-2.0.0/java/samples</developerConnection>
+      <url>http://svn.apache.org/viewvc/shindig/tags/shindig-project-2.0.0/java/samples</url>
+  </scm>
+
+  <repositories>
+    <repository>
+     <id>EclipseLink Repo</id>
+     <url>http://www.eclipse.org/downloads/download.php?r=1&amp;nf=1&amp;file=/rt/eclipselink/maven.repo</url>
+    </repository>
+    <repository>
+      <id>maven2-repository.dev.java.net</id>
+      <name>Java.net Repository for Maven</name>
+      <url>http://download.java.net/maven/2/</url>
+      <layout>default</layout>
+    </repository>
+  </repositories>
+  <build>
+    <resources>
+      <resource>
+        <directory>${basedir}/src/main/resources</directory>
+        <includes>
+          <include>**/*</include>
+        </includes>
+      </resource>
+    </resources>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-clean-plugin</artifactId>
+        <configuration>
+          <filesets>
+            <fileset>
+              <directory>${basedir}</directory>
+              <includes>
+                <include>create.sql</include>
+                <include>derby.log</include>
+                <include>drop.sql</include>
+              </includes>
+              <followSymlinks>false</followSymlinks>
+            </fileset>
+          </filesets>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+  <dependencies>
+    <!-- add a driver for mysql -->
+    <dependency>
+      <groupId>mysql</groupId>
+      <artifactId>mysql-connector-java</artifactId>
+      <version>5.1.6</version>
+    </dependency>
+    <!-- project dependencies -->
+    <dependency>
+      <groupId>org.apache.shindig</groupId>
+      <artifactId>shindig-common</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.shindig</groupId>
+      <artifactId>shindig-gadgets</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.shindig</groupId>
+      <artifactId>shindig-social-api</artifactId>
+    </dependency>
+    <!-- external depenencies -->
+    <dependency>
+      <groupId>com.google.inject</groupId>
+      <artifactId>guice</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>javax.persistence</groupId>
+      <artifactId>persistence-api</artifactId>
+      <version>1.0</version>
+    </dependency>
+     <dependency>
+      <groupId>org.eclipse.persistence</groupId>
+      <artifactId>eclipselink</artifactId>
+      <version>1.0</version>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.derby</groupId>
+      <artifactId>derby</artifactId>
+      <version>10.4.2.0</version>
+    </dependency>
+    <dependency>
+      <groupId>commons-dbcp</groupId>
+      <artifactId>commons-dbcp</artifactId>
+      <version>1.2.2</version>
+    </dependency>
+    <!-- <dependency>
+      <artifactId>com.google.guava</artifactId>
+      <groupId>guava</groupId>
+    </dependency> -->
+    <dependency>
+      <artifactId>commons-io</artifactId>
+      <groupId>commons-io</groupId>
+    </dependency>
+    <!-- <dependency>
+      <groupId>com.google.guava</groupId>
+      <artifactId>guava</artifactId>
+    </dependency> -->
+    <dependency>
+      <groupId>net.oauth.core</groupId>
+      <artifactId>oauth-httpclient4</artifactId>
+    </dependency>
+
+    <!-- Hibernate -->
+    <dependency>
+      <groupId>org.hibernate</groupId>
+      <artifactId>hibernate</artifactId>
+      <version>3.2.6.ga</version>
+    </dependency>
+    <dependency>
+      <groupId>org.hibernate</groupId>
+      <artifactId>hibernate-annotations</artifactId>
+      <version>3.3.1.GA</version>
+    </dependency>
+    <dependency>
+      <groupId>org.hibernate</groupId>
+      <artifactId>hibernate-entitymanager</artifactId>
+      <version>3.3.1.ga</version>
+    </dependency>
+    <dependency>
+      <groupId>org.hibernate</groupId>
+      <artifactId>hibernate-tools</artifactId>
+      <version>3.2.0.ga</version>
+    </dependency>
+    <dependency>
+      <groupId>org.hibernate</groupId>
+      <artifactId>ejb3-persistence</artifactId>
+      <version>1.0.1.GA</version>
+    </dependency>
+
+    <!-- test -->
+    <dependency>
+      <groupId>log4j</groupId>
+      <artifactId>log4j</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.tomcat</groupId>
+      <artifactId>el-api</artifactId>
+      <scope>test</scope>
+    </dependency> 
+    <dependency>
+      <groupId>org.apache.shindig</groupId>
+      <artifactId>shindig-common</artifactId>
+      <version>${project.parent.version}</version>
+      <classifier>tests</classifier>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.shindig</groupId>
+      <artifactId>shindig-social-api</artifactId>
+      <version>${project.parent.version}</version>
+      <classifier>tests</classifier>
+      <scope>test</scope>
+    </dependency>
+  </dependencies>
+</project>
diff --git a/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/eclipselink/Bootstrap.java b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/eclipselink/Bootstrap.java
new file mode 100644
index 0000000..113272d
--- /dev/null
+++ b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/eclipselink/Bootstrap.java
@@ -0,0 +1,142 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.graaasp.jpa.eclipselink;
+
+import static org.eclipse.persistence.config.PersistenceUnitProperties.JDBC_DRIVER;
+import static org.eclipse.persistence.config.PersistenceUnitProperties.JDBC_PASSWORD;
+import static org.eclipse.persistence.config.PersistenceUnitProperties.JDBC_READ_CONNECTIONS_MIN;
+import static org.eclipse.persistence.config.PersistenceUnitProperties.JDBC_URL;
+import static org.eclipse.persistence.config.PersistenceUnitProperties.JDBC_USER;
+import static org.eclipse.persistence.config.PersistenceUnitProperties.JDBC_WRITE_CONNECTIONS_MIN;
+import static org.eclipse.persistence.config.PersistenceUnitProperties.LOGGING_LEVEL;
+import static org.eclipse.persistence.config.PersistenceUnitProperties.LOGGING_SESSION;
+import static org.eclipse.persistence.config.PersistenceUnitProperties.LOGGING_THREAD;
+import static org.eclipse.persistence.config.PersistenceUnitProperties.LOGGING_TIMESTAMP;
+import static org.eclipse.persistence.config.PersistenceUnitProperties.TARGET_SERVER;
+import static org.eclipse.persistence.config.PersistenceUnitProperties.TRANSACTION_TYPE;
+
+import com.google.common.collect.Maps;
+
+import com.google.inject.Inject;
+import com.google.inject.name.Named;
+
+import org.eclipse.persistence.config.PersistenceUnitProperties;
+import org.eclipse.persistence.config.TargetServer;
+
+import java.util.Map;
+import java.util.logging.Logger;
+
+import javax.persistence.EntityManager;
+import javax.persistence.EntityManagerFactory;
+import javax.persistence.Persistence;
+import javax.persistence.spi.PersistenceUnitTransactionType;
+
+/**
+ * 
+ */
+public class Bootstrap {
+
+  private static final String DB_DRIVER = "db.driver";
+  private static final String DB_URL = "db.url";
+  private static final String DB_USER = "db.user";
+  private static final String DB_PASSWORD = "db.password";
+  private static final String DB_MIN_WRITE = "db.write.min";
+  private static final String DB_MIN_NUM_READ = "db.read.min";
+  private static final Logger LOG = Logger.getLogger(Boolean.class.getName());
+  private String minWrite;
+  private String minRead;
+  private String dbPassword;
+  private String dbUser;
+  private String dbUrl;
+  private String dbDriver;
+  private EntityManager entityManager;
+
+  @Inject
+  public Bootstrap(@Named(DB_DRIVER)
+  String dbDriver, @Named(DB_URL)
+  String dbUrl, @Named(DB_USER)
+  String dbUser, @Named(DB_PASSWORD)
+  String dbPassword, @Named(DB_MIN_NUM_READ)
+  String minRead, @Named(DB_MIN_WRITE)
+  String minWrite) {
+    this.dbDriver = dbDriver;
+    this.dbUrl = dbUrl;
+    this.dbUser = dbUser;
+    this.dbPassword = dbPassword == null || dbPassword.length() == 0 ? " " : dbPassword;
+    this.minRead = minRead;
+    this.minWrite = minWrite;
+
+  }
+
+  public void init(String unitName) {
+
+    Map<String, String> properties = Maps.newHashMap();
+
+    // Ensure RESOURCE_LOCAL transactions is used.
+    properties.put(TRANSACTION_TYPE, PersistenceUnitTransactionType.RESOURCE_LOCAL.name());
+
+    // Configure the internal EclipseLink connection pool
+    properties.put(JDBC_DRIVER, dbDriver);
+    properties.put(JDBC_URL, dbUrl);
+    properties.put(JDBC_USER, dbUser);
+    properties.put(JDBC_PASSWORD, dbPassword);
+    properties.put(JDBC_READ_CONNECTIONS_MIN, minRead);
+    properties.put(JDBC_WRITE_CONNECTIONS_MIN, minWrite);
+
+    // Configure logging. FINE ensures all SQL is shown
+    properties.put(LOGGING_LEVEL, "FINE");
+    properties.put(LOGGING_TIMESTAMP, "true");
+    properties.put(LOGGING_THREAD, "false");
+    properties.put(LOGGING_SESSION, "false");
+
+    // Ensure that no server-platform is configured
+    properties.put(TARGET_SERVER, TargetServer.None);
+
+	// TODO: this should be taken from persistence.xml
+    properties.put(PersistenceUnitProperties.DDL_GENERATION, "none");
+    properties.put(PersistenceUnitProperties.DROP_JDBC_DDL_FILE, "drop.sql");
+    properties.put(PersistenceUnitProperties.CREATE_JDBC_DDL_FILE, "create.sql");
+    properties.put(PersistenceUnitProperties.DDL_GENERATION_MODE,"database");
+
+    // properties.put(PersistenceUnitProperties.DDL_GENERATION, PersistenceUnitProperties.CREATE_ONLY);
+    // properties.put(PersistenceUnitProperties.DROP_JDBC_DDL_FILE, "drop.sql");
+    // properties.put(PersistenceUnitProperties.CREATE_JDBC_DDL_FILE, "create.sql");
+    // properties.put(PersistenceUnitProperties.DDL_GENERATION_MODE,
+    //     PersistenceUnitProperties.DDL_BOTH_GENERATION);
+
+    // properties.put(PersistenceUnitProperties.SESSION_CUSTOMIZER,
+    // EnableIntegrityChecker.class.getName());
+
+    LOG.info("Starting connection manager with properties " + properties);
+
+    EntityManagerFactory emFactory = Persistence.createEntityManagerFactory(unitName, properties);
+    entityManager = emFactory.createEntityManager();
+  }
+
+  /**
+   * @param unitName
+   * 
+   * @return
+   */
+  public EntityManager getEntityManager(String unitName) {
+    if (entityManager == null) {
+      init(unitName);
+    }
+    return entityManager;
+  }
+}
diff --git a/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/eclipselink/EclipseEntityManagerProvider.java b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/eclipselink/EclipseEntityManagerProvider.java
new file mode 100644
index 0000000..1a46580
--- /dev/null
+++ b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/eclipselink/EclipseEntityManagerProvider.java
@@ -0,0 +1,55 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.graaasp.jpa.eclipselink;
+
+import com.google.inject.Inject;
+import com.google.inject.Provider;
+import com.google.inject.name.Named;
+
+import javax.persistence.EntityManager;
+
+import org.apache.shindig.graaasp.jpa.eclipselink.Bootstrap;
+
+/**
+ * Creates an Eclipse Entity Manager.
+ */
+public class EclipseEntityManagerProvider implements Provider<EntityManager> {
+
+  private Bootstrap bootstrap;
+  private String unitName;
+
+  /**
+   * 
+   */
+  @Inject
+  public EclipseEntityManagerProvider(Bootstrap bootstrap,
+      @Named("jpa.socialapi.unitname") String unitName) {
+    this.unitName = unitName;
+    this.bootstrap = bootstrap;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see com.google.inject.Provider#get()
+   */
+  public EntityManager get() {
+    return bootstrap.getEntityManager(unitName);
+  }
+
+}
diff --git a/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/eclipselink/EnableIntegrityChecker.java b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/eclipselink/EnableIntegrityChecker.java
new file mode 100644
index 0000000..28824b9
--- /dev/null
+++ b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/eclipselink/EnableIntegrityChecker.java
@@ -0,0 +1,32 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.graaasp.jpa.eclipselink;
+
+import org.eclipse.persistence.config.SessionCustomizer;
+import org.eclipse.persistence.sessions.Session;
+
+/**
+ * 
+ */
+public class EnableIntegrityChecker implements SessionCustomizer {
+
+  public void customize(Session session) throws Exception {
+    session.getIntegrityChecker().checkDatabase();
+    session.getIntegrityChecker().setShouldCatchExceptions(false);
+  }
+}
\ No newline at end of file
diff --git a/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/hibernate/Bootstrap.java b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/hibernate/Bootstrap.java
new file mode 100644
index 0000000..71a1e37
--- /dev/null
+++ b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/hibernate/Bootstrap.java
@@ -0,0 +1,80 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+
+package org.apache.shindig.graaasp.jpa.hibernate;
+
+import com.google.common.collect.Maps;
+import com.google.inject.Inject;
+import com.google.inject.name.Named;
+
+import java.util.Map;
+import java.util.logging.Logger;
+
+import javax.persistence.EntityManager;
+import javax.persistence.EntityManagerFactory;
+import javax.persistence.Persistence;
+
+/**
+ *
+ */
+public class Bootstrap {
+
+  private static final String DB_DRIVER = "db.driver";
+  private static final String DB_URL = "db.url";
+  private static final String DB_USER = "db.user";
+  private static final String DB_PASSWORD = "db.password";
+  private static final String DB_MIN_WRITE = "db.write.min";
+  private static final String DB_MIN_NUM_READ = "db.read.min";
+  private static final Logger LOG = Logger.getLogger(Boolean.class.getName());
+  private EntityManager entityManager;
+
+  @Inject
+  public Bootstrap(@Named(DB_DRIVER) String dbDriver,
+      @Named(DB_URL) String dbUrl, @Named(DB_USER) String dbUser,
+      @Named(DB_PASSWORD) String dbPassword,
+      @Named(DB_MIN_NUM_READ) String minRead,
+      @Named(DB_MIN_WRITE) String minWrite) {
+
+  }
+ 
+  public Bootstrap() {
+   
+  }
+
+  public void init(String unitName) {
+
+    Map<String, String> properties = Maps.newHashMap();
+
+    LOG.info("Starting connection manager with properties " + properties);
+
+    EntityManagerFactory emFactory = Persistence.createEntityManagerFactory(
+        unitName, properties);
+    entityManager = emFactory.createEntityManager();
+  }
+
+  /**
+   * @param unitName
+   * @return
+   */
+  public EntityManager getEntityManager(String unitName) {
+    if (entityManager == null) {
+      init(unitName);
+    }
+    return entityManager;
+  }
+}
diff --git a/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/openjpa/Bootstrap.java b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/openjpa/Bootstrap.java
new file mode 100644
index 0000000..31f5654
--- /dev/null
+++ b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/openjpa/Bootstrap.java
@@ -0,0 +1,72 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.graaasp.jpa.openjpa;
+
+
+import com.google.inject.Inject;
+import com.google.inject.name.Named;
+
+import javax.persistence.EntityManager;
+import javax.persistence.EntityManagerFactory;
+import javax.persistence.Persistence;
+
+/**
+ * 
+ */
+public class Bootstrap {
+
+  private static final String DB_DRIVER = "db.driver";
+  private static final String DB_URL = "db.url";
+  private static final String DB_USER = "db.user";
+  private static final String DB_PASSWORD = "db.password";
+  private static final String DB_MIN_WRITE = "db.write.min";
+  private static final String DB_MIN_NUM_READ = "db.read.min";
+  private EntityManager entityManager;
+
+  @Inject
+  public Bootstrap(@Named(DB_DRIVER)
+  String dbDriver, @Named(DB_URL)
+  String dbUrl, @Named(DB_USER)
+  String dbUser, @Named(DB_PASSWORD)
+  String dbPassword, @Named(DB_MIN_NUM_READ)
+  String minRead, @Named(DB_MIN_WRITE)
+  String minWrite) {
+
+  }
+
+  public Bootstrap() {
+
+  }
+
+  public void init(String unitName) {
+
+    EntityManagerFactory emFactory = Persistence.createEntityManagerFactory(unitName);
+    entityManager = emFactory.createEntityManager();
+  }
+
+  /**
+   * @param unitName
+   * @return
+   */
+  public EntityManager getEntityManager(String unitName) {
+    if (entityManager == null) {
+      init(unitName);
+    }
+    return entityManager;
+  }
+}
diff --git a/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/ActivityServiceDb.java b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/ActivityServiceDb.java
new file mode 100644
index 0000000..6ad719a
--- /dev/null
+++ b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/ActivityServiceDb.java
@@ -0,0 +1,278 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.graaasp.jpa.spi;
+
+import com.google.common.collect.Lists;
+import com.google.inject.Inject;
+
+import org.apache.shindig.auth.SecurityToken;
+import org.apache.shindig.common.util.ImmediateFuture;
+import org.apache.shindig.protocol.ProtocolException;
+import org.apache.shindig.protocol.RestfulCollection;
+import org.apache.shindig.graaasp.jpa.spi.JPQLUtils;
+import org.apache.shindig.graaasp.jpa.spi.SPIUtils;
+import org.apache.shindig.social.core.model.ActivityDb;
+import org.apache.shindig.social.core.model.MediaItemDb;
+import org.apache.shindig.social.opensocial.model.Activity;
+import org.apache.shindig.social.opensocial.model.MediaItem;
+import org.apache.shindig.social.opensocial.spi.ActivityService;
+import org.apache.shindig.social.opensocial.spi.CollectionOptions;
+import org.apache.shindig.social.opensocial.spi.GroupId;
+import org.apache.shindig.social.opensocial.spi.UserId;
+
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.Future;
+
+import javax.persistence.EntityManager;
+import javax.persistence.Query;
+import javax.servlet.http.HttpServletResponse;
+
+/**
+ * The Class ActivityServiceDb.
+ */
+public class ActivityServiceDb implements ActivityService {
+
+  /** The entity manager. */
+  private EntityManager entityManager;
+
+  /**
+   * Instantiates a new activity service db.
+   * 
+   * @param entityManager the entity manager
+   */
+  @Inject
+  public ActivityServiceDb(EntityManager entityManager) {
+    this.entityManager = entityManager;
+  }
+
+  /* (non-Javadoc)
+   * @see org.apache.shindig.graaasp.opensocial.spi.ActivityService#createActivity(org.apache.shindig.graaasp.opensocial.spi.UserId, org.apache.shindig.graaasp.opensocial.spi.GroupId, java.lang.String, java.util.Set, org.apache.shindig.social.opensocial.model.Activity, org.apache.shindig.auth.SecurityToken)
+   */
+  public Future<Void> createActivity(UserId userId, GroupId groupId, String appId,
+      Set<String> fields, Activity activity, SecurityToken token) throws ProtocolException {
+    String uid = SPIUtils.getUserList(userId, token);
+
+    try {
+      // Map activity into a new ActivityDb instance
+      // TODO Could we use dozer to do this mapping instead, for future-proofing reasons?
+      ActivityDb activityDb = new ActivityDb();
+      activityDb.setPostedTime(new Date().getTime());
+      activityDb.setAppId(appId);
+      activityDb.setUserId(uid);
+      activityDb.setId(activity.getId());
+      activityDb.setBodyId(activity.getBodyId());
+      activityDb.setBody(activity.getBody());
+      activityDb.setExternalId(activity.getExternalId());
+      activityDb.setTitleId(activity.getTitleId());
+      activityDb.setTitle(activity.getTitle());
+      activityDb.setUpdated(new Date());
+      activityDb.setPriority(activity.getPriority());
+      activityDb.setStreamFaviconUrl(activity.getStreamFaviconUrl());
+      activityDb.setStreamSourceUrl(activity.getStreamSourceUrl());
+      activityDb.setStreamTitle(activity.getStreamTitle());
+      activityDb.setStreamUrl(activity.getStreamUrl());
+      activityDb.setUrl(activity.getUrl());
+      if(activity.getMediaItems() != null) {
+        List<MediaItem> mediaItems = new ArrayList<MediaItem>();
+        for(MediaItem m : activity.getMediaItems()) {
+          MediaItemDb mediaItem = new MediaItemDb();
+          mediaItem.setMimeType(m.getMimeType());
+          mediaItem.setType(m.getType());
+          mediaItem.setUrl(m.getUrl());
+          mediaItems.add(mediaItem);
+        }
+        activityDb.setMediaItems(mediaItems);
+      }
+      if (activity.getTemplateParams() != null) {
+        activityDb.setTemplateParams(activity.getTemplateParams());
+      }
+
+      // TODO How should transactions be managed? Should samples be using warp-persist instead?
+      if (!entityManager.getTransaction().isActive()) {
+        entityManager.getTransaction().begin();
+      }
+      entityManager.persist(activityDb);
+      entityManager.getTransaction().commit();
+
+    } catch (Exception e) {
+      throw new ProtocolException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Failed to create activity", e);
+    }
+
+    return null;
+  }
+
+  /* (non-Javadoc)
+   * @see org.apache.shindig.graaasp.opensocial.spi.ActivityService#deleteActivities(org.apache.shindig.graaasp.opensocial.spi.UserId, org.apache.shindig.graaasp.opensocial.spi.GroupId, java.lang.String, java.util.Set, org.apache.shindig.auth.SecurityToken)
+   */
+  public Future<Void> deleteActivities(UserId userId, GroupId groupId, String appId,
+      Set<String> activityIds, SecurityToken token) throws ProtocolException {
+    // TODO Auto-generated method stub
+    return null;
+  }
+  
+  /* (non-Javadoc)
+   * @see org.apache.shindig.graaasp.opensocial.spi.ActivityService#getActivities(java.util.Set, org.apache.shindig.graaasp.opensocial.spi.GroupId, java.lang.String, java.util.Set, org.apache.shindig.graaasp.opensocial.spi.CollectionOptions, org.apache.shindig.auth.SecurityToken)
+   */
+  public Future<RestfulCollection<Activity>> getActivities(Set<UserId> userIds,
+      GroupId groupId, String appId, Set<String> fields,
+      CollectionOptions options, SecurityToken token) throws ProtocolException {
+
+    // TODO currently the implementation of this method ignores the fields variable. Is this correct?
+
+    List<Activity> plist = null;
+    int lastPos = 1;
+
+    StringBuilder sb = new StringBuilder();
+    // sanitize the list to get the uid's and remove duplicates
+    List<String> paramList = SPIUtils.getUserList(userIds, token);
+    // select the group Id as this will drive the query
+    switch (groupId.getType()) {
+    case all:
+      // select all contacts
+      sb.append("");
+      lastPos = JPQLUtils.addInClause(sb, "p", "id", lastPos, paramList.size());
+      break;
+    case friends:
+      // select all friends (subset of contacts)
+      sb.append(ActivityDb.JPQL_FINDACTIVITY_BY_FRIENDS);
+      lastPos = JPQLUtils.addInClause(sb, "p", "id", lastPos, paramList.size());
+      sb.append(")) ");
+      // TODO Group by doesn't work in HSQLDB or Derby - causes a "Not in aggregate function or group by clause" jdbc exception
+      // sb.append(" group by p ");
+      break;
+    case groupId:
+      // select those in the group
+      // TODO Needs implementing and then have a unit test created to test it.
+      sb.append("");
+      lastPos = JPQLUtils.addInClause(sb, "p", "id", lastPos, paramList.size());
+      sb.append(" and g.id = ?").append(lastPos);
+      lastPos++;
+      break;
+    case deleted:
+      // ???
+      break;
+    case self:
+      // select self
+      sb.append(ActivityDb.JPQL_FINDACTIVITY);
+      lastPos = JPQLUtils.addInClause(sb, "a", "userId", lastPos, paramList.size());
+      break;
+    default:
+      throw new ProtocolException(HttpServletResponse.SC_BAD_REQUEST, "Group ID not recognized");
+
+    }
+    
+    // Get total results, that is count the total number of rows for this query
+    Long totalResults = JPQLUtils.getTotalResults(entityManager, sb.toString(), paramList);
+    
+    // Execute paginated query
+    if (totalResults > 0) {
+      plist = JPQLUtils.getListQuery(entityManager, sb.toString(), paramList, options);
+    }
+
+    if (plist == null) {
+      plist = Lists.newArrayList();
+    }
+
+    plist = JPQLUtils.getListQuery(entityManager, sb.toString(), paramList, null);
+
+    if (plist == null) {
+      plist = new ArrayList<Activity>();
+    }
+
+    // all of the above could equally have been placed into a thread to overlay the
+    // db wait times.
+    RestfulCollection<Activity> restCollection = new RestfulCollection<Activity>(
+        plist, options.getFirst(), totalResults.intValue(), options.getMax());
+    return ImmediateFuture.newInstance(restCollection);
+  }
+  
+  /* (non-Javadoc)
+   * @see org.apache.shindig.graaasp.opensocial.spi.ActivityService#getActivities(org.apache.shindig.graaasp.opensocial.spi.UserId, org.apache.shindig.graaasp.opensocial.spi.GroupId, java.lang.String, java.util.Set, org.apache.shindig.graaasp.opensocial.spi.CollectionOptions, java.util.Set, org.apache.shindig.auth.SecurityToken)
+   */
+  public Future<RestfulCollection<Activity>> getActivities(UserId userId,
+      GroupId groupId, String appId, Set<String> fields,
+      CollectionOptions options, Set<String> activityIds, SecurityToken token)
+      throws ProtocolException {
+    return ImmediateFuture.newInstance(new RestfulCollection<Activity>(getActivities(userId, activityIds, token)));
+  }
+
+  /* (non-Javadoc)
+   * @see org.apache.shindig.graaasp.opensocial.spi.ActivityService#getActivity(org.apache.shindig.graaasp.opensocial.spi.UserId, org.apache.shindig.graaasp.opensocial.spi.GroupId, java.lang.String, java.util.Set, java.lang.String, org.apache.shindig.auth.SecurityToken)
+   */
+  public Future<Activity> getActivity(UserId userId, GroupId groupId, String appId,
+      Set<String> fields, String activityId, SecurityToken token) throws ProtocolException {
+    Activity activity = getActivities(userId, activityId,  token);
+    if ( activity != null  ) {
+      return ImmediateFuture.newInstance(activity);
+    }
+    throw new ProtocolException(HttpServletResponse.SC_BAD_REQUEST,"Cant find activity");
+  }
+
+
+  /**
+   * Gets the activities.
+   * 
+   * @param userId the user id
+   * @param token the token
+   * @param activityId the activity id
+   * 
+   * @return the activities
+   */
+  private Activity getActivities(UserId userId, String activityId,
+      SecurityToken token) {
+    Query q = entityManager.createNamedQuery(ActivityDb.FINDBY_ACTIVITY_ID);
+    String uid = SPIUtils.getUserList(userId, token);
+    q.setParameter(ActivityDb.PARAM_USERID, uid);
+    q.setParameter(ActivityDb.PARAM_ACTIVITYID, activityId);
+    q.setFirstResult(0);
+    q.setMaxResults(1);
+    List<?> activities = q.getResultList();
+    if ( activities != null && !activities.isEmpty()) {
+      return (Activity) activities.get(0);
+    }
+    return null;
+  }
+
+
+  /**
+   * Gets the activities.
+   * 
+   * @param userId the user id
+   * @param token the token
+   * @param activityIds the activity ids
+   * 
+   * @return the activities
+   */
+  private List<Activity> getActivities(UserId userId, Set<String> activityIds,
+      SecurityToken token) {
+    StringBuilder sb = new StringBuilder();
+    sb.append(ActivityDb.JPQL_FINDBY_ACTIVITIES);
+    List<String> paramList = SPIUtils.toList(activityIds);
+    String uid = SPIUtils.getUserList(userId, token);
+    int lastPos = JPQLUtils.addInClause(sb, "a", "id", 1, paramList.size());
+    sb.append(" and a.userid = ?").append(lastPos);
+    lastPos++;
+    paramList.add(uid);
+    List<Activity> a = JPQLUtils.getListQuery(entityManager, sb.toString(), paramList, null);
+    return a;
+  }
+
+}
diff --git a/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/AppDataServiceDb.java b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/AppDataServiceDb.java
new file mode 100644
index 0000000..fc50571
--- /dev/null
+++ b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/AppDataServiceDb.java
@@ -0,0 +1,336 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.graaasp.jpa.spi;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import com.google.inject.Inject;
+import com.google.common.collect.MapMaker;
+
+
+import org.apache.shindig.auth.SecurityToken;
+import org.apache.shindig.common.util.ImmediateFuture;
+import org.apache.shindig.protocol.DataCollection;
+import org.apache.shindig.protocol.ProtocolException;
+import org.apache.shindig.graaasp.jpa.spi.JPQLUtils;
+import org.apache.shindig.graaasp.jpa.spi.SPIUtils;
+import org.apache.shindig.social.core.model.AppdataDb;
+import org.apache.shindig.social.opensocial.spi.AppDataService;
+import org.apache.shindig.social.opensocial.spi.GroupId;
+import org.apache.shindig.social.opensocial.spi.UserId;
+
+import java.util.HashMap;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.Future;
+
+import javax.persistence.EntityManager;
+import javax.servlet.http.HttpServletResponse;
+
+/**
+ *
+ */
+public class AppDataServiceDb implements AppDataService {
+
+  private EntityManager entityManager;
+
+  @Inject
+  public AppDataServiceDb(EntityManager entityManager) {
+    this.entityManager = entityManager;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public Future<Void> deletePersonData(UserId userId, GroupId groupId, String appId,
+      Set<String> fields, SecurityToken token) throws ProtocolException {
+
+    if (appId == null) {
+      appId = token.getAppId();
+    }        
+    String uid = SPIUtils.getUserList(userId, token);
+    String contextType = "User";
+    long contextId = 0;
+    
+    if (uid.startsWith("s_")) { // for space
+      // appdata for a space
+      contextId = Long.parseLong(uid.replaceFirst("s_",""));
+      contextType = "Space";
+    } else { // for person
+      contextId = Long.parseLong(uid);
+    }
+    
+    Map<String,AppdataDb> dataMaps = getDataMap(contextId, contextType, groupId, appId);
+    
+    // TODO How should transactions be managed? Should samples be using warp-persist instead?
+    if (!entityManager.getTransaction().isActive()) {
+      entityManager.getTransaction().begin();
+    }
+    
+    // only add in the fields
+    if (fields == null || fields.isEmpty()) { 
+      // no keys, then remove all appdata
+      for (AppdataDb ad : dataMaps.values()) {
+        entityManager.remove(ad);
+      }
+    } else {
+      // remove found keys
+      for (String f : fields) {
+        if (dataMaps.containsKey(f)) {
+          AppdataDb ad = dataMaps.get(f);
+          entityManager.remove(ad);
+        }
+      }
+    }
+
+    entityManager.getTransaction().commit();
+
+    return ImmediateFuture.newInstance(null);
+  }
+
+  /**
+   * @param userId
+   * @param groupId
+   * @param appId
+   * @param token
+   * @return
+   */
+  private Map<String,AppdataDb> getDataMap(long contextId, String contextType, GroupId groupId, String appId) {
+    List<Long> paramList = Lists.newArrayList();
+    paramList.add(contextId);    
+    
+    int lastParam = 1;
+    StringBuilder sb = new StringBuilder();
+
+    switch (groupId.getType()) {
+    case all:
+      // userId translates into all contacts
+      sb.append(AppdataDb.FINDBY_ALL_GROUP);
+      sb.append(" and ad.contextId = ?").append(lastParam);
+      lastParam++;
+      break;
+    case deleted:
+      // ignored
+      break;
+    case friends:
+      sb.append(AppdataDb.FINDBY_FRIENDS_GROUP);
+      sb.append(" and ad.contextId = ?").append(lastParam);
+      lastParam++;
+      // userId translates into all friends
+      break;
+    case groupId:
+      sb.append(AppdataDb.FINDBY_GROUP_GROUP);
+      sb.append(" and ad.contextId = ?").append(lastParam);
+      lastParam++;
+      sb.append(" and g.id = ?").append(lastParam);
+      paramList.add(Long.parseLong(groupId.getGroupId()));
+      lastParam++;
+      // userId translates into friends within a group
+      break;
+    default: // including self
+      // userId is the user Id
+      sb.append(AppdataDb.FINDBY_SELF_GROUP);
+      sb.append(" ad.contextId = ?").append(lastParam);
+      sb.append(" and ad.contextType = '").append(contextType).append("'");
+      lastParam++;
+      break;
+
+    }
+    sb.append(" and ad.AppId = ?").append(lastParam);
+    lastParam++;
+    paramList.add(Long.parseLong(appId));
+    List<AppdataDb> dataMaps = JPQLUtils.getListQuery(entityManager, sb.toString(), paramList, null);
+    
+    Map<String, AppdataDb> results = new HashMap<String, AppdataDb>();
+    
+    for (AppdataDb ad : dataMaps) {
+      // build the hash "key" => Appdata for the key
+      results.put(ad.getName(),ad);
+    }
+
+    return results;
+
+  }
+
+  /**
+   * Filters contexts list to ids like: "s_1","s_2" -> "1","2"
+   */
+  private List<Long> removeContextInfo(List<String> contextList) {
+    List<Long> idList = Lists.newArrayList();
+    for (String c : contextList) {
+      idList.add(Long.parseLong(c.replaceFirst("s_","")));
+    }
+    return idList;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public Future<DataCollection> getPersonData(Set<UserId> userIds, GroupId groupId, String appId,
+      Set<String> fields, SecurityToken token) throws ProtocolException {
+    
+    if (appId == null) {
+      appId = token.getAppId();
+    }    
+    List<String> contextList = SPIUtils.getUserList(userIds, token);
+    // for now all context are defined by the first context in the list
+    String firstContext = contextList.get(0); 
+    String contextType = "User";
+    String prefix = "";
+    
+    if (firstContext.startsWith("s_")) { // for spaces
+      contextType = "Space";
+      prefix = "s_";
+    }
+    
+    List<Long> paramList = removeContextInfo(contextList);
+    int lastParam = 1;
+    StringBuilder sb = new StringBuilder();
+
+    switch (groupId.getType()) {
+    case all:
+      // userId translates into all contacts
+      sb.append(AppdataDb.FINDBY_ALL_GROUP);
+      lastParam = JPQLUtils.addInClause(sb, "ad", "contextId", lastParam, paramList.size());
+      break;
+    case deleted:
+      // ignored
+      break;
+    case friends:
+      sb.append(AppdataDb.FINDBY_FRIENDS_GROUP);
+      lastParam = JPQLUtils.addInClause(sb, "p", "id", lastParam, paramList.size());
+      sb.append(')');
+      // userId translates into all friends
+      break;
+    case groupId:
+      sb.append(AppdataDb.FINDBY_GROUP_GROUP);
+      lastParam = JPQLUtils.addInClause(sb, "ad", "contextId", lastParam, paramList.size());
+      sb.append(" and g.id = ?").append(lastParam);
+      paramList.add(Long.parseLong(groupId.getGroupId()));
+      lastParam++;
+      // userId translates into friends within a group
+      break;
+    default: // including self
+      // userId is the user Id
+      sb.append(AppdataDb.FINDBY_SELF_GROUP);
+      lastParam = JPQLUtils.addInClause(sb, "ad", "contextId", lastParam, paramList.size());
+      sb.append(" and ad.contextType = '").append(contextType).append("'");
+      break;
+
+    }
+    sb.append(" and ad.AppId = ?").append(lastParam);
+    lastParam++;
+    paramList.add(Long.parseLong(appId));
+
+    // load the map up
+    List<AppdataDb> dataMaps = JPQLUtils.getListQuery(entityManager, sb.toString(),
+        paramList, null);
+    Map<String, Map<String, String>> results = new HashMap<String, Map<String, String>>();
+
+    // only add in the fields
+    if (fields == null || fields.isEmpty()) {      
+      for (AppdataDb ad : dataMaps) {
+        String key = prefix + ad.getContextId();
+        Map<String, String> m = results.get(key);
+        if (m == null) { // create new map and add it to results map
+           m = Maps.newHashMap();
+           results.put(key,m);
+        }
+        // add key-value to existing map
+        m.put(ad.getName(),ad.getValue());
+      }
+    } else {
+      for (AppdataDb ad : dataMaps) {
+        if (fields.contains(ad.getName())) { // do manipulations only if key is in fields
+          String key = prefix + ad.getContextId();
+          Map<String, String> m = results.get(key);
+          if (m == null) { // create new map and add it to results map
+             m = Maps.newHashMap();
+             results.put(key,m);
+          }
+          // add key-value to existing map
+          m.put(ad.getName(),ad.getValue());
+        }
+      }
+    }
+    
+    DataCollection dc = new DataCollection(results);
+    return ImmediateFuture.newInstance(dc);
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public Future<Void> updatePersonData(UserId userId, GroupId groupId, String appId,
+      Set<String> fields, Map<String, String> values, SecurityToken token) throws ProtocolException {
+        
+    if (appId == null) {
+      appId = token.getAppId();
+    }
+    String uid = SPIUtils.getUserList(userId, token);
+    String contextType = "User";
+    long contextId = 0;
+    
+    if (uid.startsWith("s_")) { // for space
+      contextId = Long.parseLong(uid.replaceFirst("s_",""));
+      contextType = "Space";
+    } else { // for person
+      contextId = Long.parseLong(uid);
+    }
+        
+    Map<String,AppdataDb> dataMaps = getDataMap(contextId, contextType, groupId, appId);
+    
+    // TODO How should transactions be managed? Should samples be using warp-persist instead?
+    if (!entityManager.getTransaction().isActive()) {
+      entityManager.getTransaction().begin();
+    }
+    
+    // go through all new values and update key-value
+    for (String k : values.keySet()) {
+      if (dataMaps.containsKey(k)) {
+        // update the key
+        AppdataDb ad = dataMaps.get(k);
+        ad.setValue(values.get(k));
+        entityManager.persist(ad);
+      } else {
+        // create the new key-value
+        AppdataDb ad = new AppdataDb();
+        ad.setContextId(contextId);
+        ad.setContextType(contextType);
+        ad.setAppId(Long.parseLong(appId));
+        ad.setName(k);
+        ad.setValue(values.get(k));
+        entityManager.persist(ad);
+      }
+    }
+
+    
+
+    // for (AppdataDb adm : dataMaps) {
+    //   entityManager.persist(adm);
+    // }
+    // entityManager.flush();
+    
+    entityManager.getTransaction().commit();
+
+    return ImmediateFuture.newInstance(null);
+  }
+
+}
diff --git a/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/AppDataServiceDb.java_old b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/AppDataServiceDb.java_old
new file mode 100644
index 0000000..85bed3f
--- /dev/null
+++ b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/AppDataServiceDb.java_old
@@ -0,0 +1,295 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.graaasp.jpa.spi;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import com.google.inject.Inject;
+import com.google.common.collect.MapMaker;
+
+
+import org.apache.shindig.auth.SecurityToken;
+import org.apache.shindig.common.util.ImmediateFuture;
+import org.apache.shindig.protocol.DataCollection;
+import org.apache.shindig.protocol.ProtocolException;
+import org.apache.shindig.graaasp.jpa.ApplicationDataMapDb;
+import org.apache.shindig.graaasp.jpa.spi.JPQLUtils;
+import org.apache.shindig.graaasp.jpa.spi.SPIUtils;
+import org.apache.shindig.social.opensocial.spi.AppDataService;
+import org.apache.shindig.social.opensocial.spi.GroupId;
+import org.apache.shindig.social.opensocial.spi.UserId;
+
+import java.util.HashMap;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.Future;
+
+import javax.persistence.EntityManager;
+import javax.servlet.http.HttpServletResponse;
+
+/**
+ *
+ */
+public class AppDataServiceDb implements AppDataService {
+
+  private EntityManager entityManager;
+
+  @Inject
+  public AppDataServiceDb(EntityManager entityManager) {
+    this.entityManager = entityManager;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public Future<Void> deletePersonData(UserId userId, GroupId groupId, String appId,
+      Set<String> fields, SecurityToken token) throws ProtocolException {
+
+    List<ApplicationDataMapDb> dataMaps = getDataMap(userId, groupId, appId, token);
+    for (ApplicationDataMapDb adm : dataMaps) {
+      for (String f : fields) {
+        adm.getValues().remove(f);
+      }
+    }
+     // TODO How should transactions be managed? Should samples be using warp-persist instead?
+     if (!entityManager.getTransaction().isActive()) {
+       entityManager.getTransaction().begin();
+     }
+
+    entityManager.flush();
+    entityManager.getTransaction().commit();
+
+    return ImmediateFuture.newInstance(null);
+  }
+
+  /**
+   * @param userId
+   * @param groupId
+   * @param appId
+   * @param token
+   * @return
+   */
+  private List<ApplicationDataMapDb> getDataMap(UserId userId, GroupId groupId, String appId,
+      SecurityToken token) {
+    List<Long> paramList = Lists.newArrayList();
+    String uid = SPIUtils.getUserList(userId, token);
+    String contextType = "";
+    long id = 0;
+    if(uid.startsWith("p_")){
+      // appdata for a person
+      id = Long.parseLong(uid.replaceFirst("p_",""));
+      paramList.add(id);
+      contextType = "User";
+    }else{ 
+      if(uid.startsWith("s_")){
+        // appdata for a space
+        id = Long.parseLong(uid.replaceFirst("2_",""));
+        paramList.add(id);
+        contextType = "Space";
+      }else{
+        //throw exception in Protocol: id should contain a prefix "p_" or "s_"
+        throw new ProtocolException(HttpServletResponse.SC_NOT_FOUND ,"id should contain a prefix 'p_' (for people) or 's_' (for spaces)");
+      }
+    }
+    
+    
+    int lastParam = 1;
+    StringBuilder sb = new StringBuilder();
+
+    switch (groupId.getType()) {
+    case all:
+      // userId translates into all contacts
+      sb.append(ApplicationDataMapDb.FINDBY_ALL_GROUP);
+      sb.append(" and am.contextId = ?").append(lastParam);
+      lastParam++;
+      break;
+    case deleted:
+      // ignored
+      break;
+    case friends:
+      sb.append(ApplicationDataMapDb.FINDBY_FRIENDS_GROUP);
+      sb.append(" and am.contextId = ?").append(lastParam);
+      lastParam++;
+      // userId translates into all friends
+      break;
+    case groupId:
+      sb.append(ApplicationDataMapDb.FINDBY_GROUP_GROUP);
+      sb.append(" and am.contextId = ?").append(lastParam);
+      lastParam++;
+      sb.append(" and g.id = ?").append(lastParam);
+      paramList.add(Long.parseLong(groupId.getGroupId()));
+      lastParam++;
+      // userId translates into friends within a group
+      break;
+    default: // including self
+      // userId is the user Id
+      sb.append(ApplicationDataMapDb.FINDBY_SELF_GROUP);
+      sb.append(" am.contextId = ?").append(lastParam);
+      sb.append(" and am.contextType = '").append(contextType).append("'");
+      lastParam++;
+      break;
+
+    }
+    sb.append(" and am.AppId = ?").append(lastParam);
+    lastParam++;
+    paramList.add(Long.parseLong(appId));
+    List<ApplicationDataMapDb> dataMaps = JPQLUtils.getListQuery(entityManager, sb.toString(), paramList, null);
+    
+    if (dataMaps.isEmpty()) { // if dataMap does not exist, create one
+      List<ApplicationDataMapDb> list = new ArrayList<ApplicationDataMapDb>();
+      ApplicationDataMapDb a = new ApplicationDataMapDb();
+      a.setContextId(id);
+      a.setContextType(contextType);
+      a.setAppId(Long.parseLong(appId));
+
+      // a.setValues(null);
+      
+      if (!entityManager.getTransaction().isActive()) {
+        entityManager.getTransaction().begin();
+      }
+      entityManager.persist(a);
+      entityManager.getTransaction().commit();
+      
+      list.add(a);
+      dataMaps = list;
+      
+      dataMaps = JPQLUtils.getListQuery(entityManager, sb.toString(), paramList, null);
+    }
+    return dataMaps;
+
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public Future<DataCollection> getPersonData(Set<UserId> userIds, GroupId groupId, String appId,
+      Set<String> fields, SecurityToken token) throws ProtocolException {
+    List<String> paramList = SPIUtils.getUserList(userIds, token);
+    int lastParam = 1;
+    StringBuilder sb = new StringBuilder();
+
+    switch (groupId.getType()) {
+    case all:
+      // userId translates into all contacts
+      sb.append(ApplicationDataMapDb.FINDBY_ALL_GROUP);
+      lastParam = JPQLUtils.addInClause(sb, "am", "contextId", lastParam, paramList.size());
+      break;
+    case deleted:
+      // ignored
+      break;
+    case friends:
+      sb.append(ApplicationDataMapDb.FINDBY_FRIENDS_GROUP);
+      lastParam = JPQLUtils.addInClause(sb, "p", "id", lastParam, paramList.size());
+      sb.append(')');
+      // userId translates into all friends
+      break;
+    case groupId:
+      sb.append(ApplicationDataMapDb.FINDBY_GROUP_GROUP);
+      lastParam = JPQLUtils.addInClause(sb, "am", "contextId", lastParam, paramList.size());
+      sb.append(" and g.id = ?").append(lastParam);
+      paramList.add(groupId.getGroupId());
+      lastParam++;
+      // userId translates into friends within a group
+      break;
+    default: // including self
+      // userId is the user Id
+      sb.append(ApplicationDataMapDb.FINDBY_SELF_GROUP);
+      String uid = paramList.get(lastParam-1);
+      // lastParam = JPQLUtils.addInClause(sb, "am", "contextId", lastParam, paramList.size());
+      
+      if(uid.startsWith("p_")){
+        // appdata for a person
+        sb.append(" am.contextId = ").append(uid.replaceFirst("p_",""));
+        sb.append(" and am.contextType = 'User'");
+      }else{ 
+        if(uid.startsWith("s_")){
+          // appdata for a space
+          sb.append(" am.contextId = ").append(uid.replaceFirst("s_",""));
+          sb.append(" and am.contextType = 'Space'");
+        }else{
+          //throw exception in Protocol: id should contain a prefix "p_" or "s_"
+          throw new ProtocolException(HttpServletResponse.SC_NOT_FOUND ,"id should contain a prefix 'p_' (for people) or 's_' (for spaces)");
+        }
+      }
+      lastParam++;
+      break;
+
+    }
+    sb.append(" and am.application_id = ").append(lastParam);
+    lastParam++;
+    paramList.add(appId);
+
+    // load the map up
+    List<ApplicationDataMapDb> dataMaps = JPQLUtils.getListQuery(entityManager, sb.toString(),
+        paramList, null);
+    Map<String, Map<String, String>> results = new HashMap<String, Map<String, String>>();
+
+    // only add in the fields
+    if (fields == null || fields.isEmpty()) {
+      for (ApplicationDataMapDb adm : dataMaps) {
+        // TODO: should take spaces into account
+        String contextId = String.valueOf(adm.getContextId());
+        results.put(contextId, adm.getValues());
+      }
+    } else {
+      for (ApplicationDataMapDb adm : dataMaps) {
+        Map<String, String> m = Maps.newHashMap();
+        for (String f : fields) {
+          String value = adm.getValues().get(f);
+          if (null != value) {
+            m.put(f, value);
+          }
+        }
+        // TODO: should take spaces into account
+        String contextId = String.valueOf(adm.getContextId());
+        results.put(contextId, m);
+      }
+    }
+    DataCollection dc = new DataCollection(results);
+    return ImmediateFuture.newInstance(dc);
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public Future<Void> updatePersonData(UserId userId, GroupId groupId, String appId,
+      Set<String> fields, Map<String, String> values, SecurityToken token)
+      throws ProtocolException {
+    List<ApplicationDataMapDb> dataMaps = getDataMap(userId, groupId, appId, token);
+    for (ApplicationDataMapDb adm : dataMaps) {
+      for (String f : fields) {
+        adm.getValues().put(f, values.get(f));
+      }
+    }
+    
+    // TODO How should transactions be managed? Should samples be using warp-persist instead?
+    if (!entityManager.getTransaction().isActive()) {
+      entityManager.getTransaction().begin();
+    }
+    for (ApplicationDataMapDb adm : dataMaps) {
+      entityManager.persist(adm);
+    }
+    
+    entityManager.getTransaction().commit();
+
+    return ImmediateFuture.newInstance(null);
+  }
+
+}
diff --git a/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/AppServiceDb.java b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/AppServiceDb.java
new file mode 100644
index 0000000..628f556
--- /dev/null
+++ b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/AppServiceDb.java
@@ -0,0 +1,356 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.graaasp.jpa.spi;
+
+import com.google.common.collect.Lists;
+import com.google.inject.Inject;
+
+import org.apache.shindig.auth.SecurityToken;
+import org.apache.shindig.common.util.ImmediateFuture;
+import org.apache.shindig.protocol.ProtocolException;
+import org.apache.shindig.protocol.RestfulCollection;
+import org.apache.shindig.graaasp.jpa.spi.JPQLUtils;
+import org.apache.shindig.graaasp.jpa.spi.SPIUtils;
+import org.apache.shindig.social.core.model.FilterCapability;
+import org.apache.shindig.social.core.model.FilterSpecification;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.core.model.SpaceDb;
+import org.apache.shindig.social.core.model.WidgetDb;
+import org.apache.shindig.social.opensocial.model.App;
+import org.apache.shindig.social.opensocial.spi.CollectionOptions;
+import org.apache.shindig.social.opensocial.spi.GroupId;
+import org.apache.shindig.social.opensocial.spi.AppService;
+import org.apache.shindig.social.opensocial.spi.Context;
+import org.apache.shindig.social.opensocial.spi.AppId;
+import org.apache.shindig.social.opensocial.spi.UserId;
+
+import org.apache.shindig.common.crypto.BasicBlobCrypter;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
+import java.util.List;
+import java.util.Set;
+import java.util.Map;
+import java.util.concurrent.Future;
+import java.util.regex.*;
+
+import java.io.File;
+
+import javax.persistence.EntityManager;
+import javax.persistence.Query;
+import javax.servlet.http.HttpServletResponse;
+
+/**
+ * Implements the PersonService from the SPI binding to the JPA model and providing queries to
+ * support the OpenSocial implementation.
+ */
+public class AppServiceDb implements AppService {
+
+  /**
+   * This is the JPA entity manager, shared by all threads accessing this service (need to check
+   * that its really thread safe).
+   */
+  private EntityManager entityManager;
+
+  /**
+   * Create the PersonServiceDb, injecting an entity manager that is configured with the social
+   * model.
+   *
+   * @param entityManager the entity manager containing the social model.
+   */
+  @Inject
+  public AppServiceDb(EntityManager entityManager) {
+    this.entityManager = entityManager;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public Future<RestfulCollection<App>> getApps(Set<AppId> AppIds, 
+		  CollectionOptions collectionOptions, Set<String> fields,
+       SecurityToken token, String keyFile) throws ProtocolException {
+    // for each user id get the filtered userid using the token and then, get the users identified
+    // by the group id, the final set is filtered
+    // using the collectionOptions and return the fields requested.
+
+    // not dealing with the collection options at the moment, and not the fields because they are
+    // either lazy or at no extra costs, the consumer will either access the properties or not
+    List<App> plist = null;
+    int lastPos = 1;
+    Long totalResults = null;
+
+    StringBuilder sb = new StringBuilder();
+    // sanitize the list to get the uid's and remove duplicates
+    List<String> paramList = SPIUtils.getAppList(AppIds);
+    
+    sb.append(WidgetDb.JPQL_FINDWIDGET);
+    lastPos = JPQLUtils.addInClause(sb, "w", "id", lastPos, paramList.size());
+
+    
+    // Get total results, that is count the total number of rows for this query
+    // totalResults = JPQLUtils.getTotalResults(entityManager, sb.toString(), paramList);
+
+    
+    // Execute ordered and paginated query
+    //if (totalResults > 0) {
+    	//addOrderClause(sb, collectionOptions);
+    	plist = JPQLUtils.getListQuery(entityManager, sb.toString(), paramList, collectionOptions);
+    //}
+
+    if (plist == null) {
+      plist = Lists.newArrayList();
+    }
+    for (App a : plist) {
+      a.setToken(buildEncryptedToken(keyFile, token, a));
+    }
+    // FIXME: use JPQLUtils.getTotalResults for it
+    totalResults = new Long(plist.size());
+    // all of the above could equally have been placed into a thread to overlay the
+    // db wait times.
+    RestfulCollection<App> restCollection = new RestfulCollection<App>(
+        plist, collectionOptions.getFirst(), totalResults.intValue(), collectionOptions.getMax());
+    return ImmediateFuture.newInstance(restCollection);
+
+  }
+
+  public Future<RestfulCollection<App>> getAppsForContext(Context context, 
+		  CollectionOptions collectionOptions, Set<String> fields,
+       SecurityToken token, String keyFile) throws ProtocolException {
+    // list of apps is retrieved for a context
+
+    // not dealing with the collection options at the moment, and not the fields because they are
+    // either lazy or at no extra costs, the consumer will either access the properties or not
+    List<App> plist = null;
+    int lastPos = 1;
+    Long totalResults = null;
+
+    StringBuilder sb = new StringBuilder();
+    // sanitize the list to get the uid's and remove duplicates
+    List<String> paramList = Lists.newArrayList();
+    
+    sb.append(WidgetDb.JPQL_FINDWIDGETS);
+    if(context.getContextType().equals("@person")){
+    	sb.append("w.parentId = "+context.getContextId()+" and w.parentType = 'User'");
+    }else if (context.getContextType().equals("@space")){
+    	sb.append("w.parentId = "+context.getContextId()+" and w.parentType = 'Space'");
+    }
+    
+    String viewerId = token.getViewerId();
+    if (!viewerCanSee(context.getContextId(),viewerId)) {
+      return ImmediateFuture.newInstance(null);
+    }
+    
+    // Get total results, that is count the total number of rows for this query
+    // totalResults = JPQLUtils.getTotalResults(entityManager, sb.toString(), paramList);
+    
+    // Execute ordered and paginated query
+    //if (totalResults > 0) {
+    	//addOrderClause(sb, collectionOptions);
+    	plist = JPQLUtils.getListQuery(entityManager, sb.toString(), paramList, collectionOptions);
+    //}
+
+    if (plist == null) {
+      plist = Lists.newArrayList();
+    }
+    for (App a : plist) {
+      a.setToken(buildEncryptedToken(keyFile, token, a));
+    }
+    // FIXME: use JPQLUtils.getTotalResults for it
+    totalResults = new Long(plist.size());
+    // all of the above could equally have been placed into a thread to overlay the
+    // db wait times.
+    RestfulCollection<App> restCollection = new RestfulCollection<App>(
+        plist, collectionOptions.getFirst(), totalResults.intValue(), collectionOptions.getMax());
+    return ImmediateFuture.newInstance(restCollection);
+
+  }
+
+  // builds an encrypted security token for an app
+  // based on ownerId, viewerId and appId
+  private String buildEncryptedToken(String keyFile, SecurityToken token, App app) {
+    try {
+    BasicBlobCrypter crypter = new BasicBlobCrypter(new File(keyFile));
+
+    String ownerId = token.getOwnerId();
+    String viewerId = token.getViewerId();
+    String appId = app.getId();
+
+    Map<String, String> str = Maps.newHashMap();
+    str.put("o", ownerId); // owner
+    str.put("v", viewerId); // viewer
+    str.put("g", appId); // appId = appUrl
+
+    return "default:" + crypter.wrap(str); // security token requires "default:" before
+    } catch (Exception e) {
+      return "no token found: " + e.getMessage();
+    }
+  }
+
+  // check whether an app can be seen by a viewer
+  private boolean viewerCanSee(String spaceId, String viewerId) {
+    if (viewerId.equals("-1")) {
+      Query q = null;
+      // gets space for spaceId from the database
+      q = entityManager.createNamedQuery(SpaceDb.FINDBY_SPACEID);
+      q.setParameter(SpaceDb.PARAM_SPACEID, spaceId);
+      q.setFirstResult(0);
+      q.setMaxResults(1);
+      List<?> plist = q.getResultList();
+      SpaceDb s = (SpaceDb) plist.get(0);
+      if (!s.getVisibilityLevel().equals("Everyone")) {
+        return false;
+      } else {
+        return true;
+      }
+    } else {
+      return true;
+    }
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public Future<App> getApp(AppId AppId, Set<String> fields, SecurityToken token,
+      String keyFile) throws ProtocolException {
+
+    Query q = null;
+    // gets app for AppId from the database
+    q = entityManager.createNamedQuery(WidgetDb.FINDBY_WIDGETID);
+    q.setParameter(WidgetDb.PARAM_WIDGETID, AppId.getAppId());
+    q.setFirstResult(0);
+    q.setMaxResults(1);
+
+
+    List<?> plist = q.getResultList();
+    App app = null;
+    WidgetDb widgetDb = null;
+    if (plist != null && !plist.isEmpty()) {
+      widgetDb = (WidgetDb) plist.get(0);
+      app = (App) plist.get(0);
+      app.setToken(buildEncryptedToken(keyFile, token, app));
+    }
+    
+    String viewerId = token.getViewerId();
+    if (!viewerCanSee(widgetDb.getParentId(),viewerId)) {
+      return ImmediateFuture.newInstance(null);
+    }
+    
+    return ImmediateFuture.newInstance(app);
+  }
+
+
+
+  /**
+   * Add a filter clause specified by the collection options.
+   *
+   * @param sb the query builder buffer
+   * @param collectionOptions the options
+   * @param lastPos the last positional parameter that was used so far in the query
+   * @return
+   */
+  private int addFilterClause(StringBuilder sb, FilterCapability filterable,
+      CollectionOptions collectionOptions, int lastPos) {
+    // this makes the filter value saf
+    String filter = filterable.findFilterableProperty(collectionOptions.getFilter(),
+        collectionOptions.getFilterOperation());
+    String filterValue = collectionOptions.getFilterValue();
+    int filterPos = 0;
+    if (FilterSpecification.isValid(filter)) {
+      if (FilterSpecification.isSpecial(filter)) {
+        if (AppService.HAS_APP_FILTER.equals(filter)) {
+          // Retrieves all friends with any data for this app.
+          // TODO: how do we determine which app is being talked about,
+          // the assumption below is wrong
+          filterPos = lastPos + 1;
+          sb.append(" f.app_id  = ?").append(filterPos);
+        } else if (AppService.TOP_FRIENDS_FILTER.equals(filter)) {
+          // Retrieves only the user's top friends, this is defined here by the implementation
+          // and there is an assumption that the sort order has already been applied.
+          // to do this we need to modify the collections options
+          // there will only ever b x friends in the list and it will only ever start at 1
+
+          collectionOptions.setFirst(1);
+          collectionOptions.setMax(20);
+
+        } else if (AppService.ALL_FILTER.equals(filter)) {
+           // select all, ie no filtering
+        } else if (AppService.IS_WITH_FRIENDS_FILTER.equals(filter)) {
+          filterPos = lastPos + 1;
+          sb.append(" f.friend  = ?").append(filterPos);
+        }
+      } else {
+        sb.append("p.").append(filter);
+        switch (collectionOptions.getFilterOperation()) {
+        case contains:
+          filterPos = lastPos + 1;
+          sb.append(" like ").append(" ?").append(filterPos);
+          filterValue = '%' + filterValue + '%';
+          collectionOptions.setFilter(filterValue);
+          break;
+        case equals:
+          filterPos = lastPos + 1;
+          sb.append(" = ").append(" ?").append(filterPos);
+          break;
+        case present:
+          sb.append(" is not null ");
+          break;
+        case startsWith:
+          filterPos = lastPos + 1;
+          sb.append(" like ").append(" ?").append(filterPos);
+          filterValue = '%' + filterValue + '%';
+          collectionOptions.setFilter(filterValue);
+          break;
+        }
+      }
+    }
+    return filterPos;
+  }
+
+  /**
+   * Add an order clause to the query string.
+   *
+   * @param sb the buffer for the query string
+   * @param collectionOptions the options to use for the order.
+   */
+  private void addOrderClause(StringBuilder sb, CollectionOptions collectionOptions) {
+    String sortBy = collectionOptions.getSortBy();
+    if (sortBy != null && sortBy.length() > 0) {
+      if (AppService.TOP_FRIENDS_SORT.equals(sortBy)) {
+        // TODO sorting by friend.score doesn't work right now because of group by issue (see above TODO)
+        // this assumes that the query is a join with the friends store.
+        sb.append(" order by f.score ");
+      } else {
+        if ("name".equals(sortBy)) {
+          // TODO Is this correct?
+          // If sortBy is name then order by p.name.familyName, p.name.givenName.
+          sb.append(" order by p.name.familyName, p.name.givenName ");
+        } else {
+          sb.append(" order by p.").append(sortBy);
+        }
+        switch (collectionOptions.getSortOrder()) {
+        case ascending:
+          sb.append(" asc ");
+          break;
+        case descending:
+          sb.append(" desc ");
+          break;
+        }
+      }
+    }
+  }
+}
diff --git a/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/DocumentServiceDb.java b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/DocumentServiceDb.java
new file mode 100644
index 0000000..e2ad48d
--- /dev/null
+++ b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/DocumentServiceDb.java
@@ -0,0 +1,323 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.graaasp.jpa.spi;
+
+import com.google.common.collect.Lists;
+import com.google.inject.Inject;
+
+import org.apache.shindig.auth.SecurityToken;
+import org.apache.shindig.common.util.ImmediateFuture;
+import org.apache.shindig.protocol.ProtocolException;
+import org.apache.shindig.protocol.RestfulCollection;
+import org.apache.shindig.graaasp.jpa.spi.JPQLUtils;
+import org.apache.shindig.graaasp.jpa.spi.SPIUtils;
+import org.apache.shindig.social.core.model.AssetDb;
+import org.apache.shindig.social.core.model.FilterCapability;
+import org.apache.shindig.social.core.model.FilterSpecification;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.core.model.SpaceDb;
+import org.apache.shindig.social.opensocial.model.Document;
+import org.apache.shindig.social.opensocial.spi.CollectionOptions;
+import org.apache.shindig.social.opensocial.spi.GroupId;
+import org.apache.shindig.social.opensocial.spi.DocumentService;
+import org.apache.shindig.social.opensocial.spi.Context;
+import org.apache.shindig.social.opensocial.spi.DocumentId;
+import org.apache.shindig.social.opensocial.spi.UserId;
+
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.Future;
+import java.util.regex.*;
+
+
+import javax.persistence.EntityManager;
+import javax.persistence.Query;
+import javax.servlet.http.HttpServletResponse;
+
+/**
+ * Implements the PersonService from the SPI binding to the JPA model and providing queries to
+ * support the OpenSocial implementation.
+ */
+public class DocumentServiceDb implements DocumentService {
+
+  /**
+   * This is the JPA entity manager, shared by all threads accessing this service (need to check
+   * that its really thread safe).
+   */
+  private EntityManager entityManager;
+
+  /**
+   * Create the PersonServiceDb, injecting an entity manager that is configured with the social
+   * model.
+   *
+   * @param entityManager the entity manager containing the social model.
+   */
+  @Inject
+  public DocumentServiceDb(EntityManager entityManager) {
+    this.entityManager = entityManager;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public Future<RestfulCollection<Document>> getDocuments(Set<DocumentId> documentIds, 
+		  CollectionOptions collectionOptions, Set<String> fields,
+       SecurityToken token) throws ProtocolException {
+    // for each user id get the filtered userid using the token and then, get the users identified
+    // by the group id, the final set is filtered
+    // using the collectionOptions and return the fields requested.
+
+    // not dealing with the collection options at the moment, and not the fields because they are
+    // either lazy or at no extra costs, the consumer will either access the properties or not
+    List<Document> plist = null;
+    int lastPos = 1;
+    Long totalResults = null;
+
+    StringBuilder sb = new StringBuilder();
+    // sanitize the list to get the uid's and remove duplicates
+    List<String> paramList = SPIUtils.getDocumentList(documentIds);
+    
+    sb.append(AssetDb.JPQL_FINDDOCUMENT);
+    lastPos = JPQLUtils.addInClause(sb, "a", "id", lastPos, paramList.size());
+
+    
+    // Get total results, that is count the total number of rows for this query
+    // totalResults = JPQLUtils.getTotalResults(entityManager, sb.toString(), paramList);
+
+    
+    // Execute ordered and paginated query
+    //if (totalResults > 0) {
+    	//addOrderClause(sb, collectionOptions);
+    	plist = JPQLUtils.getListQuery(entityManager, sb.toString(), paramList, collectionOptions);
+    //}
+
+    if (plist == null) {
+    	plist = Lists.newArrayList();
+    }
+    // FIXME: use JPQLUtils.getTotalResults for it
+    totalResults = new Long(plist.size());
+    // all of the above could equally have been placed into a thread to overlay the
+    // db wait times.
+    RestfulCollection<Document> restCollection = new RestfulCollection<Document>(
+        plist, collectionOptions.getFirst(), totalResults.intValue(), collectionOptions.getMax());
+    return ImmediateFuture.newInstance(restCollection);
+
+  }
+
+  public Future<RestfulCollection<Document>> getDocumentsForContext(Context context, 
+		  CollectionOptions collectionOptions, Set<String> fields,
+       SecurityToken token) throws ProtocolException {
+    // list of documents is retrieved for a context
+
+    // not dealing with the collection options at the moment, and not the fields because they are
+    // either lazy or at no extra costs, the consumer will either access the properties or not
+    List<Document> plist = null;
+    int lastPos = 1;
+    Long totalResults = null;
+
+    StringBuilder sb = new StringBuilder();
+    // sanitize the list to get the uid's and remove duplicates
+    List<String> paramList = Lists.newArrayList();
+    
+    sb.append(AssetDb.JPQL_FINDDOCUMENTS);
+    if(context.getContextType().equals("@person")){
+    	sb.append("a.parentId = "+context.getContextId()+" and a.parentType = 'User'");
+    }else if (context.getContextType().equals("@space")){
+    	sb.append("a.parentId = "+context.getContextId()+" and a.parentType = 'Space'");
+    }
+    
+    String viewerId = token.getViewerId();
+    if (!viewerCanSee(context.getContextId(),viewerId)) {
+      return ImmediateFuture.newInstance(null);
+    }
+    
+    // Get total results, that is count the total number of rows for this query
+    // totalResults = JPQLUtils.getTotalResults(entityManager, sb.toString(), paramList);
+    
+    // Execute ordered and paginated query
+    //if (totalResults > 0) {
+    	//addOrderClause(sb, collectionOptions);
+    	plist = JPQLUtils.getListQuery(entityManager, sb.toString(), paramList, collectionOptions);
+    //}
+
+    if (plist == null) {
+    	plist = Lists.newArrayList();
+    }
+    // FIXME: use JPQLUtils.getTotalResults for it
+    totalResults = new Long(plist.size());
+    // all of the above could equally have been placed into a thread to overlay the
+    // db wait times.
+    RestfulCollection<Document> restCollection = new RestfulCollection<Document>(
+        plist, collectionOptions.getFirst(), totalResults.intValue(), collectionOptions.getMax());
+    return ImmediateFuture.newInstance(restCollection);
+
+  }
+  
+  // check whether an app can be seen by a viewer
+  private boolean viewerCanSee(String spaceId, String viewerId) {
+    if (viewerId.equals("-1")) {
+      Query q = null;
+      // gets space for spaceId from the database
+      q = entityManager.createNamedQuery(SpaceDb.FINDBY_SPACEID);
+      q.setParameter(SpaceDb.PARAM_SPACEID, spaceId);
+      q.setFirstResult(0);
+      q.setMaxResults(1);
+      List<?> plist = q.getResultList();
+      SpaceDb s = (SpaceDb) plist.get(0);
+      if (!s.getVisibilityLevel().equals("Everyone")) {
+        return false;
+      } else {
+        return true;
+      }
+    } else {
+      return true;
+    }
+  }
+  
+
+  /**
+   * {@inheritDoc}
+   */
+  public Future<Document> getDocument(DocumentId documentId, Set<String> fields, SecurityToken token)
+      throws ProtocolException {
+ 
+	Query q = null;
+	// gets document for documentId from the database
+	q = entityManager.createNamedQuery(AssetDb.FINDBY_DOCUMENTID);
+	q.setParameter(AssetDb.PARAM_DOCUMENTID, documentId.getDocumentId());
+	q.setFirstResult(0);
+	q.setMaxResults(1);
+		
+
+    List<?> plist = q.getResultList();
+    Document document = null;
+    AssetDb assetDb = null;
+    if (plist != null && !plist.isEmpty()) {
+      assetDb = (AssetDb) plist.get(0);
+      document = (Document) plist.get(0);
+    }
+    
+    String viewerId = token.getViewerId();
+    if (!viewerCanSee(assetDb.getParentId(),viewerId)) {
+      return ImmediateFuture.newInstance(null);
+    }
+    
+    return ImmediateFuture.newInstance(document);
+  }
+
+
+
+  /**
+   * Add a filter clause specified by the collection options.
+   *
+   * @param sb the query builder buffer
+   * @param collectionOptions the options
+   * @param lastPos the last positional parameter that was used so far in the query
+   * @return
+   */
+  private int addFilterClause(StringBuilder sb, FilterCapability filterable,
+      CollectionOptions collectionOptions, int lastPos) {
+    // this makes the filter value saf
+    String filter = filterable.findFilterableProperty(collectionOptions.getFilter(),
+        collectionOptions.getFilterOperation());
+    String filterValue = collectionOptions.getFilterValue();
+    int filterPos = 0;
+    if (FilterSpecification.isValid(filter)) {
+      if (FilterSpecification.isSpecial(filter)) {
+        if (DocumentService.HAS_APP_FILTER.equals(filter)) {
+          // Retrieves all friends with any data for this document.
+          // TODO: how do we determine which document is being talked about,
+          // the assumption below is wrong
+          filterPos = lastPos + 1;
+          sb.append(" f.document_id  = ?").append(filterPos);
+        } else if (DocumentService.TOP_FRIENDS_FILTER.equals(filter)) {
+          // Retrieves only the user's top friends, this is defined here by the implementation
+          // and there is an assumption that the sort order has already been applied.
+          // to do this we need to modify the collections options
+          // there will only ever b x friends in the list and it will only ever start at 1
+
+          collectionOptions.setFirst(1);
+          collectionOptions.setMax(20);
+
+        } else if (DocumentService.ALL_FILTER.equals(filter)) {
+           // select all, ie no filtering
+        } else if (DocumentService.IS_WITH_FRIENDS_FILTER.equals(filter)) {
+          filterPos = lastPos + 1;
+          sb.append(" f.friend  = ?").append(filterPos);
+        }
+      } else {
+        sb.append("p.").append(filter);
+        switch (collectionOptions.getFilterOperation()) {
+        case contains:
+          filterPos = lastPos + 1;
+          sb.append(" like ").append(" ?").append(filterPos);
+          filterValue = '%' + filterValue + '%';
+          collectionOptions.setFilter(filterValue);
+          break;
+        case equals:
+          filterPos = lastPos + 1;
+          sb.append(" = ").append(" ?").append(filterPos);
+          break;
+        case present:
+          sb.append(" is not null ");
+          break;
+        case startsWith:
+          filterPos = lastPos + 1;
+          sb.append(" like ").append(" ?").append(filterPos);
+          filterValue = '%' + filterValue + '%';
+          collectionOptions.setFilter(filterValue);
+          break;
+        }
+      }
+    }
+    return filterPos;
+  }
+
+  /**
+   * Add an order clause to the query string.
+   *
+   * @param sb the buffer for the query string
+   * @param collectionOptions the options to use for the order.
+   */
+  private void addOrderClause(StringBuilder sb, CollectionOptions collectionOptions) {
+    String sortBy = collectionOptions.getSortBy();
+    if (sortBy != null && sortBy.length() > 0) {
+      if (DocumentService.TOP_FRIENDS_SORT.equals(sortBy)) {
+        // TODO sorting by friend.score doesn't work right now because of group by issue (see above TODO)
+        // this assumes that the query is a join with the friends store.
+        sb.append(" order by f.score ");
+      } else {
+        if ("name".equals(sortBy)) {
+          // TODO Is this correct?
+          // If sortBy is name then order by p.name.familyName, p.name.givenName.
+          sb.append(" order by p.name.familyName, p.name.givenName ");
+        } else {
+          sb.append(" order by p.").append(sortBy);
+        }
+        switch (collectionOptions.getSortOrder()) {
+        case ascending:
+          sb.append(" asc ");
+          break;
+        case descending:
+          sb.append(" desc ");
+          break;
+        }
+      }
+    }
+  }
+}
diff --git a/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/JPASocialModule.java b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/JPASocialModule.java
new file mode 100644
index 0000000..e0f4a70
--- /dev/null
+++ b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/JPASocialModule.java
@@ -0,0 +1,123 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.graaasp.jpa.spi;
+
+import com.google.inject.AbstractModule;
+import com.google.inject.CreationException;
+import com.google.inject.Scopes;
+import com.google.inject.name.Names;
+import com.google.inject.spi.Message;
+
+import org.apache.commons.io.IOUtils;
+import org.apache.shindig.graaasp.jpa.eclipselink.EclipseEntityManagerProvider;
+import org.apache.shindig.graaasp.jpa.spi.ActivityServiceDb;
+import org.apache.shindig.graaasp.jpa.spi.AppDataServiceDb;
+import org.apache.shindig.graaasp.jpa.spi.PersonServiceDb;    
+import org.apache.shindig.graaasp.jpa.spi.SpaceServiceDb;    
+import org.apache.shindig.graaasp.jpa.spi.AppServiceDb;    
+import org.apache.shindig.graaasp.jpa.spi.DocumentServiceDb;  
+import org.apache.shindig.graaasp.jpa.spi.RecommenderServiceDb;    
+import org.apache.shindig.social.opensocial.spi.ActivityService;
+import org.apache.shindig.social.opensocial.spi.AlbumService;
+import org.apache.shindig.social.opensocial.spi.AppDataService;
+import org.apache.shindig.social.opensocial.spi.MediaItemService;
+import org.apache.shindig.social.opensocial.spi.MessageService;
+import org.apache.shindig.social.opensocial.spi.PersonService;
+import org.apache.shindig.social.opensocial.spi.SpaceService;
+import org.apache.shindig.social.opensocial.spi.AppService;
+import org.apache.shindig.social.opensocial.spi.DocumentService;
+import org.apache.shindig.social.opensocial.spi.RecommenderService;
+import org.apache.shindig.social.sample.spi.JsonDbOpensocialService;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.Arrays;
+import java.util.Properties;
+
+import javax.persistence.EntityManager;
+
+/**
+ *
+ */
+public class JPASocialModule extends AbstractModule {
+
+  private final static String DEFAULT_PROPERTIES = "socialjpa.properties";
+  private Properties properties;
+  private EntityManager entityManager;
+
+  /**
+   *
+   */
+  public JPASocialModule() {
+      this(null);
+  }
+
+  /**
+   *
+   */
+  public JPASocialModule(EntityManager entityManager) {
+    this.entityManager = entityManager;
+    InputStream is = null;
+    try {
+      is = this.getClass().getClassLoader().getResourceAsStream(DEFAULT_PROPERTIES);
+      if (is == null) {
+        System.err.println("Cant loacate properties");
+        throw new IOException("Failed to open " + DEFAULT_PROPERTIES);
+      }
+      properties = new Properties();
+      properties.load(is);
+    } catch (IOException e) {
+      throw new CreationException(Arrays.asList(new Message(
+          "Unable to load properties: " + DEFAULT_PROPERTIES)));
+    } finally {
+      IOUtils.closeQuietly( is );
+    }
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see com.google.inject.AbstractModule#configure()
+   */
+  @Override
+  protected void configure() {
+    Names.bindProperties(this.binder(), properties);
+    if (entityManager == null) {
+      bind(EntityManager.class).toProvider(EclipseEntityManagerProvider.class)
+          .in(Scopes.SINGLETON);
+    } else {
+      bind(EntityManager.class).toInstance(this.entityManager);
+    }
+    bind(ActivityService.class).to(ActivityServiceDb.class)
+        .in(Scopes.SINGLETON);
+    bind(PersonService.class).to(PersonServiceDb.class).in(Scopes.SINGLETON);  
+    bind(SpaceService.class).to(SpaceServiceDb.class).in(Scopes.SINGLETON);  
+    bind(AppDataService.class).to(AppDataServiceDb.class).in(Scopes.SINGLETON);
+    bind(AppService.class).to(AppServiceDb.class).in(Scopes.SINGLETON);
+    bind(DocumentService.class).to(DocumentServiceDb.class).in(Scopes.SINGLETON);
+    bind(RecommenderService.class).to(RecommenderServiceDb.class).in(Scopes.SINGLETON);
+    
+    //Temporal
+    bind(AlbumService.class).to(JsonDbOpensocialService.class);
+    bind(MediaItemService.class).to(JsonDbOpensocialService.class);
+    bind(MessageService.class).to(JsonDbOpensocialService.class);
+    
+    // static injection to have @Named 
+    //requestStaticInjection(SpaceDb.class);
+  }
+}
diff --git a/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/JPQLUtils.java b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/JPQLUtils.java
new file mode 100644
index 0000000..6cf0d0c
--- /dev/null
+++ b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/JPQLUtils.java
@@ -0,0 +1,121 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.graaasp.jpa.spi;
+
+import org.apache.shindig.protocol.ProtocolException;
+import org.apache.shindig.social.opensocial.spi.CollectionOptions;
+
+import java.util.List;
+
+import javax.persistence.EntityManager;
+import javax.persistence.Query;
+import javax.servlet.http.HttpServletResponse;
+
+/**
+ *
+ */
+public class JPQLUtils {
+
+  /**
+   * Append an in clause to the query builder buffer, using positional parameters.
+   *
+   * @param sb the query builder buffer
+   * @param alias the alias to use for the property
+   * @param inField the infield name
+   * @param nfields the number of infields
+   */
+  public static int addInClause(StringBuilder sb, String alias, String inField, int firstField,
+      int nfields) {
+    sb.append(alias).append('.').append(inField).append(" in (");
+    for (int i = firstField; i < (firstField + nfields); i++) {
+      if (i != firstField) {
+        sb.append(", ");
+      }
+      sb.append('?').append(i);
+    }
+    sb.append(')');
+    return firstField + nfields;
+  }
+
+  /**
+   * Perform a JPAQ, and return a typed list.
+   *
+   * @param <T> The type of list
+   * @param query the JPQL Query with positional parameters
+   * @param parametersValues a list of parameters
+   * @param collectionOptions the options used for paging.
+   * @return a typed list of objects
+   */
+  @SuppressWarnings("unchecked")
+  public static <T> List<T> getListQuery(EntityManager entityManager, String query,
+      List<?> parametersValues, CollectionOptions collectionOptions) {
+    Query q = createQuery(entityManager, query, parametersValues);
+    if (collectionOptions != null) {
+      q.setFirstResult(collectionOptions.getFirst());
+      q.setMaxResults(collectionOptions.getMax());
+    }
+    return (List<T>) q.getResultList();
+  }
+
+
+  /**
+   * Performs a 'select count(*)' on the given query
+   *
+   * @param entityManager
+   * @param query
+   * @param parametersValues
+   * @return
+   */
+  public static Long getTotalResults(EntityManager entityManager, String query,
+      List<?> parametersValues) {
+    int fromIndex = 0;
+    String queryInUpperCase = query.toUpperCase();
+    // If JPA query starts with FROM then fromIndex as 0 is correct,
+    // otherwise find where FROM keyword starts in the query string and set the fromIndex.
+    if (!queryInUpperCase.startsWith("FROM ")) {
+      fromIndex = queryInUpperCase.indexOf(" FROM ");
+      if (fromIndex == -1) {
+        // Couldn't find the FROM keyword in the query
+        throw new ProtocolException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Invalid query [" + query + ']');
+      }
+    }
+    query = "select count(*) " + query.substring(fromIndex, query.length());
+    Query q = createQuery(entityManager, query, parametersValues);
+    return (Long) q.getSingleResult();
+  }
+
+  /**
+   * Create JPA Query
+   *
+   * @param entityManager
+   * @param query
+   * @param parametersValues
+   * @return
+   */
+  private static Query createQuery(EntityManager entityManager, String query,
+      List<?> parametersValues) {
+    Query q = entityManager.createQuery(query);
+    int i = 1;
+    for (Object p : parametersValues) {
+      q.setParameter(i, p);
+      i++;
+    }
+    return q;
+  }
+
+}
diff --git a/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/PersonServiceDb.java b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/PersonServiceDb.java
new file mode 100644
index 0000000..139aade
--- /dev/null
+++ b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/PersonServiceDb.java
@@ -0,0 +1,488 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.graaasp.jpa.spi;
+
+import com.google.common.collect.Lists;
+import com.google.inject.Inject;
+
+import org.apache.shindig.auth.SecurityToken;
+import org.apache.shindig.common.util.ImmediateFuture;
+import org.apache.shindig.protocol.ProtocolException;
+import org.apache.shindig.protocol.RestfulCollection;
+import org.apache.shindig.protocol.DataCollection;
+import org.apache.shindig.graaasp.jpa.spi.JPQLUtils;
+import org.apache.shindig.graaasp.jpa.spi.SPIUtils;
+import org.apache.shindig.social.core.model.FilterCapability;
+import org.apache.shindig.social.core.model.FilterSpecification;
+import org.apache.shindig.social.core.model.PermissionDb;
+import org.apache.shindig.social.core.model.SpaceDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Person;
+import org.apache.shindig.social.opensocial.spi.CollectionOptions;
+import org.apache.shindig.social.opensocial.spi.GroupId;
+import org.apache.shindig.social.opensocial.spi.PersonService;
+import org.apache.shindig.social.opensocial.spi.UserId;
+import org.apache.shindig.social.opensocial.spi.Context;
+
+import org.apache.shindig.social.opensocial.model.Competence;
+import org.apache.shindig.social.opensocial.model.ListField;
+import org.apache.shindig.social.opensocial.model.Address;
+
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.Future;
+import java.util.regex.*;
+
+
+import javax.persistence.EntityManager;
+import javax.persistence.Query;
+import javax.servlet.http.HttpServletResponse;
+
+/**
+ * Implements the PersonService from the SPI binding to the JPA model and providing queries to
+ * support the OpenSocial implementation.
+ */
+public class PersonServiceDb implements PersonService {
+
+  /**
+   * This is the JPA entity manager, shared by all threads accessing this service (need to check
+   * that its really thread safe).
+   */
+  private EntityManager entityManager;
+
+  /**
+   * Create the PersonServiceDb, injecting an entity manager that is configured with the social
+   * model.
+   *
+   * @param entityManager the entity manager containing the social model.
+   */
+  @Inject
+  public PersonServiceDb(EntityManager entityManager) {
+    this.entityManager = entityManager;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public Future<RestfulCollection<Person>> getPeople(Set<UserId> userIds,
+       GroupId groupId, CollectionOptions collectionOptions, Set<String> fields,
+       SecurityToken token) throws ProtocolException {
+         
+    // Hack to get all people in the system
+    if (userIds.iterator().next().getUserId().equals("@all")) {
+      return getAllPublicPeople();
+    }
+    
+    // for each user id get the filtered userid using the token and then, get the users identified
+    // by the group id, the final set is filtered
+    // using the collectionOptions and return the fields requested.
+
+    // not dealing with the collection options at the moment, and not the fields because they are
+    // either lazy or at no extra costs, the consumer will either access the properties or not
+    List<Person> plist = null;
+    int lastPos = 1;
+    Long totalResults = null;
+
+    StringBuilder sb = new StringBuilder();
+    // sanitize the list to get the uid's and remove duplicates
+    List<String> paramList = SPIUtils.getUserList(userIds, token);
+    // select the group Id as this will drive the query
+    switch (groupId.getType()) {
+    case all:
+      // select all contacts
+      sb.append(UserDb.JPQL_FINDALLPERSON);
+      lastPos = JPQLUtils.addInClause(sb, "p", "id", lastPos, paramList.size());
+      break;
+    case friends:
+      // select all friends (subset of contacts)
+      sb.append(UserDb.JPQL_FINDPERSON_BY_FRIENDS);
+      lastPos = JPQLUtils.addInClause(sb, "p", "id", lastPos, paramList.size());
+      sb.append(") ");
+      // TODO Group by doesn't work in HSQLDB or Derby - causes a "Not in aggregate function or group by clause" jdbc exception
+      // sb.append(" group by p ");
+      break;
+    case groupId:
+      // implementation is required to support the requests implemented for graaasp
+//        switch ($group_id) {
+//       case '@spaces':
+//         $ret = $this->getPersonSpacesIds($user_id);
+//         break;
+//       case '@people':
+//         $ret = $this->getSpacePeopleIds($user_id);
+//         break;
+//       case '@administrators':
+//         $ret = $this->getAdministratorsIds($user_id);
+//         break;
+//       case '@members':
+//         $ret = $this->getMembersIds($user_id);
+//         break;
+         
+      // select those in the group
+      sb.append(UserDb.JPQL_FINDPERSON_BY_GROUP);
+      lastPos = JPQLUtils.addInClause(sb, "p", "id", lastPos, paramList.size());
+      sb.append(" and g.id = ?").append(lastPos);
+      lastPos++;
+      break;
+    case deleted:
+      // ???
+      break;
+    case self:
+      // select self
+      sb.append(UserDb.JPQL_FINDPERSON);
+      lastPos = JPQLUtils.addInClause(sb, "p", "id", lastPos, paramList.size());
+      break;
+    default:
+      throw new ProtocolException(HttpServletResponse.SC_BAD_REQUEST, "Group ID not recognized");
+
+    }
+
+    if (GroupId.Type.self.equals(groupId.getType())) {
+      plist = JPQLUtils.getListQuery(entityManager, sb.toString(), paramList, collectionOptions);
+      totalResults = Long.valueOf(1);
+      if (plist.isEmpty()) {
+        throw new ProtocolException(HttpServletResponse.SC_BAD_REQUEST, "Person not found");
+      }
+    } else {
+      int filterPos = addFilterClause(sb, UserDb.getFilterCapability(), collectionOptions,
+          lastPos);
+      if (filterPos > 0) {
+        paramList.add(collectionOptions.getFilterValue());
+      }
+
+      // Get total results, that is count the total number of rows for this query
+      totalResults = JPQLUtils.getTotalResults(entityManager, sb.toString(), paramList);
+
+      // Execute ordered and paginated query
+      if (totalResults > 0) {
+        addOrderClause(sb, collectionOptions);
+        plist = JPQLUtils.getListQuery(entityManager, sb.toString(), paramList, collectionOptions);
+      }
+
+      if (plist == null) {
+        plist = Lists.newArrayList();
+      }
+    }
+
+    // all of the above could equally have been placed into a thread to overlay the
+    // db wait times.
+    RestfulCollection<Person> restCollection = new RestfulCollection<Person>(
+        plist, collectionOptions.getFirst(), totalResults.intValue(), collectionOptions.getMax());
+    return ImmediateFuture.newInstance(restCollection);
+
+  }
+  
+  /**
+   * Get all public people in the system
+   */
+  public Future<RestfulCollection<Person>> getAllPublicPeople() throws ProtocolException {
+    StringBuilder sb = new StringBuilder();
+    sb.append(UserDb.JPQL_ALL_PUBLIC_PEOPLE);
+    List<String> paramList = Lists.newArrayList();
+    List<Person> plist = null;
+    plist = JPQLUtils.getListQuery(entityManager, sb.toString(), paramList, null);
+
+    if (plist == null) {
+      plist = Lists.newArrayList();
+    }
+    // FIXME: use JPQLUtils.getTotalResults for it
+    // all of the above could equally have been placed into a thread to overlay the
+    // db wait times.
+    RestfulCollection<Person> restCollection = new RestfulCollection<Person>(plist);
+    return ImmediateFuture.newInstance(restCollection);
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public Future<Person> getPerson(UserId id, Set<String> fields, SecurityToken token)
+      throws ProtocolException {
+    String uid = id.getUserId(token);
+    Query q = null;
+    
+    if (uid.startsWith("s_")) {
+      // Current implementation to support owner for spaces
+      // Takes space as context and viewer from security token
+      String spaceId = uid.replaceFirst("s_","");
+      String viewerId = token.getViewerId();
+      
+      // Set<String> owners = 
+      // get space owners
+      StringBuilder sb = new StringBuilder();
+      sb.append(PermissionDb.JPQL_OWNERS_BY_SPACE);
+      sb.append(" and p.itemId = ").append(spaceId);
+      List<String> owners = JPQLUtils.getListQuery(entityManager, sb.toString(),
+          Lists.newArrayList(), null);
+                  
+      // If viewer is in the list of owners for a space it returns him, 
+      // otherwise returns first user from owners list.
+      if (owners.size() == 0) {
+        throw new ProtocolException(HttpServletResponse.SC_NOT_FOUND ,"space does not have owners!");
+      }
+      
+      uid = owners.get(0);
+      for (String owner : owners) {
+        if (owner.equals(viewerId)) {
+          uid = viewerId; // viewer is the owner, set it
+          break;
+        }
+      } 
+    }
+    
+    // uid is set up now: either user-owner or owner of a space
+    q = entityManager.createNamedQuery(UserDb.FINDBY_USERID);
+    q.setParameter(UserDb.PARAM_USERID, uid);
+    q.setFirstResult(0);
+    q.setMaxResults(1);
+    
+    List<?> plist = q.getResultList();
+    Person person = null;
+    if (plist != null && !plist.isEmpty()) {
+      person = (Person) plist.get(0);
+    }
+    return ImmediateFuture.newInstance(person);
+  }
+
+  public Future<RestfulCollection<Person>> getPeopleForContext(Context context, 
+      CollectionOptions collectionOptions, Set<String> fields,
+       SecurityToken token) throws ProtocolException {
+    // list of spaces is retrieved for a context
+
+    // not dealing with the collection options at the moment, and not the fields because they are
+    // either lazy or at no extra costs, the consumer will either access the properties or not
+    List<Person> plist = null;
+    int lastPos = 1;
+    Long totalResults = null;
+
+    StringBuilder sb = new StringBuilder();
+    // sanitize the list to get the uid's and remove duplicates
+    List<String> paramList = Lists.newArrayList();
+    
+    // finds people connected (in Graaasp sense) to other people
+    // or spaces
+    sb.append(UserDb.JPQL_FINDPERSON_BY_PERMISSIONS);
+    // add permission to request
+    if(context.getContextType().equals("@person")){
+     sb.append("p.itemId = "+context.getContextId()+" and p.itemType = 'User')");
+    }else if (context.getContextType().equals("@space")){
+     sb.append("p.itemId = "+context.getContextId()+" and p.itemType = 'Space')");
+    }
+    // sb.append(UserDb.JPQL_PERMISSIONS);
+    // sb.append("p.itemId = "+context.getContextId()+" and p.itemType = 'Space'");
+    
+    // Get total results, that is count the total number of rows for this query
+    // totalResults = JPQLUtils.getTotalResults(entityManager, sb.toString(), paramList);
+    
+    // Execute ordered and paginated query
+    //if (totalResults > 0) {
+      //addOrderClause(sb, collectionOptions);
+      plist = JPQLUtils.getListQuery(entityManager, sb.toString(), paramList, collectionOptions);
+    //}
+
+    if (plist == null) {
+      plist = Lists.newArrayList();
+    }
+    // FIXME: use JPQLUtils.getTotalResults for it
+    totalResults = new Long(plist.size());
+    // all of the above could equally have been placed into a thread to overlay the
+    // db wait times.
+    RestfulCollection<Person> restCollection = new RestfulCollection<Person>(
+        plist, collectionOptions.getFirst(), totalResults.intValue(), collectionOptions.getMax());
+    return ImmediateFuture.newInstance(restCollection);
+  }
+  
+  /**
+   * {@inheritDoc}
+   */
+  public Future<Person> updatePerson(UserId id, Person person, Set<String> fields, SecurityToken token)
+      throws ProtocolException {
+    String uid = id.getUserId(token);
+    Query q = null;
+    String viewerId = token.getViewerId();
+    
+    // if (!viewerId.equals(uid)) {
+    //   throw new IllegalArgumentException("Viewer can change only his own profile");
+    // }    
+    
+    // Get the person object from db
+    q = entityManager.createNamedQuery(UserDb.FINDBY_USERID);
+    q.setParameter(UserDb.PARAM_USERID, viewerId);
+    q.setFirstResult(0);
+    q.setMaxResults(1);
+    
+    List<?> plist = q.getResultList();
+    UserDb user = null;
+    if (plist != null && !plist.isEmpty()) {
+      user = (UserDb) plist.get(0);
+      // update user's fields: displayName, aboutMe, age
+      // add fields that has to be updated
+      // user.setThumbnailUrl(person.getThumbnailUrl());
+    }
+    
+    // TODO How should transactions be managed? Should samples be using warp-persist instead?
+    if (!entityManager.getTransaction().isActive()) {
+      entityManager.getTransaction().begin();
+    }
+    // update person object
+    if (person.getName() != null) {
+      if (user.getName() != null) {
+        entityManager.remove(user.getName());
+      }
+      user.setName(person.getName());
+    }
+    if (person.getEmails() != null) {
+      for (Object e : user.getEmails()) {
+        entityManager.remove(e);
+      }
+      List<ListField> emails = Lists.newArrayList(); 
+      for (ListField c : person.getEmails()) {
+        c.setPerson(user);
+        emails.add(c);
+      }
+      user.setEmails(emails);
+    }
+    if (person.getCompetences() != null) {
+      for (Object e : user.getCompetences()) {
+        entityManager.remove(e);
+      }
+      List<Competence> competences = Lists.newArrayList(); 
+      for (Competence c : person.getCompetences()) {
+        c.setPerson(user);
+        competences.add(c);
+      }
+      user.setCompetences(competences);
+    }
+    if (person.getAddresses() != null) {
+      for (Object e : user.getAddresses()) {
+        entityManager.remove(e);
+      }
+      List<Address> addresses = Lists.newArrayList(); 
+      for (Address c : person.getAddresses()) {
+        c.setPerson(user);
+        addresses.add(c);
+      }
+      user.setAddresses(addresses);
+    }    
+    entityManager.persist(user);
+    
+    entityManager.getTransaction().commit();
+    
+    // send user data back 
+    return ImmediateFuture.newInstance((Person) user);
+  }
+  
+  
+
+  /**
+   * Add a filter clause specified by the collection options.
+   *
+   * @param sb the query builder buffer
+   * @param collectionOptions the options
+   * @param lastPos the last positional parameter that was used so far in the query
+   * @return
+   */
+  private int addFilterClause(StringBuilder sb, FilterCapability filterable,
+      CollectionOptions collectionOptions, int lastPos) {
+    // this makes the filter value saf
+    String filter = filterable.findFilterableProperty(collectionOptions.getFilter(),
+        collectionOptions.getFilterOperation());
+    String filterValue = collectionOptions.getFilterValue();
+    int filterPos = 0;
+    if (FilterSpecification.isValid(filter)) {
+      if (FilterSpecification.isSpecial(filter)) {
+        if (PersonService.HAS_APP_FILTER.equals(filter)) {
+          // Retrieves all friends with any data for this app.
+          // TODO: how do we determine which app is being talked about,
+          // the assumption below is wrong
+          filterPos = lastPos + 1;
+          sb.append(" f.app_id  = ?").append(filterPos);
+        } else if (PersonService.TOP_FRIENDS_FILTER.equals(filter)) {
+          // Retrieves only the user's top friends, this is defined here by the implementation
+          // and there is an assumption that the sort order has already been applied.
+          // to do this we need to modify the collections options
+          // there will only ever b x friends in the list and it will only ever start at 1
+
+          collectionOptions.setFirst(1);
+          collectionOptions.setMax(20);
+
+        } else if (PersonService.ALL_FILTER.equals(filter)) {
+           // select all, ie no filtering
+        } else if (PersonService.IS_WITH_FRIENDS_FILTER.equals(filter)) {
+          filterPos = lastPos + 1;
+          sb.append(" f.friend  = ?").append(filterPos);
+        }
+      } else {
+        sb.append("p.").append(filter);
+        switch (collectionOptions.getFilterOperation()) {
+        case contains:
+          filterPos = lastPos + 1;
+          sb.append(" like ").append(" ?").append(filterPos);
+          filterValue = '%' + filterValue + '%';
+          collectionOptions.setFilter(filterValue);
+          break;
+        case equals:
+          filterPos = lastPos + 1;
+          sb.append(" = ").append(" ?").append(filterPos);
+          break;
+        case present:
+          sb.append(" is not null ");
+          break;
+        case startsWith:
+          filterPos = lastPos + 1;
+          sb.append(" like ").append(" ?").append(filterPos);
+          filterValue = '%' + filterValue + '%';
+          collectionOptions.setFilter(filterValue);
+          break;
+        }
+      }
+    }
+    return filterPos;
+  }
+
+  /**
+   * Add an order clause to the query string.
+   *
+   * @param sb the buffer for the query string
+   * @param collectionOptions the options to use for the order.
+   */
+  private void addOrderClause(StringBuilder sb, CollectionOptions collectionOptions) {
+    String sortBy = collectionOptions.getSortBy();
+    if (sortBy != null && sortBy.length() > 0) {
+      if (PersonService.TOP_FRIENDS_SORT.equals(sortBy)) {
+        // TODO sorting by friend.score doesn't work right now because of group by issue (see above TODO)
+        // this assumes that the query is a join with the friends store.
+        sb.append(" order by f.score ");
+      } else {
+        if ("name".equals(sortBy)) {
+          // TODO Is this correct?
+          // If sortBy is name then order by p.name.familyName, p.name.givenName.
+          sb.append(" order by p.name.familyName, p.name.givenName ");
+        } else {
+          sb.append(" order by p.").append(sortBy);
+        }
+        switch (collectionOptions.getSortOrder()) {
+        case ascending:
+          sb.append(" asc ");
+          break;
+        case descending:
+          sb.append(" desc ");
+          break;
+        }
+      }
+    }
+  }
+}
diff --git a/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/RecommenderServiceDb.java b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/RecommenderServiceDb.java
new file mode 100644
index 0000000..a948793
--- /dev/null
+++ b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/RecommenderServiceDb.java
@@ -0,0 +1,280 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.graaasp.jpa.spi;
+
+import com.google.common.collect.Lists;
+import com.google.inject.Inject;
+
+import org.apache.shindig.auth.SecurityToken;
+import org.apache.shindig.common.util.ImmediateFuture;
+import org.apache.shindig.protocol.ProtocolException;
+import org.apache.shindig.protocol.RestfulCollection;
+import org.apache.shindig.graaasp.jpa.spi.JPQLUtils;
+import org.apache.shindig.graaasp.jpa.spi.SPIUtils;
+import org.apache.shindig.social.core.model.AssetDb;
+import org.apache.shindig.social.core.model.FilterCapability;
+import org.apache.shindig.social.core.model.FilterSpecification;
+import org.apache.shindig.social.core.model.SpaceDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.core.model.WidgetDb;
+import org.apache.shindig.social.opensocial.model.Space;
+import org.apache.shindig.social.opensocial.model.Document;
+import org.apache.shindig.social.opensocial.model.App;
+import org.apache.shindig.social.opensocial.model.Person;
+import org.apache.shindig.social.opensocial.model.Recommender;
+
+import org.apache.shindig.social.opensocial.spi.CollectionOptions;
+import org.apache.shindig.social.opensocial.spi.GroupId;
+import org.apache.shindig.social.opensocial.spi.RecommenderService;
+import org.apache.shindig.social.opensocial.spi.Context;
+import org.apache.shindig.social.opensocial.spi.SpaceId;
+import org.apache.shindig.social.opensocial.spi.UserId;
+import org.apache.shindig.social.opensocial.spi.DocumentId;
+import org.apache.shindig.social.opensocial.spi.AppId;
+
+
+import java.util.List;
+import java.util.Set;
+import java.util.HashSet;
+import java.util.concurrent.Future;
+import java.util.regex.*;
+import java.util.Random;
+
+
+import javax.persistence.EntityManager;
+import javax.persistence.Query;
+import javax.servlet.http.HttpServletResponse;
+
+/**
+ * Implements the RecommenderService from the SPI binding to the JPA model and providing queries to
+ * support the OpenSocial implementation.
+ */
+public class RecommenderServiceDb implements RecommenderService {
+
+  /**
+   * This is the JPA entity manager, shared by all threads accessing this service (need to check
+   * that its really thread safe).
+   */
+  private EntityManager entityManager;
+
+  /**
+   * Create the RecommenderServiceDb, injecting an entity manager that is configured with the social
+   * model.
+   *
+   * @param entityManager the entity manager containing the social model.
+   */
+  @Inject
+  public RecommenderServiceDb(EntityManager entityManager) {
+    this.entityManager = entityManager;
+  }
+
+  public Future<Recommender> getRecommendationsForContext(Context context, 
+		  CollectionOptions collectionOptions, 
+       SecurityToken token) throws ProtocolException {
+    
+    // get total number of spaces
+    String query = "select count(s) from SpaceDb s";
+    Query q = entityManager.createQuery(query);
+    int spaceNumber = ((Long) q.getSingleResult()).intValue();
+    
+    Random generator = new Random();
+    
+    // list of spaces is retrieved for a context
+    Set<SpaceId> spaceIds = new HashSet<SpaceId>();
+    spaceIds.add(new SpaceId("0")); // has always be here
+    String s = Integer.toString(generator.nextInt(spaceNumber)+1);
+    spaceIds.add(new SpaceId(s));
+    s = Integer.toString(generator.nextInt(spaceNumber)+1);
+    spaceIds.add(new SpaceId(s));
+    s = Integer.toString(generator.nextInt(spaceNumber)+1);
+    spaceIds.add(new SpaceId(s));
+
+    // get total number of documents
+    query = "select count(a) from AssetDb a";
+    q = entityManager.createQuery(query);
+    int documentNumber = ((Long) q.getSingleResult()).intValue();
+
+    // list of documents is retrieved for a context
+    Set<DocumentId> documentIds = new HashSet<DocumentId>();
+    documentIds.add(new DocumentId("0")); // has always be here
+    s = Integer.toString(generator.nextInt(documentNumber)+1);
+    documentIds.add(new DocumentId(s));
+    s = Integer.toString(generator.nextInt(documentNumber)+1);
+    documentIds.add(new DocumentId(s));
+    s = Integer.toString(generator.nextInt(documentNumber)+1);
+    documentIds.add(new DocumentId(s));
+
+    query = "select count(w) from WidgetDb w";
+    q = entityManager.createQuery(query);
+    int appNumber = ((Long) q.getSingleResult()).intValue();
+
+    // list of apps is retrieved for a context
+    Set<AppId> AppIds = new HashSet<AppId>();
+    AppIds.add(new AppId("0")); // has always be here
+    s = Integer.toString(generator.nextInt(appNumber)+1);
+    AppIds.add(new AppId(s));
+    s = Integer.toString(generator.nextInt(appNumber)+1);
+    AppIds.add(new AppId(s));
+    s = Integer.toString(generator.nextInt(appNumber)+1);
+    AppIds.add(new AppId(s));
+
+    query = "select count(a) from UserDb a";
+    q = entityManager.createQuery(query);
+    int userNumber = ((Long) q.getSingleResult()).intValue();
+
+    // list of people is retrieved for a context
+    Set<UserId> userIds = new HashSet<UserId>();
+    userIds.add(new UserId(UserId.Type.userId,"0")); // has always be here
+    s = Integer.toString(generator.nextInt(userNumber)+1);
+    userIds.add(new UserId(UserId.Type.userId,s));
+    s = Integer.toString(generator.nextInt(userNumber)+1);
+    userIds.add(new UserId(UserId.Type.userId,s));
+    s = Integer.toString(generator.nextInt(userNumber)+1);
+    userIds.add(new UserId(UserId.Type.userId,s));
+    
+
+    // all of the above could equally have been placed into a thread to overlay the
+    // db wait times.
+    RestfulCollection<Space> spaces = this.getSpaces(spaceIds, collectionOptions);
+    RestfulCollection<Document> documents = this.getDocuments(documentIds, collectionOptions);
+    RestfulCollection<App> apps = this.getApps(AppIds, collectionOptions);
+    RestfulCollection<Person> people = this.getPeople(userIds, collectionOptions);
+    
+    Recommender r = new Recommender(documents, apps, spaces, people);
+    
+    // return ImmediateFuture.newInstance(restCollection);
+    return ImmediateFuture.newInstance(r);
+  }
+  
+  private RestfulCollection<Space> getSpaces(Set<SpaceId> spaceIds, 
+      CollectionOptions collectionOptions) throws ProtocolException {
+    // list of spaces is retrieved for a context
+
+    List<Space> plist = null;
+    int lastPos = 1;
+    Long totalResults = null;
+
+    StringBuilder sb = new StringBuilder();
+    // sanitize the list to get the uid's and remove duplicates
+    List<String> paramList = SPIUtils.getSpaceList(spaceIds);
+    
+    sb.append(SpaceDb.JPQL_FINDSPACE);
+    lastPos = JPQLUtils.addInClause(sb, "s", "id", lastPos, paramList.size());
+
+    
+    plist = JPQLUtils.getListQuery(entityManager, sb.toString(), paramList, collectionOptions);
+
+    if (plist == null) {
+    	plist = Lists.newArrayList();
+    }
+    // FIXME: use JPQLUtils.getTotalResults for it
+    totalResults = new Long(plist.size());
+    // all of the above could equally have been placed into a thread to overlay the
+    // db wait times.
+    return new RestfulCollection<Space>(
+        plist, collectionOptions.getFirst(), totalResults.intValue(), collectionOptions.getMax());   
+  }
+
+  private RestfulCollection<App> getApps(Set<AppId> AppIds, 
+      CollectionOptions collectionOptions) throws ProtocolException {
+    // list of apps is retrieved for a context
+
+    List<App> plist = null;
+    int lastPos = 1;
+    Long totalResults = null;
+
+    StringBuilder sb = new StringBuilder();
+    // sanitize the list to get the uid's and remove duplicates
+    List<String> paramList = SPIUtils.getAppList(AppIds);
+
+    sb.append(WidgetDb.JPQL_FINDWIDGET);
+    lastPos = JPQLUtils.addInClause(sb, "w", "id", lastPos, paramList.size());
+
+
+    plist = JPQLUtils.getListQuery(entityManager, sb.toString(), paramList, collectionOptions);
+
+    if (plist == null) {
+    	plist = Lists.newArrayList();
+    }
+    // FIXME: use JPQLUtils.getTotalResults for it
+    totalResults = new Long(plist.size());
+    // all of the above could equally have been placed into a thread to overlay the
+    // db wait times.
+    return new RestfulCollection<App>(
+        plist, collectionOptions.getFirst(), totalResults.intValue(), collectionOptions.getMax());   
+  }
+
+  private RestfulCollection<Document> getDocuments(Set<DocumentId> documentIds, 
+      CollectionOptions collectionOptions) throws ProtocolException {
+    // list of documents is retrieved for a context
+
+    List<Document> plist = null;
+    int lastPos = 1;
+    Long totalResults = null;
+
+    StringBuilder sb = new StringBuilder();
+    // sanitize the list to get the uid's and remove duplicates
+    List<String> paramList = SPIUtils.getDocumentList(documentIds);
+
+    sb.append(AssetDb.JPQL_FINDDOCUMENT);
+    lastPos = JPQLUtils.addInClause(sb, "a", "id", lastPos, paramList.size());
+
+
+    plist = JPQLUtils.getListQuery(entityManager, sb.toString(), paramList, collectionOptions);
+
+    if (plist == null) {
+    	plist = Lists.newArrayList();
+    }
+    // FIXME: use JPQLUtils.getTotalResults for it
+    totalResults = new Long(plist.size());
+    // all of the above could equally have been placed into a thread to overlay the
+    // db wait times.
+    return new RestfulCollection<Document>(
+        plist, collectionOptions.getFirst(), totalResults.intValue(), collectionOptions.getMax());   
+  }
+
+  private RestfulCollection<Person> getPeople(Set<UserId> userIds, 
+      CollectionOptions collectionOptions) throws ProtocolException {
+    // list of persons is retrieved for a context
+
+    List<Person> plist = null;
+    int lastPos = 1;
+    Long totalResults = null;
+
+    StringBuilder sb = new StringBuilder();
+    // sanitize the list to get the uid's and remove duplicates
+    List<String> paramList = SPIUtils.getUserList(userIds,null);
+
+    sb.append(UserDb.JPQL_FINDPERSON);
+    if (paramList.size() > 0) {
+      lastPos = JPQLUtils.addInClause(sb, "p", "id", lastPos, paramList.size());      
+      plist = JPQLUtils.getListQuery(entityManager, sb.toString(), paramList, collectionOptions);
+    }
+
+    if (plist == null) {
+    	plist = Lists.newArrayList();
+    }
+    // FIXME: use JPQLUtils.getTotalResults for it
+    totalResults = new Long(plist.size());
+    // all of the above could equally have been placed into a thread to overlay the
+    // db wait times.
+    return new RestfulCollection<Person>(
+        plist, collectionOptions.getFirst(), totalResults.intValue(), collectionOptions.getMax());   
+  }
+
+}
diff --git a/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/SPIUtils.java b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/SPIUtils.java
new file mode 100644
index 0000000..b472e28
--- /dev/null
+++ b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/SPIUtils.java
@@ -0,0 +1,139 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.graaasp.jpa.spi;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
+import org.apache.shindig.auth.SecurityToken;
+import org.apache.shindig.social.opensocial.spi.UserId;
+import org.apache.shindig.social.opensocial.spi.SpaceId;
+import org.apache.shindig.social.opensocial.spi.AppId;
+import org.apache.shindig.social.opensocial.spi.DocumentId;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Set;
+
+/**
+ *
+ */
+public class SPIUtils {
+
+  /**
+   * @param userIds
+   * @param token
+   * @return
+   */
+  public static List<String> getUserList(Set<UserId> userIds, SecurityToken token) {
+    // TODO What's the use of userIdMap?
+    HashMap<String, String> userIdMap = Maps.newHashMap();
+    List<String> paramList = Lists.newArrayList();
+    for (UserId u : userIds) {
+      try {
+        String uid = u.getUserId(token);
+        if (uid != null) {
+          userIdMap.put(uid, uid);
+          paramList.add(uid);
+        }
+      } catch (IllegalStateException istate) {
+        // ignore the user id.
+      }
+    }
+    return paramList;
+  }
+  
+  /**
+   * @param spaceIds
+   * @param token
+   * @return
+   */
+  public static List<String> getSpaceList(Set<SpaceId> spaceIds) {
+    // TODO What's the use of userIdMap?
+    HashMap<String, String> spaceIdMap = Maps.newHashMap();
+    List<String> paramList = Lists.newArrayList();
+    for (SpaceId s : spaceIds) {
+      try {
+    	  String sid = s.getSpaceId(); 
+    	  spaceIdMap.put(sid, sid);
+    	  paramList.add(sid);
+      } catch (IllegalStateException istate) {
+        // ignore the space id.
+      }
+    }
+    return paramList;
+  }
+  
+  /**
+   * @param AppIds
+   * @param token
+   * @return
+   */
+  public static List<String> getAppList(Set<AppId> AppIds) {
+    // TODO What's the use of userIdMap?
+    HashMap<String, String> AppIdMap = Maps.newHashMap();
+    List<String> paramList = Lists.newArrayList();
+    for (AppId a : AppIds) {
+      try {
+    	  String aid = a.getAppId(); 
+    	  AppIdMap.put(aid, aid);
+    	  paramList.add(aid);
+      } catch (IllegalStateException istate) {
+        // ignore the application id.
+      }
+    }
+    return paramList;
+  }
+
+  /**
+   * @param documentIds
+   * @param token
+   * @return
+   */
+  public static List<String> getDocumentList(Set<DocumentId> documentIds) {
+    // TODO What's the use of userIdMap?
+    HashMap<String, String> documentIdMap = Maps.newHashMap();
+    List<String> paramList = Lists.newArrayList();
+    for (DocumentId d : documentIds) {
+      try {
+    	  String did = d.getDocumentId(); 
+    	  documentIdMap.put(did, did);
+    	  paramList.add(did);
+      } catch (IllegalStateException istate) {
+        // ignore the document id.
+      }
+    }
+    return paramList;
+  }   
+  /**
+   * @param userId
+   * @param token
+   * @return
+   */
+  public static String getUserList(UserId userId, SecurityToken token) {
+    return userId.getUserId(token);
+  }
+
+  public static <T> List<T> toList(Set<T> s) {
+    List<T> l = new ArrayList<T>(s.size());
+    l.addAll(s);
+    return l;
+  }
+
+}
diff --git a/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/SpaceServiceDb.java b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/SpaceServiceDb.java
new file mode 100644
index 0000000..8e372af
--- /dev/null
+++ b/java/graaasp/src/main/java/org/apache/shindig/graaasp/jpa/spi/SpaceServiceDb.java
@@ -0,0 +1,373 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.graaasp.jpa.spi;
+
+import com.google.common.collect.Lists;
+import com.google.inject.Inject;
+
+import org.apache.shindig.auth.SecurityToken;
+import org.apache.shindig.common.util.ImmediateFuture;
+import org.apache.shindig.protocol.ProtocolException;
+import org.apache.shindig.protocol.RestfulCollection;
+import org.apache.shindig.graaasp.jpa.spi.JPQLUtils;
+import org.apache.shindig.graaasp.jpa.spi.SPIUtils;
+import org.apache.shindig.social.core.model.FilterCapability;
+import org.apache.shindig.social.core.model.FilterSpecification;
+import org.apache.shindig.social.core.model.SpaceDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Space;
+import org.apache.shindig.social.opensocial.spi.CollectionOptions;
+import org.apache.shindig.social.opensocial.spi.GroupId;
+import org.apache.shindig.social.opensocial.spi.SpaceService;
+import org.apache.shindig.social.opensocial.spi.Context;
+import org.apache.shindig.social.opensocial.spi.SpaceId;
+import org.apache.shindig.social.opensocial.spi.UserId;
+
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.Future;
+import java.util.regex.*;
+
+
+import javax.persistence.EntityManager;
+import javax.persistence.Query;
+import javax.servlet.http.HttpServletResponse;
+
+/**
+ * Implements the SpaceService from the SPI binding to the JPA model and providing queries to
+ * support the OpenSocial implementation.
+ */
+public class SpaceServiceDb implements SpaceService {
+
+  /**
+   * This is the JPA entity manager, shared by all threads accessing this service (need to check
+   * that its really thread safe).
+   */
+  private EntityManager entityManager;
+
+  /**
+   * Create the PersonServiceDb, injecting an entity manager that is configured with the social
+   * model.
+   *
+   * @param entityManager the entity manager containing the social model.
+   */
+  @Inject
+  public SpaceServiceDb(EntityManager entityManager) {
+    this.entityManager = entityManager;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public Future<RestfulCollection<Space>> getSpaces(Set<SpaceId> spaceIds, 
+		  CollectionOptions collectionOptions, Set<String> fields,
+       SecurityToken token) throws ProtocolException {
+         
+     // Hack to get all people in the system
+     if (spaceIds.iterator().next().getSpaceId().equals("@all")) {
+       return getAllPublicSpaces();
+     }
+         
+    // for each user id get the filtered userid using the token and then, get the users identified
+    // by the group id, the final set is filtered
+    // using the collectionOptions and return the fields requested.
+
+    // not dealing with the collection options at the moment, and not the fields because they are
+    // either lazy or at no extra costs, the consumer will either access the properties or not
+    List<SpaceDb> dblist = null;
+    int lastPos = 1;
+    Long totalResults = null;
+
+    StringBuilder sb = new StringBuilder();
+    // sanitize the list to get the uid's and remove duplicates
+    List<String> paramList = SPIUtils.getSpaceList(spaceIds);
+    
+    sb.append(SpaceDb.JPQL_FINDSPACE);
+    lastPos = JPQLUtils.addInClause(sb, "s", "id", lastPos, paramList.size());
+
+    
+    // Get total results, that is count the total number of rows for this query
+    // totalResults = JPQLUtils.getTotalResults(entityManager, sb.toString(), paramList);
+
+    
+    // Execute ordered and paginated query
+    //if (totalResults > 0) {
+    	//addOrderClause(sb, collectionOptions);
+    	dblist = JPQLUtils.getListQuery(entityManager, sb.toString(), paramList, collectionOptions);
+    //}
+
+    String viewerId = token.getViewerId();
+    List<Space> plist = filterSpaces(dblist,viewerId);
+    
+    if (plist == null) {
+    	plist = Lists.newArrayList();
+    }
+    // FIXME: use JPQLUtils.getTotalResults for it
+    totalResults = new Long(plist.size());
+    // all of the above could equally have been placed into a thread to overlay the
+    // db wait times.
+    RestfulCollection<Space> restCollection = new RestfulCollection<Space>(
+        plist, collectionOptions.getFirst(), totalResults.intValue(), collectionOptions.getMax());
+    return ImmediateFuture.newInstance(restCollection);
+
+  }
+  
+  /**
+   * Get all public spaces in the system
+   */
+  public Future<RestfulCollection<Space>> getAllPublicSpaces() throws ProtocolException {
+    StringBuilder sb = new StringBuilder();
+    sb.append(SpaceDb.JPQL_ALL_PUBLIC_SPACES);
+    List<String> paramList = Lists.newArrayList();
+    List<Space> plist = null;
+    plist = JPQLUtils.getListQuery(entityManager, sb.toString(), paramList, null);
+
+    if (plist == null) {
+      plist = Lists.newArrayList();
+    }
+    // FIXME: use JPQLUtils.getTotalResults for it
+    // all of the above could equally have been placed into a thread to overlay the
+    // db wait times.
+    RestfulCollection<Space> restCollection = new RestfulCollection<Space>(plist);
+    return ImmediateFuture.newInstance(restCollection);
+  }
+  
+
+  public Future<RestfulCollection<Space>> getSpacesForContext(Context context, 
+      CollectionOptions collectionOptions, Set<String> fields,
+       SecurityToken token) throws ProtocolException {
+    // list of spaces is retrieved for a context
+
+    // not dealing with the collection options at the moment, and not the fields because they are
+    // either lazy or at no extra costs, the consumer will either access the properties or not
+    List<SpaceDb> dblist = null;
+    int lastPos = 1;
+    Long totalResults = null;
+
+    StringBuilder sb = new StringBuilder();
+    // sanitize the list to get the uid's and remove duplicates
+    List<String> paramList = Lists.newArrayList();
+    
+    sb.append(SpaceDb.JPQL_FINDSPACES);
+    if(context.getContextType().equals("@person")){
+    	sb.append("s.parentId = "+context.getContextId()+" and s.parentType = 'User'");
+    }else if (context.getContextType().equals("@space")){
+    	sb.append("s.parentId = "+context.getContextId()+" and s.parentType = 'Space'");
+    }
+    
+    // Get total results, that is count the total number of rows for this query
+    // totalResults = JPQLUtils.getTotalResults(entityManager, sb.toString(), paramList);
+    
+    // Execute ordered and paginated query
+    //if (totalResults > 0) {
+    	//addOrderClause(sb, collectionOptions);
+    	dblist = JPQLUtils.getListQuery(entityManager, sb.toString(), paramList, collectionOptions);
+    //}
+    
+    String viewerId = token.getViewerId();
+    List<Space> plist = filterSpaces(dblist,viewerId);
+
+    if (plist == null) {
+    	plist = Lists.newArrayList();
+    }
+    // FIXME: use JPQLUtils.getTotalResults for it
+    totalResults = new Long(plist.size());
+    // all of the above could equally have been placed into a thread to overlay the
+    // db wait times.
+    RestfulCollection<Space> restCollection = new RestfulCollection<Space>(
+        plist, collectionOptions.getFirst(), totalResults.intValue(), collectionOptions.getMax());
+    return ImmediateFuture.newInstance(restCollection);
+
+  }
+
+  // hack: for direct rest request filter space and don't do it if viewer id is specified
+  // later a check if viewerId has enough rights should be done
+  // 
+  // removes the spaces that are not allowed to be seen
+  private List<Space> filterSpaces(List<SpaceDb> list, String viewerId) {
+    List<Space> plist = Lists.newArrayList();
+    if (viewerId.equals("-1")) {
+      for (SpaceDb spaceDb : list) {
+
+        String vis = spaceDb.getVisibilityLevel();
+
+        if (vis.equals("Space members")) {
+          SpaceDb s = new SpaceDb();
+          s.setId(spaceDb.getId());
+          s.setDisplayName(spaceDb.getDisplayName());
+          s.setParentId(spaceDb.getParentId());
+          s.setParentType(spaceDb.getParentType());
+          s.setProfileUrl(spaceDb.getProfileUrl());
+          s.setVisibilityLevel(spaceDb.getVisibilityLevel());
+
+          plist.add((Space) s);
+        }
+        if (vis.equals("Everyone")) {
+          plist.add((Space) spaceDb);
+        }
+      }
+    } else {
+      for (SpaceDb spaceDb : list) {
+        plist.add((Space) spaceDb);
+      }
+    }
+    
+    return plist;
+  }
+  /**
+   * {@inheritDoc}
+   */
+  public Future<Space> getSpace(SpaceId spaceId, Set<String> fields, SecurityToken token)
+      throws ProtocolException {
+ 
+    Query q = null;
+    // gets space for spaceId from the database
+    q = entityManager.createNamedQuery(SpaceDb.FINDBY_SPACEID);
+    q.setParameter(SpaceDb.PARAM_SPACEID, spaceId.getSpaceId());
+    q.setFirstResult(0);
+    q.setMaxResults(1);
+ 
+
+    List<?> plist = q.getResultList();
+    Space space = null;
+    SpaceDb spaceDb = null;
+    if (plist != null && !plist.isEmpty()) {
+      spaceDb = (SpaceDb) plist.get(0);
+      space = (Space) plist.get(0);
+      String vis = spaceDb.getVisibilityLevel();
+      
+      // filter out hidden spaces and filter out params of closed spaces
+      if (vis.equals("Myself")) {
+        return ImmediateFuture.newInstance(null);
+      }
+      if (vis.equals("Space members")) {
+        SpaceDb s = new SpaceDb();
+        s.setId(spaceDb.getId());
+        s.setDisplayName(spaceDb.getDisplayName());
+        s.setParentId(spaceDb.getParentId());
+        s.setParentType(spaceDb.getParentType());
+        s.setProfileUrl(spaceDb.getProfileUrl());
+        s.setVisibilityLevel(spaceDb.getVisibilityLevel());
+        return ImmediateFuture.newInstance((Space) s);
+      }
+      
+    }
+    return ImmediateFuture.newInstance(space);
+  }
+
+
+
+  /**
+   * Add a filter clause specified by the collection options.
+   *
+   * @param sb the query builder buffer
+   * @param collectionOptions the options
+   * @param lastPos the last positional parameter that was used so far in the query
+   * @return
+   */
+  private int addFilterClause(StringBuilder sb, FilterCapability filterable,
+      CollectionOptions collectionOptions, int lastPos) {
+    // this makes the filter value saf
+    String filter = filterable.findFilterableProperty(collectionOptions.getFilter(),
+        collectionOptions.getFilterOperation());
+    String filterValue = collectionOptions.getFilterValue();
+    int filterPos = 0;
+    if (FilterSpecification.isValid(filter)) {
+      if (FilterSpecification.isSpecial(filter)) {
+        if (SpaceService.HAS_APP_FILTER.equals(filter)) {
+          // Retrieves all friends with any data for this app.
+          // TODO: how do we determine which app is being talked about,
+          // the assumption below is wrong
+          filterPos = lastPos + 1;
+          sb.append(" f.app_id  = ?").append(filterPos);
+        } else if (SpaceService.TOP_FRIENDS_FILTER.equals(filter)) {
+          // Retrieves only the user's top friends, this is defined here by the implementation
+          // and there is an assumption that the sort order has already been applied.
+          // to do this we need to modify the collections options
+          // there will only ever b x friends in the list and it will only ever start at 1
+
+          collectionOptions.setFirst(1);
+          collectionOptions.setMax(20);
+
+        } else if (SpaceService.ALL_FILTER.equals(filter)) {
+           // select all, ie no filtering
+        } else if (SpaceService.IS_WITH_FRIENDS_FILTER.equals(filter)) {
+          filterPos = lastPos + 1;
+          sb.append(" f.friend  = ?").append(filterPos);
+        }
+      } else {
+        sb.append("p.").append(filter);
+        switch (collectionOptions.getFilterOperation()) {
+        case contains:
+          filterPos = lastPos + 1;
+          sb.append(" like ").append(" ?").append(filterPos);
+          filterValue = '%' + filterValue + '%';
+          collectionOptions.setFilter(filterValue);
+          break;
+        case equals:
+          filterPos = lastPos + 1;
+          sb.append(" = ").append(" ?").append(filterPos);
+          break;
+        case present:
+          sb.append(" is not null ");
+          break;
+        case startsWith:
+          filterPos = lastPos + 1;
+          sb.append(" like ").append(" ?").append(filterPos);
+          filterValue = '%' + filterValue + '%';
+          collectionOptions.setFilter(filterValue);
+          break;
+        }
+      }
+    }
+    return filterPos;
+  }
+
+  /**
+   * Add an order clause to the query string.
+   *
+   * @param sb the buffer for the query string
+   * @param collectionOptions the options to use for the order.
+   */
+  private void addOrderClause(StringBuilder sb, CollectionOptions collectionOptions) {
+    String sortBy = collectionOptions.getSortBy();
+    if (sortBy != null && sortBy.length() > 0) {
+      if (SpaceService.TOP_FRIENDS_SORT.equals(sortBy)) {
+        // TODO sorting by friend.score doesn't work right now because of group by issue (see above TODO)
+        // this assumes that the query is a join with the friends store.
+        sb.append(" order by f.score ");
+      } else {
+        if ("name".equals(sortBy)) {
+          // TODO Is this correct?
+          // If sortBy is name then order by p.name.familyName, p.name.givenName.
+          sb.append(" order by p.name.familyName, p.name.givenName ");
+        } else {
+          sb.append(" order by p.").append(sortBy);
+        }
+        switch (collectionOptions.getSortOrder()) {
+        case ascending:
+          sb.append(" asc ");
+          break;
+        case descending:
+          sb.append(" desc ");
+          break;
+        }
+      }
+    }
+  }
+}
diff --git a/java/graaasp/src/main/resources/META-INF/MANIFEST.MF b/java/graaasp/src/main/resources/META-INF/MANIFEST.MF
new file mode 100644
index 0000000..254272e
--- /dev/null
+++ b/java/graaasp/src/main/resources/META-INF/MANIFEST.MF
@@ -0,0 +1,3 @@
+Manifest-Version: 1.0
+Class-Path: 
+
diff --git a/java/graaasp/src/main/resources/META-INF/orm.xml b/java/graaasp/src/main/resources/META-INF/orm.xml
new file mode 100644
index 0000000..9862e35
--- /dev/null
+++ b/java/graaasp/src/main/resources/META-INF/orm.xml
@@ -0,0 +1,100 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+-->
+<entity-mappings xmlns="http://java.sun.com/xml/ns/persistence/orm"
+  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd"
+  version="1.0"> 
+  <entity class="org.apache.shindig.social.core.model.AccountDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.ActivityDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.AddressDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.BodyTypeDb">
+  </entity>
+  <entity
+    class="org.apache.shindig.social.core.model.MediaItemDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.NameDb">
+  </entity>
+  <entity
+    class="org.apache.shindig.social.core.model.OrganizationDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.UserDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.SpaceDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.UrlDb">
+  </entity>
+  <entity
+    class="org.apache.shindig.social.core.model.ListFieldDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.MessageDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.ActivityTemplateParamsDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.OrganizationAddressDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.EmailDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.ImDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.PersonAccountDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.PersonAddressDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.PersonOrganizationDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.PhoneDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.PhotoDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.PersonPropertyDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.FriendDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.FriendPropertyDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.GroupDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.GroupPropertyDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.AppDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.ApplicationPropertyDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.ApplicationDataMapDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.ApplicationDataMapValueDb">
+  </entity> 
+  <entity class="org.apache.shindig.social.core.model.WidgetDb">
+  </entity>  
+  <entity class="org.apache.shindig.social.core.model.AssetDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.AttachmentDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.PermissionDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.AppdataDb">
+  </entity>
+  <entity class="org.apache.shindig.social.core.model.CompetenceDb">
+  </entity>
+  
+</entity-mappings>
diff --git a/java/graaasp/src/main/resources/META-INF/persistence.xml b/java/graaasp/src/main/resources/META-INF/persistence.xml
new file mode 100644
index 0000000..6f07aad
--- /dev/null
+++ b/java/graaasp/src/main/resources/META-INF/persistence.xml
@@ -0,0 +1,112 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+-->
+<persistence version="1.0" 
+  xmlns="http://java.sun.com/xml/ns/persistence" 
+  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
+  xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd"
+  >
+  
+  <persistence-unit name="hibernate" transaction-type="RESOURCE_LOCAL">
+  	<provider>org.hibernate.ejb.HibernatePersistence</provider>
+
+     <properties>
+		<property name="hibernate.hbm2ddl.auto" value="create"/>
+		<property name="hibernate.show_sql" value="false"/>
+		<property name="hibernate.connection.driver_class" value="org.apache.derby.jdbc.EmbeddedDriver"/>
+		<property name="hibernate.connection.password" value=""/>
+		<property name="hibernate.connection.url" value="jdbc:derby:target/hibernatedb;create=true"/>
+		<property name="hibernate.connection.username" value="sa"/>
+		<property name="hibernate.dialect" value="org.hibernate.dialect.DerbyDialect"/>
+     </properties>
+  </persistence-unit>
+  
+  <persistence-unit name="hibernate_spi_testing" transaction-type="RESOURCE_LOCAL">
+  	<provider>org.hibernate.ejb.HibernatePersistence</provider>
+
+     <properties>
+		<property name="hibernate.hbm2ddl.auto" value="create"/>
+		<property name="hibernate.show_sql" value="false"/>
+		<property name="hibernate.connection.driver_class" value="org.apache.derby.jdbc.EmbeddedDriver"/>
+		<property name="hibernate.connection.password" value=""/>
+		<property name="hibernate.connection.url" value="jdbc:derby:target/hibernatedb;create=true"/>
+		<property name="hibernate.connection.username" value="sa"/>
+		<property name="hibernate.dialect" value="org.hibernate.dialect.DerbyDialect"/>
+     </properties>
+  </persistence-unit>
+  
+ <persistence-unit name="default" transaction-type="RESOURCE_LOCAL">
+  <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>
+ 
+  <!-- By default your mappings can be defined in orm.xml file, -->
+  <!-- which is discovered automatically.                        -->                                     
+  <exclude-unlisted-classes>true</exclude-unlisted-classes>
+ 
+  <!--  properties are set in Bootstrap no here  -->
+  <properties>
+     <property name="eclipselink.jdbc.driver" value="org.apache.derby.jdbc.EmbeddedDriver"/>
+     <property name="eclipselink.jdbc.url" value="jdbc:derby:target/eclipselinkdb;create=true"/>
+     <property name="eclipselink.jdbc.user" value="sa"/>
+     <property name="eclipselink.jdbc.password" value=" "/>
+     <property name="eclipselink.target-server" value="None"/>
+     
+     <property name="eclipselink.jdbc.write-connections.min" value="1"/>
+     <property name="eclipselink.jdbc.read-connections.min" value="1"/>
+     <property name="eclipselink.logging.level" value="INFO" />
+     <property name="eclipselink.logging.logger" value="JavaLogger"/>
+     <property name="eclipselink.logging.timestamp" value="false" />
+     <property name="eclipselink.logging.session" value="false" />
+     <property name="eclipselink.logging.thread" value="false" />
+     <property name="eclipselink.logging.exceptions" value="false" />
+     <property name="eclipselink.ddl-generation" value="none"/>
+     <property name="eclipselink.ddl-generation.output-mode" value="database"/>
+  </properties>
+</persistence-unit>
+
+<persistence-unit name="cayenne">
+  <provider>org.apache.cayenne.jpa.Provider</provider>
+ 
+  <!-- By default your mappings can be defined in orm.xml file, -->
+  <!-- which is discovered automatically.                        -->                                     
+  <exclude-unlisted-classes>true</exclude-unlisted-classes>
+    <properties>
+      <property name="org.apache.cayenne.datasource.jdbc.driver" value="org.apache.derby.jdbc.EmbeddedDriver"/>
+      <property name="org.apache.cayenne.datasource.jdbc.url" value="jdbc:derby:cayennedb;create=true"/>
+      <property name="org.apache.cayenne.datasource.jdbc.username" value="sa"/>
+      <property name="org.apache.cayenne.datasource.jdbc.password" value=" "/>
+      <property name="org.apache.cayenne.datasource.jdbc.minConnections" value="1"/>
+      <property name="org.apache.cayenne.datasource.jdbc.maxConnections" value="2"/>
+      <property name="org.apache.cayenne.schema.create" value="true"/>
+    </properties>
+  </persistence-unit>
+<persistence-unit name="openjpa">
+  <provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>
+ 
+  <!-- By default your mappings can be defined in orm.xml file, -->
+  <!-- which is discovered automatically.                        -->                                     
+  <exclude-unlisted-classes>true</exclude-unlisted-classes>
+    <properties>
+      <property name="openjpa.ConnectionURL" value="jdbc:derby:openjpa;create=true"/>
+      <property name="openjpa.ConnectionDriverName" value="org.apache.derby.jdbc.EmbeddedDriver"/>
+      <property name="openjpa.ConnectionUserName" value="sa"/>
+      <property name="openjpa.ConnectionPassword" value=""/>
+      <property name="openjpa.Log" value="DefaultLevel=WARN, Tool=INFO"/>
+    </properties>
+  </persistence-unit>
+</persistence>
diff --git a/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/ActivityServiceDbTest.java b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/ActivityServiceDbTest.java
new file mode 100644
index 0000000..7e598e6
--- /dev/null
+++ b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/ActivityServiceDbTest.java
@@ -0,0 +1,118 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+
+package org.apache.shindig.graaasp.jpa.spi;
+
+import static org.junit.Assert.assertEquals;
+
+import org.apache.shindig.protocol.RestfulCollection;
+import org.apache.shindig.graaasp.jpa.spi.ActivityServiceDb;
+import org.apache.shindig.graaasp.jpa.spi.SpiDatabaseBootstrap;
+import org.apache.shindig.graaasp.jpa.spi.SpiEntityManagerFactory;
+import org.apache.shindig.graaasp.jpa.spi.SpiTestUtil;
+import org.apache.shindig.social.opensocial.model.Activity;
+import org.apache.shindig.social.opensocial.model.EnumUtil;
+import org.apache.shindig.social.opensocial.spi.CollectionOptions;
+import org.apache.shindig.social.opensocial.spi.GroupId;
+import org.apache.shindig.social.opensocial.spi.UserId;
+import org.apache.shindig.social.opensocial.spi.UserId.Type;
+
+import java.util.Set;
+import java.util.concurrent.Future;
+
+import javax.persistence.EntityManager;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+/**
+ * 
+ * Test the ActivityServiceDb implementation.
+ *
+ */
+public class ActivityServiceDbTest {
+  
+  // TODO ALL_FIELDS should be already in Activity as it is with Person
+  private final static Set<String> ACTIVITY_ALL_FIELDS = EnumUtil.getEnumStrings(Activity.Field.values());
+      
+  private final Activity testActivity = SpiTestUtil.buildTestActivity("1", "john.doe", "yellow", "what a color!");  
+
+  private ActivityServiceDb activityServiceDb;
+  
+  /** The bootstrap. */
+  private SpiDatabaseBootstrap bootstrap;
+  
+  @Before
+  public void setup() throws Exception {
+    EntityManager entityManager = SpiEntityManagerFactory.getEntityManager();
+    this.activityServiceDb = new ActivityServiceDb(entityManager);
+    
+    // Bootstrap hibernate and associated test db, and setup db with test data
+    this.bootstrap = new SpiDatabaseBootstrap(entityManager);
+    this.bootstrap.init();
+  }
+  
+  @After
+  public void tearDown() throws Exception {
+    bootstrap.tearDown();
+  }  
+  
+  @Test
+  public void getJohnDoeActivityWithAppId1() throws Exception {
+    Future<Activity> result = this.activityServiceDb.getActivity(new UserId(Type.userId, "john.doe"), new GroupId(GroupId.Type.self, "@self"), null, ACTIVITY_ALL_FIELDS, "1", SpiTestUtil.DEFAULT_TEST_SECURITY_TOKEN);
+    Activity activity = result.get();
+    SpiTestUtil.assertActivityEquals(activity, testActivity);    
+  }
+  
+  @Test
+  public void getJohnDoeActivities() throws Exception {
+    Future<RestfulCollection<Activity>> result = this.activityServiceDb.getActivities(SpiTestUtil.buildUserIds("john.doe"), new GroupId(GroupId.Type.self, "@self"), null, ACTIVITY_ALL_FIELDS, new CollectionOptions(), SpiTestUtil.DEFAULT_TEST_SECURITY_TOKEN);
+    RestfulCollection<Activity> activityCollection = result.get();
+    assertEquals(1, activityCollection.getTotalResults());
+    assertEquals(0, activityCollection.getStartIndex());
+    SpiTestUtil.assertActivityEquals(activityCollection.getEntry().get(0), testActivity);
+  }
+  
+  @Test
+  public void getJohnDoeFriendsActivities() throws Exception {
+    Future<RestfulCollection<Activity>> result = this.activityServiceDb.getActivities(SpiTestUtil.buildUserIds("john.doe"), new GroupId(GroupId.Type.friends, "@friends"), null, ACTIVITY_ALL_FIELDS, new CollectionOptions(), SpiTestUtil.DEFAULT_TEST_SECURITY_TOKEN);
+    RestfulCollection<Activity> activityCollection = result.get();
+    assertEquals(2, activityCollection.getTotalResults());
+    assertEquals(0, activityCollection.getStartIndex());
+  }
+  
+  @Test
+  public void createNewActivityForJohnDoe() throws Exception {
+    // Create new activity
+    final String title = "hi mom!";
+    final String body = "and dad.";
+    Activity activity = SpiTestUtil.buildTestActivity("2", "john.doe", title, body);    
+    this.activityServiceDb.createActivity(new UserId(Type.userId, "john.doe"), new GroupId(GroupId.Type.self, "@self"), "2", ACTIVITY_ALL_FIELDS, activity, SpiTestUtil.DEFAULT_TEST_SECURITY_TOKEN);
+    
+    // Check activity was created as expected
+    Future<RestfulCollection<Activity>> result = this.activityServiceDb.getActivities(SpiTestUtil.buildUserIds("john.doe"), new GroupId(GroupId.Type.self, "@self"), null, ACTIVITY_ALL_FIELDS, new CollectionOptions(), SpiTestUtil.DEFAULT_TEST_SECURITY_TOKEN);
+    RestfulCollection<Activity> activityCollection = result.get();
+    assertEquals(2, activityCollection.getTotalResults());
+    assertEquals(0, activityCollection.getStartIndex());
+    activity = activityCollection.getEntry().get(1);    
+    assertEquals(activity.getTitle(), title);
+    assertEquals(activity.getBody(), body);
+  }
+  
+}
diff --git a/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/AppDataServiceDbTest.java b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/AppDataServiceDbTest.java
new file mode 100644
index 0000000..d010866
--- /dev/null
+++ b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/AppDataServiceDbTest.java
@@ -0,0 +1,141 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+
+package org.apache.shindig.graaasp.jpa.spi;
+
+import static org.junit.Assert.assertEquals;
+
+import org.apache.shindig.protocol.DataCollection;
+import org.apache.shindig.graaasp.jpa.spi.AppDataServiceDb;
+import org.apache.shindig.graaasp.jpa.spi.SpiDatabaseBootstrap;
+import org.apache.shindig.graaasp.jpa.spi.SpiEntityManagerFactory;
+import org.apache.shindig.graaasp.jpa.spi.SpiTestUtil;
+import org.apache.shindig.social.opensocial.spi.GroupId;
+import org.apache.shindig.social.opensocial.spi.UserId;
+import org.apache.shindig.social.opensocial.spi.UserId.Type;
+
+import java.util.Map;
+import java.util.concurrent.Future;
+
+import javax.persistence.EntityManager;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import com.google.common.collect.MapMaker;
+
+/**
+ * 
+ * Test the AppDataServiceDb implementation.
+ *
+ */
+public class AppDataServiceDbTest {
+  
+  private static final String DEFAULT_APPLICATION_ID = "app";
+
+  private AppDataServiceDb appDataServiceDb;
+  
+  /** The bootstrap. */
+  private SpiDatabaseBootstrap bootstrap;
+  
+  @Before
+  public void setup() throws Exception {
+    EntityManager entityManager = SpiEntityManagerFactory.getEntityManager();
+    this.appDataServiceDb = new AppDataServiceDb(entityManager);
+    
+    // Bootstrap hibernate and associated test db, and setup db with test data
+    this.bootstrap = new SpiDatabaseBootstrap(entityManager);
+    this.bootstrap.init();
+  }
+  
+  @After
+  public void tearDown() throws Exception {
+    bootstrap.tearDown();
+  }
+  
+  @Test
+  public void getJohnDoeApplicationData() throws Exception {
+    Future<DataCollection> results = this.appDataServiceDb.getPersonData(SpiTestUtil.buildUserIds("john.doe"), new GroupId(GroupId.Type.self, "@self"), DEFAULT_APPLICATION_ID, null, SpiTestUtil.DEFAULT_TEST_SECURITY_TOKEN);
+    DataCollection data = results.get();
+    assertEquals(1, data.getEntry().size());
+    assertEquals("0", data.getEntry().get("john.doe").get("count"));
+  }
+  
+  @Test
+  public void getJohnDoeApplicationDataWithCountField() throws Exception {
+    Future<DataCollection> results = this.appDataServiceDb.getPersonData(SpiTestUtil.buildUserIds("john.doe"), new GroupId(GroupId.Type.self, "@self"), DEFAULT_APPLICATION_ID, SpiTestUtil.asSet("count"), SpiTestUtil.DEFAULT_TEST_SECURITY_TOKEN);
+    DataCollection data = results.get();
+    assertEquals(1, data.getEntry().size());
+    assertEquals("0", data.getEntry().get("john.doe").get("count"));
+  }
+  
+  @Test
+  public void getJohnDoeApplicationDataWithInvalidField() throws Exception {
+    Future<DataCollection> results = this.appDataServiceDb.getPersonData(SpiTestUtil.buildUserIds("john.doe"), new GroupId(GroupId.Type.self, "@self"), DEFAULT_APPLICATION_ID, SpiTestUtil.asSet("peabody"), SpiTestUtil.DEFAULT_TEST_SECURITY_TOKEN);
+    DataCollection data = results.get();
+    assertEquals(1, data.getEntry().size());
+    assertEquals(null, data.getEntry().get("john.doe").get("count"));
+  }
+  
+  @Test
+  public void getJohnDoeFriendsApplicationDataWithCountField() throws Exception {
+    Future<DataCollection> results = this.appDataServiceDb.getPersonData(SpiTestUtil.buildUserIds("john.doe"), new GroupId(GroupId.Type.friends, "@friends"), DEFAULT_APPLICATION_ID, SpiTestUtil.asSet("count"), SpiTestUtil.DEFAULT_TEST_SECURITY_TOKEN);
+    DataCollection data = results.get();
+    assertEquals(3, data.getEntry().size());
+    assertEquals("7", data.getEntry().get("jane.doe").get("count"));
+    assertEquals("2", data.getEntry().get("george.doe").get("count"));    
+  }
+  
+  @Test
+  public void updateJohnDoeApplicationDataSettingCountTo5() throws Exception {
+    // Do update
+    Map<String, String> values = new MapMaker().makeMap();
+    values.put("count", "5");
+    this.appDataServiceDb.updatePersonData(new UserId(Type.userId, "john.doe"), new GroupId(GroupId.Type.self, "@self"), DEFAULT_APPLICATION_ID, SpiTestUtil.asSet("count"), values, SpiTestUtil.DEFAULT_TEST_SECURITY_TOKEN);
+    
+    // Verify that update succeeded
+    Future<DataCollection> results = this.appDataServiceDb.getPersonData(SpiTestUtil.buildUserIds("john.doe"), new GroupId(GroupId.Type.self, "@self"), DEFAULT_APPLICATION_ID, null, SpiTestUtil.DEFAULT_TEST_SECURITY_TOKEN);
+    DataCollection data = results.get();
+    assertEquals(1, data.getEntry().size());
+    assertEquals("5", data.getEntry().get("john.doe").get("count"));
+  }
+  
+  @Test
+  public void deleteJohnDoeApplicationDataWithCountField() throws Exception {
+    // Do delete
+    this.appDataServiceDb.deletePersonData(new UserId(Type.userId, "john.doe"), new GroupId(GroupId.Type.self, "@self"), DEFAULT_APPLICATION_ID, SpiTestUtil.asSet("count"), SpiTestUtil.DEFAULT_TEST_SECURITY_TOKEN);
+    // Verify that delete succeeded
+    Future<DataCollection> results = this.appDataServiceDb.getPersonData(SpiTestUtil.buildUserIds("john.doe"), new GroupId(GroupId.Type.self, "@self"), DEFAULT_APPLICATION_ID, SpiTestUtil.asSet("count"), SpiTestUtil.DEFAULT_TEST_SECURITY_TOKEN);
+    DataCollection data = results.get();
+    assertEquals(1, data.getEntry().size());
+    assertEquals(null, data.getEntry().get("john.doe").get("count"));
+  }
+  
+  @Test
+  public void deleteJohnDoeApplicationDataWithInvalidField() throws Exception {
+    // Do delete with invalid field
+    this.appDataServiceDb.deletePersonData(new UserId(Type.userId, "john.doe"), new GroupId(GroupId.Type.self, "@self"), DEFAULT_APPLICATION_ID, SpiTestUtil.asSet("peabody"), SpiTestUtil.DEFAULT_TEST_SECURITY_TOKEN);
+    // Verify that delete did not occur
+    Future<DataCollection> results = this.appDataServiceDb.getPersonData(SpiTestUtil.buildUserIds("john.doe"), new GroupId(GroupId.Type.self, "@self"), DEFAULT_APPLICATION_ID, SpiTestUtil.asSet("count"), SpiTestUtil.DEFAULT_TEST_SECURITY_TOKEN);
+    DataCollection data = results.get();
+    assertEquals(1, data.getEntry().size());
+    assertEquals("0", data.getEntry().get("john.doe").get("count"));
+  }
+    
+}
diff --git a/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/PersonServiceDbTest.java b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/PersonServiceDbTest.java
new file mode 100644
index 0000000..b767766
--- /dev/null
+++ b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/PersonServiceDbTest.java
@@ -0,0 +1,128 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+
+package org.apache.shindig.graaasp.jpa.spi;
+
+import static org.junit.Assert.assertEquals;
+
+import org.apache.shindig.protocol.RestfulCollection;
+import org.apache.shindig.protocol.model.SortOrder;
+import org.apache.shindig.graaasp.jpa.spi.PersonServiceDb;
+import org.apache.shindig.graaasp.jpa.spi.SpiDatabaseBootstrap;
+import org.apache.shindig.graaasp.jpa.spi.SpiEntityManagerFactory;
+import org.apache.shindig.graaasp.jpa.spi.SpiTestUtil;
+import org.apache.shindig.social.opensocial.model.Person;
+import org.apache.shindig.social.opensocial.spi.CollectionOptions;
+import org.apache.shindig.social.opensocial.spi.GroupId;
+import org.apache.shindig.social.opensocial.spi.UserId;
+import org.apache.shindig.social.opensocial.spi.UserId.Type;
+
+import java.util.List;
+import java.util.concurrent.Future;
+
+import javax.persistence.EntityManager;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+/**
+ * 
+ * Test the PersonServiceDb implementation.
+ *
+ */
+public class PersonServiceDbTest {
+
+  private final Person canonical = SpiTestUtil.buildCanonicalPerson();
+  
+  private PersonServiceDb personServiceDb;
+  
+  /** The bootstrap. */
+  private SpiDatabaseBootstrap bootstrap;
+  
+  @Before
+  public void setup() throws Exception {
+    EntityManager entityManager = SpiEntityManagerFactory.getEntityManager();
+    this.personServiceDb = new PersonServiceDb(entityManager);
+    
+    // Bootstrap hibernate and associated test db, and setup db with test data
+    this.bootstrap = new SpiDatabaseBootstrap(entityManager);
+    this.bootstrap.init();
+  }
+  
+  @After
+  public void tearDown() throws Exception {
+    bootstrap.tearDown();
+  }
+  
+  @Test
+  public void getCanonicalPerson() throws Exception {
+     Future<Person> person = this.personServiceDb.getPerson(new UserId(Type.userId, "canonical"), Person.Field.ALL_FIELDS, SpiTestUtil.DEFAULT_TEST_SECURITY_TOKEN);
+     SpiTestUtil.assertPersonEquals(person.get(), canonical);
+  }
+  
+  @Test
+  public void getJohnDoeFriendsOrderedByName() throws Exception {
+    // Set collection options
+    CollectionOptions collectionOptions = new CollectionOptions();
+    collectionOptions.setSortBy("name");
+    collectionOptions.setSortOrder(SortOrder.ascending);
+    collectionOptions.setMax(20);
+    
+    // Get all friends of john.doe
+    Future<RestfulCollection<Person>> result = this.personServiceDb.getPeople(SpiTestUtil.buildUserIds("john.doe"), new GroupId(GroupId.Type.friends, "@friends"), collectionOptions, Person.Field.ALL_FIELDS, SpiTestUtil.DEFAULT_TEST_SECURITY_TOKEN);
+    
+    RestfulCollection<Person> peopleCollection = result.get();
+    assertEquals(3, peopleCollection.getTotalResults());
+    assertEquals(0, peopleCollection.getStartIndex());    
+    List<Person> people = peopleCollection.getEntry();    
+    // The users should be in alphabetical order
+    SpiTestUtil.assertPersonEquals(people.get(0), "george.doe", "George Doe");
+    SpiTestUtil.assertPersonEquals(people.get(1), "jane.doe", "Jane Doe");     
+  }
+  
+  
+  @Test
+  public void getJohnDoeFriendsOrderedByNameWithPagination() throws Exception {    
+    // Set collection options
+    CollectionOptions collectionOptions = new CollectionOptions();
+    collectionOptions.setSortBy("name");
+    collectionOptions.setSortOrder(SortOrder.ascending);
+    collectionOptions.setFirst(0);
+    collectionOptions.setMax(1);
+    
+    // Get first friend of john.doe
+    Future<RestfulCollection<Person>> result = this.personServiceDb.getPeople(SpiTestUtil.buildUserIds("john.doe"), new GroupId(GroupId.Type.friends, "@friends"), collectionOptions, Person.Field.ALL_FIELDS, SpiTestUtil.DEFAULT_TEST_SECURITY_TOKEN);    
+    RestfulCollection<Person> peopleCollection = result.get();
+    assertEquals(3, peopleCollection.getTotalResults());
+    assertEquals(0, peopleCollection.getStartIndex());    
+    List<Person> people = peopleCollection.getEntry();    
+    SpiTestUtil.assertPersonEquals(people.get(0), "george.doe", "George Doe");
+    
+    // Get second friend of john.doe
+    collectionOptions.setFirst(1);
+    result = this.personServiceDb.getPeople(SpiTestUtil.buildUserIds("john.doe"), new GroupId(GroupId.Type.friends, "@friends"), collectionOptions, Person.Field.ALL_FIELDS, SpiTestUtil.DEFAULT_TEST_SECURITY_TOKEN);
+    peopleCollection = result.get();
+    assertEquals(3, peopleCollection.getTotalResults());
+    assertEquals(1, peopleCollection.getStartIndex());    
+    people = peopleCollection.getEntry();    
+    SpiTestUtil.assertPersonEquals(people.get(0), "jane.doe", "Jane Doe");    
+  }
+  
+  
+}
diff --git a/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/SpiDatabaseBootstrap.java b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/SpiDatabaseBootstrap.java
new file mode 100644
index 0000000..bd1c862
--- /dev/null
+++ b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/SpiDatabaseBootstrap.java
@@ -0,0 +1,684 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+
+package org.apache.shindig.graaasp.jpa.spi;
+
+import org.apache.shindig.protocol.model.Enum;
+import org.apache.shindig.protocol.model.EnumImpl;
+import org.apache.shindig.graaasp.jpa.EnumDb;
+import org.apache.shindig.social.core.model.ActivityDb;
+import org.apache.shindig.social.core.model.AddressDb;
+import org.apache.shindig.social.core.model.ApplicationDataMapDb;
+import org.apache.shindig.social.core.model.AppDb;
+import org.apache.shindig.social.core.model.BodyTypeDb;
+import org.apache.shindig.social.core.model.EmailDb;
+import org.apache.shindig.social.core.model.FriendDb;
+import org.apache.shindig.social.core.model.MediaItemDb;
+import org.apache.shindig.social.core.model.NameDb;
+import org.apache.shindig.social.core.model.OrganizationAddressDb;
+import org.apache.shindig.social.core.model.PersonAddressDb;
+import org.apache.shindig.social.core.model.PersonOrganizationDb;
+import org.apache.shindig.social.core.model.PhoneDb;
+import org.apache.shindig.social.core.model.PhotoDb;
+import org.apache.shindig.social.core.model.UrlDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Address;
+import org.apache.shindig.social.opensocial.model.Drinker;
+import org.apache.shindig.social.opensocial.model.ListField;
+import org.apache.shindig.social.opensocial.model.LookingFor;
+import org.apache.shindig.social.opensocial.model.MediaItem;
+import org.apache.shindig.social.opensocial.model.NetworkPresence;
+import org.apache.shindig.social.opensocial.model.Organization;
+import org.apache.shindig.social.opensocial.model.Person;
+import org.apache.shindig.social.opensocial.model.Smoker;
+import org.apache.shindig.social.opensocial.model.Url;
+
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Date;
+import java.util.List;
+import java.util.Map;
+
+import javax.persistence.EntityManager;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.MapMaker;
+import com.google.inject.Inject;
+
+/**
+ * 
+ * Bootstrap class to setup a test database with some dummy data,
+ * which is used by unit tests in spi package.
+ *
+ */
+public class SpiDatabaseBootstrap {
+
+  private final static SimpleDateFormat DATE_FORMATTER = new SimpleDateFormat("yyyy-MM-dd");
+  
+  private EntityManager entityManager;
+  
+  @Inject
+  public SpiDatabaseBootstrap(EntityManager entityManager) {
+    this.entityManager = entityManager;
+  }
+  
+  /*
+   * Init database bootstrap
+   */
+  public void init() throws Exception {
+    this.bootstrapDatabase();    
+  }
+  
+  /*
+   * Bootstrap database with some dummy test data
+   */
+  protected void bootstrapDatabase() throws Exception {
+    // Start transaction
+    if (!entityManager.getTransaction().isActive()) {
+      entityManager.getTransaction().begin();
+    }
+  
+    // Build person with dummy data
+    Person canonical = buildCanonicalPerson();    
+    Person johnDoe = buildPerson("john.doe", "Johnny", Person.Gender.male, true, "Doe", "John", "John Doe");
+    Person janeDoe = buildPerson("jane.doe", "Janey", Person.Gender.female, true, "Doe", "Jane", "Jane Doe"); 
+    Person georgeDoe = buildPerson("george.doe", "Georgey", Person.Gender.male, true, "Doe", "George", "George Doe");
+    Person mario = buildPerson("mario.rossi", "Mario", Person.Gender.male, true, "Rossi", "Mario", "Mario Rossi"); 
+    Person maija = buildPerson("maija.m", "Maija", Person.Gender.female, true, "Meik\u00e4l\u00e4inen", "Maija", "Maija Meik\u00e4l\u00e4inen");
+    
+    // Persist each person
+    entityManager.persist(canonical);
+    entityManager.persist(johnDoe);
+    entityManager.persist(janeDoe);    
+    entityManager.persist(georgeDoe);
+    entityManager.persist(mario);
+    entityManager.persist(maija);
+    
+    // Build and persist friend relationships
+    entityManager.persist(buildFriend(canonical, johnDoe));
+    entityManager.persist(buildFriend(canonical, janeDoe));
+    entityManager.persist(buildFriend(canonical, georgeDoe));
+    entityManager.persist(buildFriend(canonical, maija));
+    entityManager.persist(buildFriend(johnDoe, janeDoe));
+    entityManager.persist(buildFriend(johnDoe, georgeDoe));
+    entityManager.persist(buildFriend(johnDoe, maija));
+    entityManager.persist(buildFriend(janeDoe, johnDoe));
+    entityManager.persist(buildFriend(georgeDoe, johnDoe));
+    
+    // Build and persist activity test data    
+    entityManager.persist(buildCanonicalActivity("canonical", "1"));
+    entityManager.persist(buildCanonicalActivity("canonical", "2"));
+    
+    ActivityDb activity1 = buildActivityTemplate("john.doe", "1");    
+    activity1.setTitle("yellow");
+    activity1.setBody("what a color!");
+    entityManager.persist(activity1);
+    
+    ActivityDb activity2 = buildActivityTemplate("jane.doe", "1");    
+    activity2.setBody("and she thinks you look like him");
+    List<MediaItem> mediaItems = new ArrayList<MediaItem>();
+    MediaItemDb mediaItem1 = new MediaItemDb();
+    mediaItem1.setMimeType("image/jpeg");
+    mediaItem1.setType(MediaItem.Type.IMAGE);
+    mediaItem1.setUrl("http://animals.nationalgeographic.com/staticfiles/NGS/Shared/StaticFiles/animals/images/primary/black-spider-monkey.jpg");
+    MediaItemDb mediaItem2 = new MediaItemDb();
+    mediaItem2.setMimeType("image/jpeg");
+    mediaItem2.setType(MediaItem.Type.IMAGE);
+    mediaItem2.setUrl("http://image.guardian.co.uk/sys-images/Guardian/Pix/gallery/2002/01/03/monkey300.jpg");
+    mediaItems.add(mediaItem1);
+    mediaItems.add(mediaItem2);
+    activity2.setMediaItems(mediaItems);
+    activity2.setStreamTitle("jane's photos");
+    activity2.setTitle("Jane just posted a photo of a monkey");
+    entityManager.persist(activity2);
+    
+    ActivityDb activity3 = buildActivityTemplate("jane.doe", "2");    
+    activity3.setBody("or is it you?");
+    List<MediaItem> mediaItems2 = new ArrayList<MediaItem>();
+    MediaItemDb mediaItem3 = new MediaItemDb();
+    mediaItem3.setMimeType("image/jpeg");
+    mediaItem3.setType(MediaItem.Type.IMAGE);
+    mediaItem3.setUrl("http://www.funnyphotos.net.au/images/fancy-dress-dog-yoda-from-star-wars1.jpg");
+    mediaItems2.add(mediaItem3);
+    activity3.setMediaItems(mediaItems2);
+    activity3.setStreamTitle("jane's photos");
+    activity3.setTitle("Jane says George likes yoda!");
+    entityManager.persist(activity3);
+    
+    // Build and persist application data test data
+    AppDb testApplication = new AppDb();
+    testApplication.setId("app");
+    entityManager.persist(testApplication);
+    
+    ApplicationDataMapDb applicationDataMap1 = buildApplicationDataTemplate(testApplication, "canonical", "2");
+    applicationDataMap1.getValues().put("size", "100");
+    entityManager.persist(applicationDataMap1);
+    
+    ApplicationDataMapDb applicationDataMap2 = buildApplicationDataTemplate(testApplication, "john.doe", "0");
+    entityManager.persist(applicationDataMap2);
+    
+    ApplicationDataMapDb applicationDataMap3 = buildApplicationDataTemplate(testApplication, "george.doe", "2");
+    entityManager.persist(applicationDataMap3);
+    
+    ApplicationDataMapDb applicationDataMap4 = buildApplicationDataTemplate(testApplication, "jane.doe", "7");
+    entityManager.persist(applicationDataMap4);
+    
+    ApplicationDataMapDb applicationDataMap5 = buildApplicationDataTemplate(testApplication, "maija.m", null);
+    entityManager.persist(applicationDataMap5);
+   
+    // Commit transaction
+    entityManager.getTransaction().commit();
+  }
+  
+  /**
+   * Delete all previous data
+   * 
+   * @throws Exception
+   */
+  public void tearDown() throws Exception {
+    // Start transaction
+    if (!entityManager.getTransaction().isActive()) {
+      entityManager.getTransaction().begin();
+    }
+    
+    // Delete all data
+    entityManager.createNativeQuery("delete from friend where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from activity_media where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from url where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from template_params where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from photo where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from phone where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from person_properties where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from person_organization where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from person_group where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from person_application where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from person_address where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from person_account where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from person where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from organizational_address where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from organization where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from name where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from message where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from membership where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from media_item where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from im where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from group_property where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from friend_property where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from email where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from body_type where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from application_property where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from application_datavalue where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from application_datamap where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from application where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from address where 1 > 0").executeUpdate();    
+    entityManager.createNativeQuery("delete from activity where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from account where 1 > 0").executeUpdate();
+    entityManager.createNativeQuery("delete from list_field where 1 > 0").executeUpdate();    
+    
+    // Commit transaction
+    entityManager.getTransaction().commit();
+    
+    // Clear entity manager
+    entityManager.clear();
+  }
+  
+  //
+  // Build methods that create dummy test data 
+  //
+  
+  private ApplicationDataMapDb buildApplicationDataTemplate(AppDb application, String personId, String count) {
+    ApplicationDataMapDb applicationDataMap = new ApplicationDataMapDb();
+    applicationDataMap.setApplication(application);
+    applicationDataMap.setPersonId(personId);    
+    Map<String, String> values = new MapMaker().makeMap();
+    if (null != count) {
+      values.put("count", count);
+    }
+    applicationDataMap.setValues(values);
+    return applicationDataMap;
+  }
+  
+  private ActivityDb buildCanonicalActivity(String userId, String id) {
+    ActivityDb activity = buildActivityTemplate(userId, id);
+    
+    // Common attributes
+    activity.setPriority(0.7F);
+    activity.setStreamFaviconUrl("http://upload.wikimedia.org/wikipedia/commons/0/02/Nuvola_apps_edu_languages.gif");
+    activity.setStreamSourceUrl("http://www.example.org/canonical/streamsource");
+    activity.setStreamTitle("All my activities");
+    activity.setStreamUrl("http://www.example.org/canonical/activities");
+        
+    // Set othe attributes depending on given id
+    if ("1".equals(id)) {          
+      activity.setBody("Went rafting");
+      activity.setBodyId("1");
+      activity.setExternalId("http://www.example.org/123456");
+      List<MediaItem> mediaItems = new ArrayList<MediaItem>();
+      MediaItemDb mediaItem1 = new MediaItemDb();
+      mediaItem1.setMimeType("image/*");
+      mediaItem1.setType(MediaItem.Type.IMAGE);
+      mediaItem1.setUrl("http://upload.wikimedia.org/wikipedia/commons/thumb/7/77/Rafting_em_Brotas.jpg/800px-Rafting_em_Brotas.jpg");
+      MediaItemDb mediaItem2 = new MediaItemDb();
+      mediaItem2.setMimeType("audio/mpeg");
+      mediaItem2.setType(MediaItem.Type.AUDIO);
+      mediaItem2.setUrl("http://www.archive.org/download/testmp3testfile/mpthreetest.mp3");
+      mediaItems.add(mediaItem1);
+      mediaItems.add(mediaItem2);
+      activity.setMediaItems(mediaItems);
+      activity.setPostedTime(1111111111L);
+      Map<String, String> templateParams = new MapMaker().makeMap();
+      templateParams.put("small", "true");
+      templateParams.put("otherContent", "and got wet");
+      activity.setTemplateParams(templateParams);
+      activity.setTitle("My trip");
+      activity.setTitleId("1");
+      activity.setUpdated(new Date());
+      activity.setUrl("http://www.example.org/canonical/activities/1");
+      
+    } else if ("2".equals(id)) {      
+      activity.setBody("Went skiing");
+      activity.setBodyId("2");
+      activity.setExternalId("http://www.example.org/123457");
+      List<MediaItem> mediaItems = new ArrayList<MediaItem>();
+      activity.setMediaItems(mediaItems);
+      activity.setPostedTime(1111111112L);
+      Map<String, String> templateParams = new MapMaker().makeMap();
+      templateParams.put("small", "true");
+      templateParams.put("otherContent", "and went fast");
+      activity.setTemplateParams(templateParams);
+      activity.setTitle("My next trip");
+      activity.setTitleId("2");
+      activity.setUpdated(new Date());
+      activity.setUrl("http://www.example.org/canonical/activities/2");
+    }
+    return activity;
+  }
+
+  private ActivityDb buildActivityTemplate(String userId, String id) {
+    ActivityDb activity = new ActivityDb();
+    activity.setUserId(userId);
+    activity.setId(id);    
+    return activity;
+  }
+  
+  private FriendDb buildFriend(Person person, Person friend) {
+    FriendDb friendDb = new FriendDb();
+    friendDb.setPerson(person);
+    friendDb.setFriend(friend);
+    return friendDb;
+  }
+
+  private Person buildPerson(String id, String displayName, Person.Gender gender, boolean hasApp,
+      String familyName, String givenName, String formatted) throws Exception {
+    Person person = buildPersonTemplate(id);
+    person.setDisplayName(displayName);
+    person.setGender(gender);
+    person.setHasApp(hasApp);
+    
+    NameDb name = new NameDb();
+    name.setFamilyName(familyName);
+    name.setGivenName(givenName);
+    name.setFormatted(formatted);
+    person.setName(name);
+    
+    return person;
+  }
+  
+  private Person buildCanonicalPerson() throws Exception {
+    Person person = buildPersonTemplate("canonical");
+    person.setAboutMe("I have an example of every piece of data");    
+    person.setActivities(asList("Coding Shindig"));    
+    List<Address> addresses = new ArrayList<Address>();
+    PersonAddressDb address = new PersonAddressDb();
+    address.setCountry("US");
+    address.setLatitude(28.3043F);
+    address.setLongitude(143.0859F);
+    address.setLocality("who knows");
+    address.setPostalCode("12345");
+    address.setRegion("Apache, CA");
+    address.setStreetAddress("1 OpenStandards Way");
+    address.setType("home");
+    address.setFormatted("PoBox 3565, 1 OpenStandards Way, Apache, CA");
+    // address.setPerson(person);
+    addresses.add(address);
+    person.setAddresses(addresses);    
+    person.setAge(33);
+    
+    BodyTypeDb bodyType = new BodyTypeDb();
+    bodyType.setBuild("svelte");
+    bodyType.setEyeColor("blue");
+    bodyType.setHairColor("black");
+    bodyType.setHeight(1.84F);
+    bodyType.setWeight(74F);
+    person.setBodyType(bodyType);
+    
+    person.setBooks(asList("The Cathedral & the Bazaar","Catch 22"));
+    person.setCars(asList("beetle","prius"));
+    person.setChildren("3");
+    
+    AddressDb currentLocation = new AddressDb();
+    currentLocation.setLatitude(48.858193F);
+    currentLocation.setLongitude(2.29419F);
+    person.setCurrentLocation(currentLocation);
+        
+    person.setBirthday(buildDate("1975-01-01"));
+    person.setDisplayName("Shin Digg");
+    person.setDrinker(new EnumDb<Drinker>(Drinker.SOCIALLY));
+    
+    List<ListField> emails = new ArrayList<ListField>();
+    EmailDb email = new EmailDb();
+    email.setValue("dev@shindig.apache.org");
+    email.setType("work");
+    emails.add(email);
+    person.setEmails(emails);
+   
+    person.setEthnicity("developer");    
+    person.setFashion("t-shirts");    
+    person.setFood(asList("sushi","burgers"));    
+    person.setGender(Person.Gender.male);
+    person.setHappiestWhen("coding");    
+    person.setHasApp(true);    
+    person.setHeroes(asList("Doug Crockford", "Charles Babbage"));    
+    person.setHumor("none to speak of");    
+    person.setInterests(asList("PHP","Java"));    
+    person.setJobInterests("will work for beer");
+    
+    List<Organization> organizations = new ArrayList<Organization>();
+    
+    PersonOrganizationDb organization1 = new PersonOrganizationDb();
+    OrganizationAddressDb orgAddress1 = new OrganizationAddressDb();
+    orgAddress1.setFormatted("1 Shindig Drive");
+    organization1.setAddress(orgAddress1);
+    organization1.setDescription("lots of coding");
+    organization1.setEndDate(buildDate("2010-10-10"));
+    organization1.setField("Software Engineering");
+    organization1.setName("Apache.com");
+    organization1.setSalary("$1000000000");
+    organization1.setStartDate(buildDate("1995-01-01"));
+    organization1.setSubField("Development");
+    organization1.setTitle("Grand PooBah");
+    organization1.setWebpage("http://shindig.apache.org/");
+    organization1.setType("job");
+    
+    PersonOrganizationDb organization2 = new PersonOrganizationDb();
+    OrganizationAddressDb orgAddress2 = new OrganizationAddressDb();
+    orgAddress2.setFormatted("1 Skid Row");
+    organization2.setAddress(orgAddress2);
+    organization2.setDescription("");
+    organization2.setEndDate(buildDate("1995-01-01"));
+    organization2.setField("College");
+    organization2.setName("School of hard Knocks");
+    organization2.setSalary("$100");
+    organization2.setStartDate(buildDate("1991-01-01"));
+    organization2.setSubField("Lab Tech");
+    organization2.setTitle("Gopher");
+    organization2.setWebpage("");
+    organization2.setType("job");
+    
+    organizations.add(organization1);
+    organizations.add(organization2);
+    person.setOrganizations(organizations);
+    
+    person.setLanguagesSpoken(asList("English","Dutch","Esperanto"));
+    person.setUpdated(new Date());
+    person.setLivingArrangement("in a house");
+        
+    List<Enum<LookingFor>> lookingFor = Lists.newArrayList();
+    Enum<LookingFor> lookingForOne = new EnumImpl<LookingFor>(LookingFor.RANDOM);
+    Enum<LookingFor> lookingForTwo = new EnumImpl<LookingFor>(LookingFor.NETWORKING);
+    lookingFor.add(lookingForOne);
+    lookingFor.add(lookingForTwo);
+    person.setLookingFor(lookingFor);
+    
+    person.setMovies(asList("Iron Man", "Nosferatu"));
+    person.setMusic(asList("Chieftains","Beck"));
+    
+    NameDb name = new NameDb();
+    name.setAdditionalName("H");
+    name.setFamilyName("Digg");
+    name.setGivenName("Shin");
+    name.setHonorificPrefix("Sir");
+    name.setHonorificSuffix("Social Butterfly");
+    name.setFormatted("Sir Shin H. Digg Social Butterfly");
+    person.setName(name);
+    
+    person.setNetworkPresence(new EnumDb<NetworkPresence>(NetworkPresence.ONLINE));
+    
+    person.setNickname("diggy");
+    person.setPets("dog,cat");
+    
+    List<ListField> phoneNumbers = new ArrayList<ListField>();
+    PhoneDb phone1 = new PhoneDb();
+    phone1.setValue("111-111-111");
+    phone1.setType("work");
+    PhoneDb phone2 = new PhoneDb();
+    phone2.setValue("999-999-999");
+    phone2.setType("mobile");
+    phoneNumbers.add(phone1);
+    phoneNumbers.add(phone2);
+    person.setPhoneNumbers(phoneNumbers);
+    
+    person.setPoliticalViews("open leaning");    
+    person.setProfileSong(buildUrl("http://www.example.org/songs/OnlyTheLonely.mp3", "Feelin' blue", "road"));
+    person.setProfileUrl("http://www.example.org/?id=1");
+    person.setProfileVideo(buildUrl("http://www.example.org/videos/Thriller.flv", "Thriller", "video"));
+   
+    person.setQuotes(asList("I am therfore I code", "Doh!"));
+    person.setRelationshipStatus("married to my job");
+    person.setReligion("druidic");
+    person.setRomance("twice a year");
+    person.setScaredOf("COBOL");
+    person.setSexualOrientation("north");
+    person.setSmoker(new EnumDb<Smoker>(Smoker.NO));    
+    person.setSports(asList("frisbee","rugby"));
+    person.setStatus("happy");
+    person.setTags(asList("C#","JSON","template"));
+    person.setUtcOffset(-8L);
+    person.setTurnOffs(asList("lack of unit tests","cabbage"));
+    person.setTurnOns(asList("well document code"));
+    person.setTvShows(asList("House","Battlestar Galactica"));
+    
+    List<Url> urls = new ArrayList<Url>();
+    urls.add(buildUrl("http://www.example.org/?id=1", "my profile", "Profile"));
+    urls.add(buildUrl("http://www.example.org/pic/?id=1", "my awesome picture", "Thumbnail"));
+    person.setUrls(urls);
+    
+    List<ListField> photos = new ArrayList<ListField>();
+    PhotoDb photo = new PhotoDb();
+    photo.setValue("http://www.example.org/pic/?id=1");
+    photo.setType("thumbnail");
+    photos.add(photo);
+    person.setPhotos(photos);
+    
+    return person;
+  }
+  
+  private Person buildPersonTemplate(String personId) {
+    UserDb person = new UserDb();
+    person.setId(personId);
+    person.setAboutMe("");
+    
+    person.setActivities(asList(""));
+    
+    List<Address> addresses = new ArrayList<Address>();
+    PersonAddressDb address = new PersonAddressDb();
+    address.setCountry("");
+    address.setLatitude(0F);
+    address.setLongitude(0F);
+    address.setLocality("");
+    address.setPostalCode("");
+    address.setRegion("");
+    address.setStreetAddress("");
+    address.setType("");
+    address.setFormatted("");
+    // TODO This causes problems when converting back to json.
+    // address.setPerson(person);
+    addresses.add(address);
+    person.setAddresses(addresses);
+    
+    person.setAge(0);
+    
+    BodyTypeDb bodyType = new BodyTypeDb();
+    bodyType.setBuild("");
+    bodyType.setEyeColor("");
+    bodyType.setHairColor("");
+    bodyType.setHeight(0F);
+    bodyType.setWeight(0F);
+    person.setBodyType(bodyType);
+    
+    person.setBooks(asList(""));
+    person.setCars(asList(""));
+    person.setChildren("");
+    
+    AddressDb currentLocation = new AddressDb();
+    currentLocation.setLatitude(0F);
+    currentLocation.setLongitude(0F);
+    person.setCurrentLocation(currentLocation);
+    
+    person.setBirthday(new Date());
+    person.setDisplayName("");
+    person.setDrinker(new EnumDb<Drinker>(Drinker.SOCIALLY));
+    
+    List<ListField> emails = new ArrayList<ListField>();
+    EmailDb email = new EmailDb();
+    email.setValue("");
+    email.setType("");
+    emails.add(email);
+    person.setEmails(emails);
+    
+    person.setEthnicity("");    
+    person.setFashion("");    
+    person.setFood(asList(""));    
+    person.setGender(Person.Gender.male);
+    person.setHappiestWhen("");    
+    person.setHasApp(true);    
+    person.setHeroes(asList(""));    
+    person.setHumor("");    
+    person.setInterests(asList(""));    
+    person.setJobInterests("");
+    
+    List<Organization> organizations = new ArrayList<Organization>();
+    
+    PersonOrganizationDb organization1 = new PersonOrganizationDb();
+    OrganizationAddressDb orgAddress1 = new OrganizationAddressDb();
+    orgAddress1.setFormatted("");
+    organization1.setAddress(orgAddress1);
+    organization1.setDescription("");
+    organization1.setEndDate(new Date());
+    organization1.setField("");
+    organization1.setName("");
+    organization1.setSalary("");
+    organization1.setStartDate(new Date());
+    organization1.setSubField("");
+    organization1.setTitle("");
+    organization1.setWebpage("");
+    organization1.setType("");    
+    
+    organizations.add(organization1);
+    person.setOrganizations(organizations);
+    
+    person.setLanguagesSpoken(asList(""));
+    person.setUpdated(new Date());
+    person.setLivingArrangement("");
+        
+    List<Enum<LookingFor>> lookingFor = Lists.newArrayList();
+    Enum<LookingFor> lookingForOne = new EnumImpl<LookingFor>(LookingFor.RANDOM);
+    Enum<LookingFor> lookingForTwo = new EnumImpl<LookingFor>(LookingFor.NETWORKING);
+    lookingFor.add(lookingForOne);
+    lookingFor.add(lookingForTwo);
+    person.setLookingFor(lookingFor);
+    
+    person.setMovies(asList(""));
+    person.setMusic(asList(""));
+    
+    NameDb name = new NameDb();
+    name.setAdditionalName("");
+    name.setFamilyName("");
+    name.setGivenName("");
+    name.setHonorificPrefix("");
+    name.setHonorificSuffix("");
+    name.setFormatted("");
+    person.setName(name);
+    
+    person.setNetworkPresence(new EnumDb<NetworkPresence>(NetworkPresence.ONLINE));
+    person.setNickname("");
+    person.setPets("");
+    
+    List<ListField> phoneNumbers = new ArrayList<ListField>();
+    PhoneDb phone1 = new PhoneDb();
+    phone1.setValue("");
+    phone1.setType("");
+    PhoneDb phone2 = new PhoneDb();
+    phone2.setValue("");
+    phone2.setType("");
+    phoneNumbers.add(phone1);
+    phoneNumbers.add(phone2);
+    person.setPhoneNumbers(phoneNumbers);
+    
+    person.setPoliticalViews("");    
+    person.setProfileSong(buildUrl("", "Link Text", "URL"));
+    person.setProfileUrl("");
+    person.setProfileVideo(buildUrl("", "Link Text", "URL"));
+    person.setQuotes(asList(""));
+    person.setRelationshipStatus("");
+    person.setReligion("");
+    person.setRomance("");
+    person.setScaredOf("");
+    person.setSexualOrientation("");
+    person.setSmoker(new EnumDb<Smoker>(Smoker.NO));    
+    person.setSports(asList(""));
+    person.setStatus("");
+    person.setTags(asList(""));
+    person.setUtcOffset(-8L);
+    person.setTurnOffs(asList(""));
+    person.setTurnOns(asList(""));
+    person.setTvShows(asList(""));
+    
+    List<Url> urls = new ArrayList<Url>();
+    urls.add(buildUrl("", "", "Profile"));
+    urls.add(buildUrl("", "", "Thumbnail"));
+    person.setUrls(urls);
+    
+    List<ListField> photos = new ArrayList<ListField>();
+    PhotoDb photo = new PhotoDb();
+    photo.setValue("");
+    photo.setType("thumbnail");
+    photos.add(photo);
+    person.setPhotos(photos);
+    
+    return person;
+  }
+  
+  private Date buildDate(String dateAsString) throws Exception {    
+    return DATE_FORMATTER.parse(dateAsString);
+  }
+  
+  private List<String> asList(String... items) {
+    return Arrays.asList(items);
+  }
+  
+  private Url buildUrl(String targetUrl, String linkTest, String type) {
+    Url url = new UrlDb();
+    url.setValue(targetUrl);
+    url.setLinkText(linkTest);
+    url.setType(type);
+    return url;
+  }
+  
+}
diff --git a/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/SpiEntityManagerFactory.java b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/SpiEntityManagerFactory.java
new file mode 100644
index 0000000..d2dae4e
--- /dev/null
+++ b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/SpiEntityManagerFactory.java
@@ -0,0 +1,59 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+
+package org.apache.shindig.graaasp.jpa.spi;
+
+import java.util.HashMap;
+
+import javax.persistence.EntityManager;
+import javax.persistence.EntityManagerFactory;
+import javax.persistence.Persistence;
+
+import org.apache.shindig.graaasp.jpa.spi.SpiEntityManagerFactory;
+
+/**
+ * A factory for creating TestEntityManager objects.
+ */
+public class SpiEntityManagerFactory {
+
+  /** The entity manager. */
+  private EntityManager entityManager;
+  
+  /** The Constant INSTANCE. */
+  public final static SpiEntityManagerFactory INSTANCE = new SpiEntityManagerFactory();
+  
+  /** The Constant DEFAULT_UNIT_NAME. */
+  private static final String DEFAULT_UNIT_NAME = "hibernate_spi_testing";
+  
+  /**
+   * Instantiates a new test entity manager factory.
+   */
+  private SpiEntityManagerFactory() {
+    EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory(DEFAULT_UNIT_NAME, new HashMap<String, String>());
+    this.entityManager = entityManagerFactory.createEntityManager();
+  }
+  
+  /**
+   * Gets the entity manager.
+   * 
+   * @return the entity manager
+   */
+  public static EntityManager getEntityManager() {
+    return INSTANCE.entityManager;
+  }
+}
diff --git a/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/SpiTestUtil.java b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/SpiTestUtil.java
new file mode 100644
index 0000000..be681c4
--- /dev/null
+++ b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/SpiTestUtil.java
@@ -0,0 +1,396 @@
+/* Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+
+package org.apache.shindig.graaasp.jpa.spi;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+import org.apache.shindig.auth.SecurityToken;
+import org.apache.shindig.common.testing.FakeGadgetToken;
+import org.apache.shindig.protocol.model.Enum;
+import org.apache.shindig.protocol.model.EnumImpl;
+import org.apache.shindig.social.core.model.ActivityImpl;
+import org.apache.shindig.social.core.model.AddressImpl;
+import org.apache.shindig.social.core.model.BodyTypeImpl;
+import org.apache.shindig.social.core.model.ListFieldImpl;
+import org.apache.shindig.social.core.model.NameImpl;
+import org.apache.shindig.social.core.model.OrganizationImpl;
+import org.apache.shindig.social.core.model.PersonImpl;
+import org.apache.shindig.social.core.model.UrlImpl;
+import org.apache.shindig.social.opensocial.model.Activity;
+import org.apache.shindig.social.opensocial.model.Address;
+import org.apache.shindig.social.opensocial.model.BodyType;
+import org.apache.shindig.social.opensocial.model.Drinker;
+import org.apache.shindig.social.opensocial.model.ListField;
+import org.apache.shindig.social.opensocial.model.LookingFor;
+import org.apache.shindig.social.opensocial.model.Name;
+import org.apache.shindig.social.opensocial.model.NetworkPresence;
+import org.apache.shindig.social.opensocial.model.Organization;
+import org.apache.shindig.social.opensocial.model.Person;
+import org.apache.shindig.social.opensocial.model.Smoker;
+import org.apache.shindig.social.opensocial.model.Url;
+import org.apache.shindig.social.opensocial.spi.UserId;
+import org.apache.shindig.social.opensocial.spi.UserId.Type;
+
+import java.text.SimpleDateFormat;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Date;
+import java.util.List;
+import java.util.Set;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Sets;
+
+
+/**
+ * 
+ * Convenient build and assert methods used by spi unit tests
+ *
+ */
+public class SpiTestUtil {
+  
+  public final static SecurityToken DEFAULT_TEST_SECURITY_TOKEN = (SecurityToken) new FakeGadgetToken();
+  public final static SimpleDateFormat DATE_FORMATTER = new SimpleDateFormat("yyyy-MM-dd");
+  
+  /*
+   * Build canonical test person instance
+   */
+  public static Person buildCanonicalPerson() {    
+    NameImpl name = new NameImpl("Sir Shin H. Digg Social Butterfly");
+    name.setAdditionalName("H");
+    name.setFamilyName("Digg");
+    name.setGivenName("Shin");
+    name.setHonorificPrefix("Sir");
+    name.setHonorificSuffix("Social Butterfly");
+    
+    Person canonical = new PersonImpl("canonical", "Shin Digg", name);
+
+    canonical.setAboutMe("I have an example of every piece of data");
+    canonical.setActivities(Lists.newArrayList("Coding Shindig"));
+
+    Address address = new AddressImpl("PoBox 3565, 1 OpenStandards Way, Apache, CA");
+    address.setCountry("US");
+    address.setLatitude(28.3043F);
+    address.setLongitude(143.0859F);
+    address.setLocality("who knows");
+    address.setPostalCode("12345");
+    address.setRegion("Apache, CA");
+    address.setStreetAddress("1 OpenStandards Way");
+    address.setType("home");
+    address.setFormatted("PoBox 3565, 1 OpenStandards Way, Apache, CA");
+    canonical.setAddresses(Lists.newArrayList(address));
+
+    canonical.setAge(33);
+    BodyTypeImpl bodyType = new BodyTypeImpl();
+    bodyType.setBuild("svelte");
+    bodyType.setEyeColor("blue");
+    bodyType.setHairColor("black");
+    bodyType.setHeight(1.84F);
+    bodyType.setWeight(74F);
+    canonical.setBodyType(bodyType);
+
+    canonical.setBooks(Lists.newArrayList("The Cathedral & the Bazaar", "Catch 22"));
+    canonical.setCars(Lists.newArrayList("beetle", "prius"));
+    canonical.setChildren("3");
+    AddressImpl location = new AddressImpl();
+    location.setLatitude(48.858193F);
+    location.setLongitude(2.29419F);
+    canonical.setCurrentLocation(location);
+
+    canonical.setBirthday(buildDate("1975-01-01"));
+    canonical.setDrinker(new EnumImpl<Drinker>(Drinker.SOCIALLY));
+    ListField email = new ListFieldImpl("work", "dev@shindig.apache.org");
+    canonical.setEmails(Lists.newArrayList(email));
+
+    canonical.setEthnicity("developer");
+    canonical.setFashion("t-shirts");
+    canonical.setFood(Lists.newArrayList("sushi", "burgers"));
+    canonical.setGender(Person.Gender.male);
+    canonical.setHappiestWhen("coding");
+    canonical.setHasApp(true);
+    canonical.setHeroes(Lists.newArrayList("Doug Crockford", "Charles Babbage"));
+    canonical.setHumor("none to speak of");
+    canonical.setInterests(Lists.newArrayList("PHP", "Java"));
+    canonical.setJobInterests("will work for beer");
+
+    Organization job1 = new OrganizationImpl();
+    job1.setAddress(new AddressImpl("1 Shindig Drive"));
+    job1.setDescription("lots of coding");
+    job1.setEndDate(buildDate("2010-10-10"));
+    job1.setField("Software Engineering");
+    job1.setName("Apache.com");
+    job1.setSalary("$1000000000");
+    job1.setStartDate(buildDate("1995-01-01"));
+    job1.setSubField("Development");
+    job1.setTitle("Grand PooBah");
+    job1.setWebpage("http://shindig.apache.org/");
+    job1.setType("job");
+
+    Organization job2 = new OrganizationImpl();
+    job2.setAddress(new AddressImpl("1 Skid Row"));
+    job2.setDescription("");
+    job2.setEndDate(buildDate("1995-01-01"));
+    job2.setField("College");
+    job2.setName("School of hard Knocks");
+    job2.setSalary("$100");
+    job2.setStartDate(buildDate("1991-01-01"));
+    job2.setSubField("Lab Tech");
+    job2.setTitle("Gopher");
+    job2.setWebpage("");
+    job2.setType("job");
+
+    canonical.setOrganizations(Lists.newArrayList(job1, job2));
+
+    canonical.setUpdated(new Date());
+    canonical.setLanguagesSpoken(Lists.newArrayList("English", "Dutch", "Esperanto"));
+    canonical.setLivingArrangement("in a house");
+    List<Enum<LookingFor>> lookingFor = Lists.newArrayList();
+    Enum<LookingFor> lookingForOne = new EnumImpl<LookingFor>(LookingFor.RANDOM);
+    Enum<LookingFor> lookingForTwo = new EnumImpl<LookingFor>(LookingFor.NETWORKING);
+    lookingFor.add(lookingForOne);
+    lookingFor.add(lookingForTwo);
+    canonical.setLookingFor(lookingFor);
+    canonical.setMovies(Lists.newArrayList("Iron Man", "Nosferatu"));
+    canonical.setMusic(Lists.newArrayList("Chieftains", "Beck"));
+    canonical.setNetworkPresence(new EnumImpl<NetworkPresence>(NetworkPresence.ONLINE));
+    canonical.setNickname("diggy");
+    canonical.setPets("dog,cat");
+    canonical.setPhoneNumbers(Lists.<ListField> newArrayList(new ListFieldImpl("work",
+        "111-111-111"), new ListFieldImpl("mobile", "999-999-999")));
+
+    canonical.setPoliticalViews("open leaning");
+    canonical.setProfileSong(new UrlImpl("http://www.example.org/songs/OnlyTheLonely.mp3",
+        "Feelin' blue", "road"));
+    canonical.setProfileVideo(new UrlImpl("http://www.example.org/videos/Thriller.flv",
+        "Thriller", "video"));
+
+    canonical.setQuotes(Lists.newArrayList("I am therfore I code", "Doh!"));
+    canonical.setRelationshipStatus("married to my job");
+    canonical.setReligion("druidic");
+    canonical.setRomance("twice a year");
+    canonical.setScaredOf("COBOL");
+    canonical.setSexualOrientation("north");
+    canonical.setSmoker(new EnumImpl<Smoker>(Smoker.NO));
+    canonical.setSports(Lists.newArrayList("frisbee", "rugby"));
+    canonical.setStatus("happy");
+    canonical.setTags(Lists.newArrayList("C#", "JSON", "template"));
+    canonical.setThumbnailUrl("http://www.example.org/pic/?id=1");
+    canonical.setUtcOffset(-8L);
+    canonical.setTurnOffs(Lists.newArrayList("lack of unit tests", "cabbage"));
+    canonical.setTurnOns(Lists.newArrayList("well document code"));
+    canonical.setTvShows(Lists.newArrayList("House", "Battlestar Galactica"));
+
+    canonical.setUrls(Lists.<Url>newArrayList(
+        new UrlImpl("http://www.example.org/?id=1", "my profile", "Profile"),
+        new UrlImpl("http://www.example.org/pic/?id=1", "my awesome picture", "Thumbnail")));
+    
+    return canonical;
+  }
+  
+  /*
+   * Build userId set
+   */
+  public static Set<UserId> buildUserIds(String... userIds) {
+    // Set user id list
+    Set<UserId> userIdSet = Sets.newHashSet();
+    for (String userId: userIds) {
+      userIdSet.add(new UserId(Type.userId, userId));
+    }
+    return userIdSet;
+  }
+  
+  /*
+   * Asserts actual person instance has the expected person id and (formatted) name.
+   * 
+   */
+  public static void assertPersonEquals(Person actual, String expectedId, String expectedName) {
+    assertEquals(actual.getId(), expectedId);
+    assertNotNull(actual.getName());
+    assertEquals(actual.getName().getFormatted(), expectedName);
+  }
+
+  /*
+   * Asserts actual person instance equals expected person instance
+   * 
+   * Verified each individual variable so to know which variable is causing it to fail.
+   * Note that person.updated isn't verified as we can't expect this to be equal.
+   * 
+   */
+  public static void assertPersonEquals(Person actual, Person expected) {
+    
+    assertEquals(actual.getAboutMe(), expected.getAboutMe());
+    assertEquals(actual.getActivities(), expected.getActivities());    
+    assertCollectionSizeEquals(actual.getAddresses(), expected.getAddresses());
+    for (int i = 0; i < actual.getAddresses().size(); i++) {
+      assertAddressEquals(actual.getAddresses().get(i), expected.getAddresses().get(i));
+    }    
+    assertEquals(actual.getAge(), expected.getAge());    
+    assertBodyTypeEquals(actual.getBodyType(), expected.getBodyType());
+    assertEquals(actual.getBooks(), expected.getBooks());
+    assertEquals(actual.getCars(), expected.getCars());
+    assertEquals(actual.getChildren(), expected.getChildren());    
+    assertAddressEquals(actual.getCurrentLocation(), expected.getCurrentLocation());    
+    assertEquals(actual.getDisplayName(), expected.getDisplayName());
+    assertEquals(actual.getBirthday(), expected.getBirthday());    
+    assertCollectionSizeEquals(actual.getEmails(), expected.getEmails());
+    for (int i = 0; i < actual.getEmails().size(); i++) {
+      assertListFieldEquals(actual.getEmails().get(i), expected.getEmails().get(i));
+    }    
+    assertEquals(actual.getEthnicity(), expected.getEthnicity());
+    assertEquals(actual.getFashion(), expected.getFashion());
+    assertEquals(actual.getFood(), expected.getFood());
+    assertEquals(actual.getGender(), expected.getGender());
+    assertEquals(actual.getHappiestWhen(), expected.getHappiestWhen());
+    assertEquals(actual.getHasApp(), expected.getHasApp());
+    assertEquals(actual.getHeroes(), expected.getHeroes());
+    assertEquals(actual.getHumor(), expected.getHumor());
+    assertEquals(actual.getId(), expected.getId());
+    assertEquals(actual.getInterests(), expected.getInterests());
+    assertEquals(actual.getJobInterests(), expected.getJobInterests());    
+    assertCollectionSizeEquals(actual.getOrganizations(), expected.getOrganizations());
+    for (int i = 0; i < actual.getOrganizations().size(); i++) {
+      assertOrganizationEquals(actual.getOrganizations().get(i), expected.getOrganizations().get(i));
+    }    
+    assertEquals(actual.getLanguagesSpoken(), expected.getLanguagesSpoken());
+    assertEquals(actual.getLivingArrangement(), expected.getLivingArrangement());    
+    assertCollectionSizeEquals(actual.getLookingFor(), expected.getLookingFor());
+    for (int i = 0; i < actual.getLookingFor().size(); i++) {
+      assertEquals(actual.getLookingFor().get(i).getValue(), expected.getLookingFor().get(i).getValue());
+    }    
+    assertEquals(actual.getMovies(), expected.getMovies());
+    assertEquals(actual.getMusic(), expected.getMusic());    
+    assertNameEquals(actual.getName(), expected.getName());
+    assertEquals(actual.getNetworkPresence().getValue(), expected.getNetworkPresence().getValue());
+    assertEquals(actual.getNickname(), expected.getNickname());
+    assertEquals(actual.getPets(), expected.getPets());    
+    assertCollectionSizeEquals(actual.getPhoneNumbers(), expected.getPhoneNumbers());
+    for (int i = 0; i < actual.getPhoneNumbers().size(); i++) {
+      assertListFieldEquals(actual.getPhoneNumbers().get(i), expected.getPhoneNumbers().get(i));
+    }    
+    assertEquals(actual.getPoliticalViews(), expected.getPoliticalViews());    
+    assertUrlEquals(actual.getProfileSong(), expected.getProfileSong());    
+    assertEquals(actual.getProfileUrl(), expected.getProfileUrl());
+    assertUrlEquals(actual.getProfileVideo(), expected.getProfileVideo());
+    assertEquals(actual.getQuotes(), expected.getQuotes());
+    assertEquals(actual.getRelationshipStatus(), expected.getRelationshipStatus());
+    assertEquals(actual.getReligion(), expected.getReligion());
+    assertEquals(actual.getRomance(), expected.getRomance());
+    assertEquals(actual.getScaredOf(), expected.getScaredOf());
+    assertEquals(actual.getSexualOrientation(), expected.getSexualOrientation());
+    assertEquals(actual.getSmoker().getValue(), expected.getSmoker().getValue());
+    assertEquals(actual.getSports(), expected.getSports());
+    assertEquals(actual.getStatus(), expected.getStatus());
+    assertEquals(actual.getTags(), expected.getTags());
+    assertEquals(actual.getThumbnailUrl(), expected.getThumbnailUrl());
+    assertEquals(actual.getUtcOffset(), expected.getUtcOffset());
+    assertEquals(actual.getTurnOffs(), expected.getTurnOffs());
+    assertEquals(actual.getTurnOns(), expected.getTurnOns());
+    assertEquals(actual.getTvShows(), expected.getTvShows());    
+  }
+  
+  private static void assertUrlEquals(Url actual, Url expected) {
+    assertEquals(actual.getLinkText(), expected.getLinkText());
+    assertEquals(actual.getPrimary(), expected.getPrimary());
+    assertEquals(actual.getType(), expected.getType());
+    assertEquals(actual.getValue(), expected.getValue());    
+  }
+
+  private static void assertNameEquals(Name actual, Name expected) {
+    assertEquals(actual.getAdditionalName(), expected.getAdditionalName());
+    assertEquals(actual.getFamilyName(), expected.getFamilyName());
+    assertEquals(actual.getGivenName(), expected.getGivenName());
+    assertEquals(actual.getHonorificPrefix(), expected.getHonorificPrefix());
+    assertEquals(actual.getHonorificSuffix(), expected.getHonorificSuffix());
+    assertEquals(actual.getFormatted(), expected.getFormatted());    
+  }
+
+  private static void assertOrganizationEquals(Organization actual, Organization expected) {
+    assertAddressEquals(actual.getAddress(), expected.getAddress());
+    assertEquals(actual.getDescription(), expected.getDescription());
+    assertEquals(actual.getEndDate(), expected.getEndDate());
+    assertEquals(actual.getField(), expected.getField());
+    assertEquals(actual.getName(), expected.getName());
+    assertEquals(actual.getPrimary(), expected.getPrimary());
+    assertEquals(actual.getSalary(), expected.getSalary());
+    assertEquals(actual.getStartDate(), expected.getStartDate());
+    assertEquals(actual.getSubField(), expected.getSubField());
+    assertEquals(actual.getTitle(), expected.getTitle());
+    assertEquals(actual.getType(), expected.getType());
+    assertEquals(actual.getWebpage(), expected.getWebpage());    
+  }
+
+  private static void assertCollectionSizeEquals(Collection<?> actual, Collection<?> expected) {
+    assertTrue(actual != null && expected != null);
+    assertEquals(actual.size(), expected.size());
+  }
+  
+  private static void assertAddressEquals(Address actual, Address expected) {    
+    assertEquals(actual.getCountry(), expected.getCountry());
+    assertEquals(actual.getLatitude(), expected.getLatitude());
+    assertEquals(actual.getLocality(), expected.getLocality());
+    assertEquals(actual.getLongitude(), expected.getLongitude());
+    assertEquals(actual.getPostalCode(), expected.getPostalCode());
+    assertEquals(actual.getRegion(), expected.getRegion());
+    assertEquals(actual.getStreetAddress(), expected.getStreetAddress());
+    assertEquals(actual.getType(), expected.getType());
+    assertEquals(actual.getFormatted(), expected.getFormatted());    
+  }
+
+  private static void assertBodyTypeEquals(BodyType actual, BodyType expected) {
+    assertEquals(actual.getBuild(), expected.getBuild());
+    assertEquals(actual.getEyeColor(), expected.getEyeColor());
+    assertEquals(actual.getHairColor(), expected.getHairColor());
+    assertEquals(actual.getHeight(), expected.getHeight());
+    assertEquals(actual.getWeight(), expected.getWeight());
+  }
+  
+  private static void assertListFieldEquals(ListField actual, ListField expected) {
+    assertEquals(actual.getPrimary(), expected.getPrimary());
+    assertEquals(actual.getType(), expected.getType());
+    assertEquals(actual.getValue(), expected.getValue());
+  }
+  
+  public static void assertActivityEquals(Activity actual, Activity expected) {
+    assertEquals(actual.getId(), expected.getId());
+    assertEquals(actual.getUserId(), expected.getUserId());
+    assertEquals(actual.getTitle(), expected.getTitle());
+    assertEquals(actual.getBody(), expected.getBody());
+  }
+  
+  public static Activity buildTestActivity(String id, String userId, String title, String body) {
+    Activity activity = new ActivityImpl(id, userId); 
+    activity.setTitle(title);
+    activity.setBody(body);
+    return activity;
+  }
+  
+  public static Date buildDate(String dateAsString) {    
+    try {
+      return DATE_FORMATTER.parse(dateAsString);
+    } catch (Exception e) {
+      throw new RuntimeException("Failed to parse date - " + dateAsString, e);
+    }
+  }
+  
+  public static Set<String> asSet(String... items) {
+    return Sets.newHashSet(Arrays.asList(items));
+  }
+  
+}
diff --git a/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/integration/JpaRestfulJsonActivityTest.java b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/integration/JpaRestfulJsonActivityTest.java
new file mode 100644
index 0000000..277620b
--- /dev/null
+++ b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/integration/JpaRestfulJsonActivityTest.java
@@ -0,0 +1,62 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+
+package org.apache.shindig.graaasp.jpa.spi.integration;
+
+import org.apache.shindig.social.dataservice.integration.RestfulJsonActivityTest;
+import org.apache.shindig.graaasp.jpa.spi.SpiDatabaseBootstrap;
+import org.apache.shindig.graaasp.jpa.spi.integration.JpaRestfulTestConfigHelper;
+
+import com.google.inject.Injector;
+import org.junit.After;
+import org.junit.Before;
+
+/**
+ * JPA restful Json activity test, which wraps around shindig's <code>RestfulJsonActivityTest</code>
+ * but uses the JPA ActivityService implementation <code>ActivityServiceDb</code>.
+ */
+public class JpaRestfulJsonActivityTest extends RestfulJsonActivityTest {
+    
+  /** The bootstrap. */
+  private SpiDatabaseBootstrap bootstrap;
+  
+  /**
+   * Calls super.setup so to initialise servlet and easy mock objects.
+   * Note that super.setup (i.e. AbstractLargeRestfulTests) also injects SocialApiTestsGuiceModule,
+   * which will be overriden here to use the JPA guice bindings
+   * 
+   * @throws Exception the exception
+   */
+	@Before
+	public void setUp() throws Exception {
+
+		// Init config
+		Injector injector = JpaRestfulTestConfigHelper.init();
+		this.setServlet(JpaRestfulTestConfigHelper.getDataServiceServlet(injector));
+		
+		// Bootstrap hibernate and associated test db, and setup db with test data
+		this.bootstrap = injector.getInstance(SpiDatabaseBootstrap.class);
+    this.bootstrap.init();
+	}
+	
+	@After
+  public void tearDown() throws Exception {
+    this.bootstrap.tearDown();
+  }
+
+}
diff --git a/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/integration/JpaRestfulJsonDataTest.java b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/integration/JpaRestfulJsonDataTest.java
new file mode 100644
index 0000000..96d1499
--- /dev/null
+++ b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/integration/JpaRestfulJsonDataTest.java
@@ -0,0 +1,61 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+
+package org.apache.shindig.graaasp.jpa.spi.integration;
+
+import org.apache.shindig.social.dataservice.integration.RestfulJsonDataTest;
+import org.apache.shindig.graaasp.jpa.spi.SpiDatabaseBootstrap;
+import org.apache.shindig.graaasp.jpa.spi.integration.JpaRestfulTestConfigHelper;
+
+import com.google.inject.Injector;
+import org.junit.After;
+import org.junit.Before;
+
+/**
+ * JPA restful Json data test, which wraps around shindig's <code>RestfulJsonDataTest</code>
+ * but uses the JPA AppDataService implementation <code>AppDataServiceDb</code>
+ */
+public class JpaRestfulJsonDataTest extends RestfulJsonDataTest {
+  
+  /** The bootstrap. */
+  private SpiDatabaseBootstrap bootstrap;
+  
+  /**
+   * Calls super.setup so to initialise servlet and easy mock objects.
+   * Note that super.setup (i.e. AbstractLargeRestfulTests) also injects SocialApiTestsGuiceModule,
+   * which will be overriden here to use the JPA guice bindings
+   * 
+   * @throws Exception the exception
+   */
+  @Before
+  public void setUp() throws Exception {
+    // Init config
+    Injector injector = JpaRestfulTestConfigHelper.init();
+    this.setServlet(JpaRestfulTestConfigHelper.getDataServiceServlet(injector));
+    
+    // Bootstrap hibernate and associated test db, and setup db with test data
+    this.bootstrap = injector.getInstance(SpiDatabaseBootstrap.class);
+    this.bootstrap.init();
+  }
+  
+  @After
+  public void tearDown() throws Exception {
+    this.bootstrap.tearDown();
+  }
+
+}
diff --git a/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/integration/JpaRestfulJsonPeopleTest.java b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/integration/JpaRestfulJsonPeopleTest.java
new file mode 100644
index 0000000..ba9db41
--- /dev/null
+++ b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/integration/JpaRestfulJsonPeopleTest.java
@@ -0,0 +1,61 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+
+package org.apache.shindig.graaasp.jpa.spi.integration;
+
+import org.apache.shindig.social.dataservice.integration.RestfulJsonPeopleTest;
+import org.apache.shindig.graaasp.jpa.spi.SpiDatabaseBootstrap;
+import org.apache.shindig.graaasp.jpa.spi.integration.JpaRestfulTestConfigHelper;
+
+import com.google.inject.Injector;
+import org.junit.After;
+import org.junit.Before;
+
+/**
+ * JPA restful Json people test, which wraps around shindig's <code>RestfulJsonPeopleTest</code>
+ * but uses the JPA PersonService implementation <code>PersonServiceDb</code>
+ */
+public class JpaRestfulJsonPeopleTest extends RestfulJsonPeopleTest {
+  
+  /** The bootstrap. */
+  private SpiDatabaseBootstrap bootstrap;
+  
+  /**
+   * Calls super.setup so to initialise servlet and easy mock objects.
+   * Note that super.setup (i.e. AbstractLargeRestfulTests) also injects SocialApiTestsGuiceModule,
+   * which will be overriden here to use the JPA guice bindings
+   * 
+   * @throws Exception the exception
+   */
+  @Before
+  public void setUp() throws Exception {
+    // Init config
+    Injector injector = JpaRestfulTestConfigHelper.init();
+    this.setServlet(JpaRestfulTestConfigHelper.getDataServiceServlet(injector));
+    
+    // Bootstrap hibernate and associated test db, and setup db with test data
+    this.bootstrap = injector.getInstance(SpiDatabaseBootstrap.class);
+    this.bootstrap.init();
+  }
+  
+  @After
+  public void tearDown() throws Exception {
+    this.bootstrap.tearDown();
+  }	
+  
+}
diff --git a/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/integration/JpaRestfulTestConfigHelper.java b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/integration/JpaRestfulTestConfigHelper.java
new file mode 100644
index 0000000..4e631b4
--- /dev/null
+++ b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/integration/JpaRestfulTestConfigHelper.java
@@ -0,0 +1,87 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+
+package org.apache.shindig.graaasp.jpa.spi.integration;
+
+import org.apache.shindig.config.ContainerConfig;
+import org.apache.shindig.protocol.DataServiceServlet;
+import org.apache.shindig.protocol.HandlerRegistry;
+import org.apache.shindig.protocol.conversion.BeanJsonConverter;
+import org.apache.shindig.protocol.conversion.BeanXStreamConverter;
+import org.apache.shindig.social.core.util.BeanXStreamAtomConverter;
+import org.apache.shindig.social.core.util.xstream.XStream081Configuration;
+import org.apache.shindig.graaasp.jpa.spi.SpiEntityManagerFactory;
+import org.apache.shindig.graaasp.jpa.spi.integration.JpaTestGuiceModule;
+import org.apache.shindig.social.opensocial.service.ActivityHandler;
+import org.apache.shindig.social.opensocial.service.AppDataHandler;
+import org.apache.shindig.social.opensocial.service.MessageHandler;
+import org.apache.shindig.social.opensocial.service.PersonHandler;
+
+import org.easymock.EasyMock;
+
+import com.google.common.collect.ImmutableSet;
+import com.google.inject.Guice;
+import com.google.inject.Injector;
+
+import java.util.Collections;
+import javax.persistence.EntityManager;
+
+/**
+ * JPARestfulTestConfigHelper helps configure a JPA Restful test.
+ */
+public class JpaRestfulTestConfigHelper {
+
+  /**
+   * Init configuration.
+   * 
+   * @return the injector
+   */
+  protected static Injector init() {
+    EntityManager entityManager = SpiEntityManagerFactory.getEntityManager();
+    Injector injector = Guice.createInjector(new JpaTestGuiceModule(entityManager));
+    return injector;
+  }
+  
+  /**
+   * Gets the data service servlet.
+   * 
+   * @param injector the injector
+   * 
+   * @return the data service servlet
+   */
+  public static DataServiceServlet getDataServiceServlet(Injector injector) {
+    // Set data service servlet again to use JPA guice dependencies
+    DataServiceServlet servlet = new DataServiceServlet();
+    HandlerRegistry registry = injector.getInstance(HandlerRegistry.class);
+    registry.addHandlers(
+        ImmutableSet.<Object>of(ActivityHandler.class, AppDataHandler.class,
+            PersonHandler.class, MessageHandler.class));
+
+    servlet.setHandlerRegistry(registry);
+    servlet.setBeanConverters(new BeanJsonConverter(injector),
+        new BeanXStreamConverter(new XStream081Configuration(injector)),
+        new BeanXStreamAtomConverter(new XStream081Configuration(injector)));
+
+    ContainerConfig containerConfig = EasyMock.createMock(ContainerConfig.class);
+    EasyMock.expect(containerConfig.<String>getList(null, "gadgets.parentOrigins")).andReturn(Collections.<String>singletonList("*")).anyTimes();
+    EasyMock.replay(containerConfig);
+    servlet.setContainerConfig(containerConfig);
+    return servlet;
+  }
+  
+}
diff --git a/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/integration/JpaRestfulXmlActivityTest.java b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/integration/JpaRestfulXmlActivityTest.java
new file mode 100644
index 0000000..a07f7d5
--- /dev/null
+++ b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/integration/JpaRestfulXmlActivityTest.java
@@ -0,0 +1,61 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+
+package org.apache.shindig.graaasp.jpa.spi.integration;
+
+import org.apache.shindig.social.dataservice.integration.RestfulXmlActivityTest;
+import org.apache.shindig.graaasp.jpa.spi.SpiDatabaseBootstrap;
+import org.apache.shindig.graaasp.jpa.spi.integration.JpaRestfulTestConfigHelper;
+
+import com.google.inject.Injector;
+import org.junit.After;
+import org.junit.Before;
+
+/**
+ * JPA restful Json activity test, which wraps around shindig's <code>RestfulXmlActivityTest</code>
+ * but uses the JPA ActivityService implementation <code>ActivityServiceDb</code>
+ */
+public class JpaRestfulXmlActivityTest extends RestfulXmlActivityTest {
+  
+  /** The bootstrap. */
+  private SpiDatabaseBootstrap bootstrap;
+  
+  /**
+   * Calls super.setup so to initialise servlet and easy mock objects.
+   * Note that super.setup (i.e. AbstractLargeRestfulTests) also injects SocialApiTestsGuiceModule,
+   * which will be overriden here to use the JPA guice bindings
+   * 
+   * @throws Exception the exception
+   */
+  @Before
+  public void setUp() throws Exception {
+    // Init config
+    Injector injector = JpaRestfulTestConfigHelper.init();
+    this.setServlet(JpaRestfulTestConfigHelper.getDataServiceServlet(injector));
+    
+    // Bootstrap hibernate and associated test db, and setup db with test data
+    this.bootstrap = injector.getInstance(SpiDatabaseBootstrap.class);
+    this.bootstrap.init();
+  }
+  
+  @After
+  public void tearDown() throws Exception {
+    this.bootstrap.tearDown();
+  }
+    
+}
diff --git a/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/integration/JpaRestfulXmlDataTest.java b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/integration/JpaRestfulXmlDataTest.java
new file mode 100644
index 0000000..59716d8
--- /dev/null
+++ b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/integration/JpaRestfulXmlDataTest.java
@@ -0,0 +1,61 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+
+package org.apache.shindig.graaasp.jpa.spi.integration;
+
+import org.apache.shindig.social.dataservice.integration.RestfulXmlDataTest;
+import org.apache.shindig.graaasp.jpa.spi.SpiDatabaseBootstrap;
+import org.apache.shindig.graaasp.jpa.spi.integration.JpaRestfulTestConfigHelper;
+
+import com.google.inject.Injector;
+import org.junit.After;
+import org.junit.Before;
+
+/**
+ * JPA restful Json data test, which wraps around shindig's <code>RestfulXmlDataTest</code>
+ * but uses the JPA AppDataService implementation <code>AppDataServiceDb</code>
+ */
+public class JpaRestfulXmlDataTest extends RestfulXmlDataTest {
+  
+  /** The bootstrap. */
+  private SpiDatabaseBootstrap bootstrap;
+  
+  /**
+   * Calls super.setup so to initialise servlet and easy mock objects.
+   * Note that super.setup (i.e. AbstractLargeRestfulTests) also injects SocialApiTestsGuiceModule,
+   * which will be overriden here to use the JPA guice bindings
+   * 
+   * @throws Exception the exception
+   */
+  @Before
+  public void setUp() throws Exception {
+    // Init config
+    Injector injector = JpaRestfulTestConfigHelper.init();
+    this.setServlet(JpaRestfulTestConfigHelper.getDataServiceServlet(injector));
+    
+    // Bootstrap hibernate and associated test db, and setup db with test data
+    this.bootstrap = injector.getInstance(SpiDatabaseBootstrap.class);
+    this.bootstrap.init();
+  }
+  
+  @After
+  public void tearDown() throws Exception {
+    this.bootstrap.tearDown();
+  }
+  
+}
diff --git a/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/integration/JpaRestfulXmlPeopleTest.java b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/integration/JpaRestfulXmlPeopleTest.java
new file mode 100644
index 0000000..9f51b2c
--- /dev/null
+++ b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/integration/JpaRestfulXmlPeopleTest.java
@@ -0,0 +1,62 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+
+package org.apache.shindig.graaasp.jpa.spi.integration;
+
+import org.apache.shindig.social.dataservice.integration.RestfulXmlPeopleTest;
+import org.apache.shindig.graaasp.jpa.spi.SpiDatabaseBootstrap;
+import org.apache.shindig.graaasp.jpa.spi.integration.JpaRestfulTestConfigHelper;
+
+import com.google.inject.Injector;
+import org.junit.After;
+import org.junit.Before;
+
+/**
+ * JPA restful Json people test, which wraps around shindig's <code>RestfulXmlPeopleTest</code>
+ * but uses the JPA PersonService implementation <code>PersonServiceDb</code>
+ */
+public class JpaRestfulXmlPeopleTest extends RestfulXmlPeopleTest {
+  
+  /** The bootstrap. */
+  private SpiDatabaseBootstrap bootstrap;
+  
+  /**
+   * Calls super.setup so to initialise servlet and easy mock objects.
+   * Note that super.setup (i.e. AbstractLargeRestfulTests) also injects SocialApiTestsGuiceModule,
+   * which will be overriden here to use the JPA guice bindings
+   * 
+   * @throws Exception the exception
+   */
+  @Before
+  public void setUp() throws Exception {
+
+    // Init config
+    Injector injector = JpaRestfulTestConfigHelper.init();
+    this.setServlet(JpaRestfulTestConfigHelper.getDataServiceServlet(injector));
+    
+    // Bootstrap hibernate and associated test db, and setup db with test data
+    this.bootstrap = injector.getInstance(SpiDatabaseBootstrap.class);
+    this.bootstrap.init();
+  }
+  
+  @After
+  public void tearDown() throws Exception {
+    this.bootstrap.tearDown();
+  }
+
+}
diff --git a/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/integration/JpaTestGuiceModule.java b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/integration/JpaTestGuiceModule.java
new file mode 100644
index 0000000..ab0909f
--- /dev/null
+++ b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/spi/integration/JpaTestGuiceModule.java
@@ -0,0 +1,134 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+
+package org.apache.shindig.graaasp.jpa.spi.integration;
+
+import javax.persistence.EntityManager;
+
+import org.apache.shindig.auth.SecurityToken;
+import org.apache.shindig.common.PropertiesModule;
+import org.apache.shindig.gadgets.DefaultGuiceModule;
+import org.apache.shindig.gadgets.oauth.OAuthModule;
+import org.apache.shindig.social.core.config.SocialApiGuiceModule;
+import org.apache.shindig.social.core.model.AccountDb;
+import org.apache.shindig.social.core.model.ActivityDb;
+import org.apache.shindig.social.core.model.AddressDb;
+import org.apache.shindig.social.core.model.BodyTypeDb;
+import org.apache.shindig.social.core.model.ListFieldDb;
+import org.apache.shindig.social.core.model.MediaItemDb;
+import org.apache.shindig.social.core.model.MessageDb;
+import org.apache.shindig.social.core.model.NameDb;
+import org.apache.shindig.social.core.model.OrganizationDb;
+import org.apache.shindig.social.core.model.UrlDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.graaasp.jpa.spi.JPASocialModule;
+import org.apache.shindig.graaasp.opensocial.model.Account;
+import org.apache.shindig.graaasp.opensocial.model.Activity;
+import org.apache.shindig.graaasp.opensocial.model.Address;
+import org.apache.shindig.graaasp.opensocial.model.BodyType;
+import org.apache.shindig.graaasp.opensocial.model.ListField;
+import org.apache.shindig.graaasp.opensocial.model.MediaItem;
+import org.apache.shindig.graaasp.opensocial.model.Message;
+import org.apache.shindig.graaasp.opensocial.model.Name;
+import org.apache.shindig.graaasp.opensocial.model.Organization;
+import org.apache.shindig.graaasp.opensocial.model.Person;
+import org.apache.shindig.graaasp.opensocial.model.Url;
+import org.apache.shindig.social.opensocial.oauth.OAuthDataStore;
+import org.apache.shindig.social.opensocial.oauth.OAuthEntry;
+
+import com.google.inject.AbstractModule;
+
+import net.oauth.OAuthConsumer;
+
+/**
+ * Provides component injection for tests
+ * Injects Social API and JPA persistence guice modules
+ *
+ */
+public class JpaTestGuiceModule extends AbstractModule {
+
+
+  private EntityManager entityManager;
+
+  JpaTestGuiceModule(EntityManager entityManager) {
+    this.entityManager = entityManager;
+  }
+
+  /**
+   * Bind entity manager, services and entities used by samples
+   */
+  @Override
+  protected void configure() {
+    install(new PropertiesModule());
+    install(new DefaultGuiceModule());
+    install(new SocialApiGuiceModule());
+    install(new OAuthModule());
+    install(new JPASocialModule(entityManager));
+
+    this.bind(OAuthDataStore.class).toInstance(new NullOAuthDataStore());
+
+    // Entities
+    this.bind(Activity.class).to(ActivityDb.class);
+    this.bind(Account.class).to(AccountDb.class);
+    this.bind(Address.class).to(AddressDb.class);
+    this.bind(BodyType.class).to(BodyTypeDb.class);
+    this.bind(ListField.class).to(ListFieldDb.class);
+    this.bind(MediaItem.class).to(MediaItemDb.class);
+    this.bind(Message.class).to(MessageDb.class);
+    this.bind(Name.class).to(NameDb.class);
+    this.bind(Organization.class).to(OrganizationDb.class);
+    this.bind(Person.class).to(UserDb.class);
+    this.bind(Url.class).to(UrlDb.class);
+  }
+
+  private static class NullOAuthDataStore implements OAuthDataStore {
+    public OAuthEntry getEntry(String oauthToken) {
+      return null;
+    }
+
+    public OAuthConsumer getConsumer(String consumerKey) {
+      return null;
+    }
+
+
+    public OAuthEntry convertToAccessToken(OAuthEntry entry) {
+      throw new UnsupportedOperationException();
+    }
+
+    public void authorizeToken(OAuthEntry entry, String userId) {
+      throw new UnsupportedOperationException();
+    }
+
+    public SecurityToken getSecurityTokenForConsumerRequest(String consumerKey, String userId) {
+      throw new UnsupportedOperationException();
+    }
+
+    public void disableToken(OAuthEntry entry) {
+      throw new UnsupportedOperationException();
+    }
+
+    public void removeToken(OAuthEntry entry) {
+      throw new UnsupportedOperationException();
+    }
+
+    public OAuthEntry generateRequestToken(String consumerKey, String oauthVersion,
+        String signedCallbackUrl) {
+      return null;
+    }
+  }
+}
diff --git a/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/test/JPASocialModuleTest.java b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/test/JPASocialModuleTest.java
new file mode 100644
index 0000000..078afbe
--- /dev/null
+++ b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/test/JPASocialModuleTest.java
@@ -0,0 +1,47 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.graaasp.jpa.test;
+
+import com.google.inject.Guice;
+import com.google.inject.Injector;
+
+import org.apache.shindig.graaasp.jpa.spi.JPASocialModule;
+import org.apache.shindig.social.opensocial.spi.ActivityService;
+import org.apache.shindig.social.opensocial.spi.AppDataService;
+import org.apache.shindig.social.opensocial.spi.PersonService;
+
+import org.junit.Test;
+
+/**
+ * 
+ */
+public class JPASocialModuleTest {
+
+  @Test
+  public void bootstrap() {
+    Injector injector = Guice.createInjector(new JPASocialModule());
+    @SuppressWarnings("unused")
+    PersonService personService = injector.getInstance(PersonService.class);
+    @SuppressWarnings("unused")
+    ActivityService activityService = injector
+        .getInstance(ActivityService.class);
+    @SuppressWarnings("unused")
+    AppDataService appDataService = injector.getInstance(AppDataService.class);
+  }
+
+}
diff --git a/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/test/PersonDbToJsonTest.java b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/test/PersonDbToJsonTest.java
new file mode 100644
index 0000000..ceeb20a
--- /dev/null
+++ b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/test/PersonDbToJsonTest.java
@@ -0,0 +1,56 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.graaasp.jpa.test;
+
+import com.google.inject.Guice;
+import com.google.inject.Injector;
+
+import org.apache.shindig.protocol.conversion.BeanJsonConverter;
+import org.apache.shindig.graaasp.jpa.hibernate.Bootstrap;
+import org.apache.shindig.graaasp.jpa.spi.JPASocialModule;
+import org.apache.shindig.graaasp.jpa.test.PersonPopulate;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Random;
+
+import javax.persistence.EntityManager;
+
+public class PersonDbToJsonTest {
+
+  private BeanJsonConverter jsonConverter;
+  private EntityManager entityManager;
+
+  @Before
+  public void setup() {
+    Injector injector = Guice.createInjector(new JPASocialModule());
+    this.jsonConverter = injector.getInstance(BeanJsonConverter.class);
+
+    Bootstrap b = new Bootstrap();
+    this.entityManager = b.getEntityManager("hibernate");
+  }
+
+  @Test
+  public void convertPersonToJson() {
+    Person person = new PersonPopulate(entityManager).createPerson(1, System
+        .currentTimeMillis(), new Random());
+    jsonConverter.convertToString(person);
+  }
+}
diff --git a/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/test/PersonPopulate.java b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/test/PersonPopulate.java
new file mode 100644
index 0000000..3fe09b5
--- /dev/null
+++ b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/test/PersonPopulate.java
@@ -0,0 +1,407 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+
+package org.apache.shindig.graaasp.jpa.test;
+
+import com.google.common.collect.Lists;
+
+import org.apache.shindig.protocol.model.Enum;
+import org.apache.shindig.protocol.model.EnumImpl;
+import org.apache.shindig.social.core.model.AddressDb;
+import org.apache.shindig.social.core.model.BodyTypeDb;
+import org.apache.shindig.social.core.model.EmailDb;
+import org.apache.shindig.social.core.model.NameDb;
+import org.apache.shindig.social.core.model.OrganizationAddressDb;
+import org.apache.shindig.social.core.model.OrganizationDb;
+import org.apache.shindig.social.core.model.PersonAddressDb;
+import org.apache.shindig.social.core.model.PersonOrganizationDb;
+import org.apache.shindig.social.core.model.PhoneDb;
+import org.apache.shindig.social.core.model.PhotoDb;
+import org.apache.shindig.social.core.model.UrlDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Address;
+import org.apache.shindig.social.opensocial.model.BodyType;
+import org.apache.shindig.social.opensocial.model.Drinker;
+import org.apache.shindig.social.opensocial.model.ListField;
+import org.apache.shindig.social.opensocial.model.LookingFor;
+import org.apache.shindig.social.opensocial.model.Name;
+import org.apache.shindig.social.opensocial.model.Organization;
+import org.apache.shindig.social.opensocial.model.Person;
+import org.apache.shindig.social.opensocial.model.Smoker;
+import org.apache.shindig.social.opensocial.model.Url;
+import org.apache.shindig.social.opensocial.model.Person.Gender;
+
+import java.util.Calendar;
+import java.util.Date;
+import java.util.GregorianCalendar;
+import java.util.List;
+import java.util.Random;
+import java.util.logging.Logger;
+
+import javax.persistence.EntityManager;
+import javax.persistence.Query;
+
+public class PersonPopulate {
+
+  private EntityManager entityManager;
+
+  /**
+   *
+   */
+  public PersonPopulate(EntityManager entityManager) {
+    this.entityManager = entityManager;
+    // TODO Auto-generated constructor stub
+  }
+
+  private static final Logger LOG = Logger.getLogger("shindig-db-test");
+
+  public Person createPerson(int i, long key, Random random) {
+
+    Person person = new UserDb();
+    person.setAboutMe("About Me " + i);
+    String personId = getPersonId(i, key);
+
+    person.setId(personId);
+    person.setActivities(getList("Activities"));
+    int age = random.nextInt(105);
+    Calendar c = new GregorianCalendar();
+    c.setTimeInMillis(System.currentTimeMillis());
+    c.add(Calendar.YEAR, -age);
+    c.add(Calendar.MONTH, 12 - i % 12);
+    List<Address> a = Lists.newArrayList();
+    a.add(getNewPersonAddress(i));
+    a.add(getNewPersonAddress(i + 2));
+    person.setAddresses(a);
+    person.setAge(random.nextInt(105));
+    person.setBodyType(getNewBodyType(i));
+    person.setBooks(getList("Books"));
+    person.setCars(getList("Cars"));
+    person.setChildren("Yes");
+    person.setCurrentLocation(getNewAddress(i + 5));
+    person.setBirthday(c.getTime());
+    person.setDrinker(new EnumImpl<Drinker>(Drinker.OCCASIONALLY));
+    List<ListField> emails = Lists.newArrayList();
+    emails.add(getNewEmail(i));
+    emails.add(getNewEmail(i + 1));
+    person.setEmails(emails);
+    person.setEthnicity("ethinicity");
+    person.setFashion("fashion");
+    person.setFood(getList("Food"));
+    person.setGender(Gender.female);
+    person.setHappiestWhen("sailing");
+    person.setHeroes(getList("Heroes"));
+    person.setHumor("hahaha");
+    person.setInterests(getList("Interests"));
+    person.setIsOwner(true);
+    person.setIsViewer(true);
+    person.setJobInterests("job interest");
+    List<Organization> organizations = Lists.newArrayList();
+    organizations.add(getPersonOrganization(i, "job"));
+    organizations.add(getPersonOrganization(i + 1, "job"));
+    organizations.add(getPersonOrganization(i + 2, "job"));
+    person.setOrganizations(organizations);
+    person.setLanguagesSpoken(getList("LanguagesSpoken"));
+    person.setLivingArrangement("living Arrangement");
+    List<Enum<LookingFor>> lookingFor = Lists.newArrayList();
+    Enum<LookingFor> lookingForOne = new EnumImpl<LookingFor>(LookingFor.RANDOM);
+    Enum<LookingFor> lookingForTwo = new EnumImpl<LookingFor>(LookingFor.NETWORKING);
+    lookingFor.add(lookingForOne);
+    lookingFor.add(lookingForTwo);
+    person.setLookingFor(lookingFor);
+    person.setMovies(getList("Movies"));
+    person.setMusic(getList("music"));
+    person.setName(getNewName(i));
+    person.setNickname("NickName");
+    person.setPets("Pets");
+    List<ListField> phoneNumbers = Lists.newArrayList();
+    phoneNumbers.add(getNewPhone(i));
+    phoneNumbers.add(getNewPhone(i * 3));
+
+    person.setPhoneNumbers(phoneNumbers);
+    person.setPoliticalViews("politicalViews");
+    person.setProfileSong(getNewUrl(i));
+    person.setProfileUrl("Profile URL");
+    person.setProfileVideo(getNewUrl(i * 2));
+    person.setQuotes(getList("Quites"));
+    person.setRelationshipStatus("relationship");
+    person.setReligion("religion");
+    person.setRomance("romance");
+    person.setScaredOf("scaredOf");
+    List<Organization> organizations2 = person.getOrganizations();
+    organizations2.add(getPersonOrganization(i + 5, "school"));
+    organizations2.add(getPersonOrganization(i + 6, "school"));
+    organizations2.add(getPersonOrganization(i + 7, "school"));
+    person.setOrganizations(organizations2);
+    person.setSexualOrientation("sexualOrientation");
+    person.setSmoker(new EnumImpl<Smoker>(Smoker.QUITTING));
+    person.setSports(getList("Sports"));
+    person.setStatus("Status");
+    person.setTags(getList("tags"));
+
+    List<ListField> photos = Lists.newArrayList();
+    photos.add(getNewPhoto(i));
+    photos.add(getNewPhoto(i * 3));
+
+    person.setPhotos(photos);
+    person.setUtcOffset(1L);
+    person.setTurnOffs(getList("TurnOff"));
+    person.setTurnOns(getList("TurnOns"));
+    person.setTvShows(getList("TvShows"));
+    person.setUpdated(new Date());
+    List<Url> urls = Lists.newArrayList();
+    urls.add(getNewUrl(i * 4));
+    urls.add(getNewUrl(i * 5));
+    urls.add(getNewUrl(i * 6));
+    person.setUrls(urls);
+
+    // TODO: setActivity
+    // TODO: person.setAccounts(accounts);
+    // TODO: person.setActivities(activities);
+    // TODO: person.setAddresses(addresses);
+
+    LOG.info("Created user ++++++ " + personId);
+
+    return person;
+  }
+
+  public String getPersonId(int i, long key) {
+    return "Person" + key + ':' + i;
+  }
+
+  private Url getNewUrl(int i) {
+    String targetUrl = "http://sdfsdfsd.sdfdsf/" + String.valueOf(i % 33);
+    List<?> l = find(UrlDb.FINDBY_URL,
+        new String[] { UrlDb.PARAM_URL }, new Object[] { targetUrl });
+    if (l.isEmpty()) {
+      Url url = new UrlDb();
+      url.setValue(targetUrl);
+      url.setLinkText("LinkText");
+      url.setType("URL");
+      return url;
+    } else {
+      return (Url) l.get(0);
+    }
+  }
+
+  private PhoneDb getNewPhone(int i) {
+    String targetPhone = String.valueOf(i % 33);
+    PhoneDb phone = findOne(PhoneDb.FINDBY_PHONE_NUMBER,
+        new String[] { PhoneDb.PARAM_PHONE_NUMBER }, new Object[] { targetPhone });
+    if (phone == null) {
+      phone = new PhoneDb();
+      phone.setValue(targetPhone);
+      phone.setType("Mobile");
+    }
+    return phone;
+  }
+
+  private PhotoDb getNewPhoto(int i) {
+    String targetPhoto = String.valueOf(i % 33);
+    PhotoDb photo = findOne(PhotoDb.FINDBY_PHOTO,
+        new String[] { PhotoDb.PARAM_PHOTO }, new Object[] { targetPhoto });
+    if (photo == null) {
+      photo = new PhotoDb();
+      photo.setValue(targetPhoto);
+      photo.setType("Mobile");
+    }
+    return photo;
+  }
+
+  private Name getNewName(int i) {
+    String targetName = String.valueOf("FamilyName" + (i % 25));
+    Name name = findOne(NameDb.FINDBY_FAMILY_NAME, new String[] { NameDb.PARAM_FAMILY_NAME },
+        new Object[] { targetName });
+    if (name == null) {
+      name = new NameDb();
+      name.setFamilyName(targetName);
+      name.setGivenName("GivenName");
+      name.setHonorificPrefix("Hprefix");
+      name.setHonorificSuffix("HSufix");
+      name.setFormatted("formatted");
+      name.setAdditionalName("Additional Names");
+    }
+    return name;
+  }
+
+  private List<String> getList(String base) {
+    List<String> list = Lists.newArrayList();
+    for (int i = 0; i < 10; i++) {
+      list.add(base + i);
+    }
+    return list;
+  }
+
+  @SuppressWarnings("unused")
+  private Organization getDbOrganization(int i, String type) {
+
+    String targetOrg = "Organization_" + (i % 10);
+    Organization organization = findOne(OrganizationDb.FINDBY_NAME,
+        new String[] { OrganizationDb.PARAM_NAME }, new Object[] { targetOrg });
+
+    if (organization == null) {
+      organization = new OrganizationDb();
+      organization.setAddress(getNewOrganizationAddress(i * 3));
+      organization.setName(targetOrg);
+      organization.setSubField("SubField");
+      organization.setTitle("Title");
+      organization.setWebpage("http://sdfsd.sdfsdf.sdfsdf");
+    }
+    return organization;
+  }
+
+  private Organization getPersonOrganization(int i, String type) {
+    String targetOrg = "Organization_" + (i % 10);
+    PersonOrganizationDb organization = findOne(PersonOrganizationDb.PERSON_ORG_FINDBY_NAME,
+        new String[] { PersonOrganizationDb.PARAM_NAME }, new Object[] { targetOrg });
+    if (organization == null) {
+      organization = new PersonOrganizationDb();
+      organization.setDescription("Description");
+      organization.setEndDate(new Date(System.currentTimeMillis()
+          + (24L * 3600L * 1000L * 365L * 2L)));
+      organization.setAddress(getNewOrganizationAddress(i * 3));
+      organization.setName(targetOrg);
+      organization.setSalary(String.valueOf(i * 1000));
+      organization.setStartDate(new Date(System.currentTimeMillis()
+          - (24L * 3600L * 1000L * 365L * 2L)));
+      organization.setField("Field");
+      organization.setSubField("SubField");
+      organization.setTitle("Title");
+      organization.setType(type);
+      organization.setWebpage("http://sdfsd.sdfsdf.sdfsdf");
+    }
+    return organization;
+
+  }
+
+  @SuppressWarnings("unchecked")
+  private <T> T find(String query, String[] names, Object[] params) {
+    Query q = entityManager.createNamedQuery(query);
+    for (int i = 0; i < names.length; i++) {
+      q.setParameter(names[i], params[i]);
+    }
+    return (T) q.getResultList();
+  }
+
+  private <T> T findOne(String query, String[] names, Object[] params) {
+    List<T> l = find(query, names, params);
+    if (!l.isEmpty()) {
+      return l.get(0);
+    }
+    return null;
+  }
+
+  private ListField getNewEmail(int i) {
+    String targetAddress = "xyz" + i + "@testdataset.com";
+    ListField email = findOne(EmailDb.FINDBY_EMAIL, new String[] { EmailDb.PARAM_EMAIL },
+        new Object[] { targetAddress });
+    if (email == null) {
+      email = new EmailDb();
+      email.setValue(targetAddress);
+      email.setType("emailType");
+    }
+    return email;
+  }
+
+  private BodyType getNewBodyType(int i) {
+    BodyType bodyType = findOne(BodyTypeDb.FINDBY_HEIGHT, new String[] { BodyTypeDb.PARAM_HEIGHT },
+        new Object[] { new Float(i % 10) });
+    if (bodyType == null) {
+      bodyType = new BodyTypeDb();
+      bodyType.setBuild("Build " + i);
+      bodyType.setEyeColor("Build " + i);
+      bodyType.setHairColor("Build " + i);
+      bodyType.setHeight(new Float(i % 10));
+      bodyType.setWeight(new Float(i % 15));
+    }
+    return bodyType;
+  }
+
+  private Address getNewAddress(int i) {
+    Address address = findOne(AddressDb.FINDBY_POSTCODE, new String[] { AddressDb.PARAM_POSTCODE },
+        new Object[] { String.valueOf(i % 10) });
+    if (address == null) {
+      address = new AddressDb();
+      address.setCountry("UK");
+      address.setLatitude(new Float(0.5));
+      address.setLongitude(new Float(0.0));
+      address.setPostalCode(String.valueOf(i % 10));
+      address.setRegion("CAMBS");
+      address.setStreetAddress("High Street");
+      address.setType("sometype:");
+      address.setFormatted("formatted address");
+      address.setLocality("locality");
+      address.setPrimary(false);
+      address.setType("home");
+    }
+    return address;
+  }
+
+  private Address getNewOrganizationAddress(int i) {
+    Address address = findOne(AddressDb.FINDBY_POSTCODE, new String[] { AddressDb.PARAM_POSTCODE },
+        new Object[] { String.valueOf(i % 10) });
+    if (address == null) {
+      address = new OrganizationAddressDb();
+      address.setCountry("UK");
+      address.setLatitude(new Float(0.5));
+      address.setLongitude(new Float(0.0));
+      address.setPostalCode(String.valueOf(i % 10));
+      address.setRegion("CAMBS");
+      address.setStreetAddress("High Street");
+      address.setType("sometype:");
+      address.setFormatted("formatted address");
+      address.setLocality("locality");
+      address.setPrimary(false);
+      address.setType("home");
+    }
+    return address;
+  }
+
+  private Address getNewPersonAddress(int i) {
+    Address address = findOne(AddressDb.FINDBY_POSTCODE, new String[] { AddressDb.PARAM_POSTCODE },
+        new Object[] { String.valueOf(i % 10) });
+    if (address == null) {
+      address = new PersonAddressDb();
+      address.setCountry("UK");
+      address.setLatitude(new Float(0.5));
+      address.setLongitude(new Float(0.0));
+      address.setPostalCode(String.valueOf(i % 10));
+      address.setRegion("CAMBS");
+      address.setStreetAddress("High Street");
+      address.setType("sometype:");
+      address.setFormatted("formatted address");
+      address.setLocality("locality");
+      address.setPrimary(false);
+      address.setType("home");
+    }
+    return address;
+  }
+
+  public void destroyPerson(int i, long key) {
+    List<Person> people = find(org.apache.shindig.social.core.model.FINDBY_LIKE_PERSONID,
+        new String[] { org.apache.shindig.social.core.model.PARAM_PERSONID }, new Object[] { getPersonId(i, key) });
+    for (Person o : people) {
+      entityManager.remove(o);
+    }
+  }
+
+  protected Person getPerson(String id) {
+    return find(org.apache.shindig.social.core.model.FINDBY_PERSONID, new String[] { org.apache.shindig.social.core.model.PARAM_PERSONID },
+        new Object[] { id });
+  }
+
+}
diff --git a/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/test/SchemaHibernateTest.java b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/test/SchemaHibernateTest.java
new file mode 100644
index 0000000..8b98e9c
--- /dev/null
+++ b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/test/SchemaHibernateTest.java
@@ -0,0 +1,98 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.graaasp.jpa.test;
+
+import org.apache.shindig.graaasp.jpa.hibernate.Bootstrap;
+import org.apache.shindig.graaasp.jpa.test.PersonPopulate;
+import org.apache.shindig.social.core.model.EmailDb;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import javax.persistence.EntityManager;
+import javax.persistence.EntityTransaction;
+
+import java.util.Random;
+
+/**
+ * 
+ */
+public class SchemaHibernateTest {
+
+  private static EntityManager entityManager;
+
+  @BeforeClass
+  public static void config() {
+    Bootstrap b = new Bootstrap("com.mysql.jdbc.Driver", "jdbc:mysql:localhost/opensocial", "opensocial", "opensocial", "1", "1");
+    // Bootstrap b = new
+    // Bootstrap("com.mysql.jdbc.Driver",
+    // "jdbc:mysql://localhost/sakaikernel?useUnicode=true&amp;characterEncoding=UTF-8",
+    // "sakaikernel","sakaikernel","1","1");
+    entityManager = b.getEntityManager("hibernate");
+  }
+
+  @AfterClass
+  public static void stop() {
+  }
+
+  @Test
+  public void checkSimpleInsert() throws Exception {
+    EntityTransaction transaction = entityManager.getTransaction();
+    transaction.begin();
+    EmailDb email = new EmailDb();
+    email.setType("email");
+    email.setValue("ieb@tfd.co.uk");
+    entityManager.persist(email);
+    transaction.commit();
+  }
+
+  @Test
+  public void checkPersonCreate() throws Exception {
+    EntityTransaction transaction = entityManager.getTransaction();
+    transaction.begin();
+    PersonPopulate pp = new PersonPopulate(entityManager);
+    int i = 1;
+    long key = System.currentTimeMillis();
+    Random r = new Random();
+    Person p = pp.createPerson(i, key, r);
+    entityManager.persist(p);
+    transaction.commit();
+  }
+
+  @Test
+  public void fillDatbase() throws Exception {
+    EntityTransaction transaction = entityManager.getTransaction();
+    transaction.begin();
+    PersonPopulate pp = new PersonPopulate(entityManager);
+    long key = System.currentTimeMillis();
+    Random r = new Random();
+    for (int i = 0; i < 20; i++) {
+      Person p = pp.createPerson(i, key, r);
+      entityManager.persist(p);
+      if (i % 10 == 0) {
+        transaction.commit();
+        transaction = entityManager.getTransaction();
+        transaction.begin();
+      }
+    }
+    transaction.commit();
+  }
+
+}
diff --git a/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/test/SchemaOpenJPATestOff.java b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/test/SchemaOpenJPATestOff.java
new file mode 100644
index 0000000..a7f44f5
--- /dev/null
+++ b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/test/SchemaOpenJPATestOff.java
@@ -0,0 +1,95 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.graaasp.jpa.test;
+
+import org.apache.shindig.graaasp.jpa.openjpa.Bootstrap;
+import org.apache.shindig.graaasp.jpa.test.PersonPopulate;
+import org.apache.shindig.social.core.model.EmailDb;
+import org.apache.shindig.social.opensocial.model.Person;
+
+
+import javax.persistence.EntityManager;
+import javax.persistence.EntityTransaction;
+
+import java.util.Random;
+
+/**
+ * 
+ */
+public class SchemaOpenJPATestOff {
+
+  private static EntityManager entityManager;
+
+  // @BeforeClass
+  public static void config() {
+    Bootstrap b = new Bootstrap();
+    // Bootstrap b = new
+    // Bootstrap("com.mysql.jdbc.Driver",
+    // "jdbc:mysql://localhost/sakaikernel?useUnicode=true&amp;characterEncoding=UTF-8",
+    // "sakaikernel", "sakaikernel","1","1");
+    entityManager = b.getEntityManager("openjpa");
+  }
+
+  // @AfterClass
+  public static void stop() {
+  }
+
+  // @Test
+  public void checkSimpleInsert() throws Exception {
+    EntityTransaction transaction = entityManager.getTransaction();
+    transaction.begin();
+    EmailDb email = new EmailDb();
+    email.setType("email");
+    email.setValue("ieb@tfd.co.uk");
+    entityManager.persist(email);
+    transaction.commit();
+  }
+
+  // @Test
+  public void checkPersonCreate() throws Exception {
+    EntityTransaction transaction = entityManager.getTransaction();
+    transaction.begin();
+    PersonPopulate pp = new PersonPopulate(entityManager);
+    int i = 1;
+    long key = System.currentTimeMillis();
+    Random r = new Random();
+    Person p = pp.createPerson(i, key, r);
+    entityManager.persist(p);
+    transaction.commit();
+  }
+
+  // @Test
+  public void fillDatbase() throws Exception {
+    EntityTransaction transaction = entityManager.getTransaction();
+    transaction.begin();
+    PersonPopulate pp = new PersonPopulate(entityManager);
+    long key = System.currentTimeMillis();
+    Random r = new Random();
+    for (int i = 0; i < 20; i++) {
+      Person p = pp.createPerson(i, key, r);
+      entityManager.persist(p);
+      if (i % 10 == 0) {
+        transaction.commit();
+        transaction = entityManager.getTransaction();
+        transaction.begin();
+      }
+    }
+    transaction.commit();
+  }
+
+}
diff --git a/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/test/SchemaTest.java b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/test/SchemaTest.java
new file mode 100644
index 0000000..6af8478
--- /dev/null
+++ b/java/graaasp/src/test/java/org/apache/shindig/graaasp/jpa/test/SchemaTest.java
@@ -0,0 +1,99 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.graaasp.jpa.test;
+
+import org.apache.shindig.graaasp.jpa.eclipselink.Bootstrap;
+import org.apache.shindig.graaasp.jpa.test.PersonPopulate;
+import org.apache.shindig.social.core.model.EmailDb;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import javax.persistence.EntityManager;
+import javax.persistence.EntityTransaction;
+
+import java.util.Random;
+
+/**
+ * 
+ */
+public class SchemaTest {
+
+  private static EntityManager entityManager;
+
+  @BeforeClass
+  public static void config() {
+    Bootstrap b = new Bootstrap("org.apache.derby.jdbc.EmbeddedDriver",
+        "jdbc:derby:target/testdb;create=true", "sa", "", "1", "1");
+    // Bootstrap b = new
+    // Bootstrap("com.mysql.jdbc.Driver",
+    // "jdbc:mysql://localhost/sakaikernel?useUnicode=true&amp;characterEncoding=UTF-8",
+    // "sakaikernel","sakaikernel","1","1");
+    entityManager = b.getEntityManager("default");
+  }
+
+  @AfterClass
+  public static void stop() {
+  }
+
+  @Test
+  public void checkSimpleInsert() throws Exception {
+    EntityTransaction transaction = entityManager.getTransaction();
+    transaction.begin();
+    EmailDb email = new EmailDb();
+    email.setType("email");
+    email.setValue("ieb@tfd.co.uk");
+    entityManager.persist(email);
+    transaction.commit();
+  }
+
+  @Test
+  public void checkPersonCreate() throws Exception {
+    EntityTransaction transaction = entityManager.getTransaction();
+    transaction.begin();
+    PersonPopulate pp = new PersonPopulate(entityManager);
+    int i = 1;
+    long key = System.currentTimeMillis();
+    Random r = new Random();
+    Person p = pp.createPerson(i, key, r);
+    entityManager.persist(p);
+    transaction.commit();
+  }
+
+  @Test
+  public void fillDatbase() throws Exception {
+    EntityTransaction transaction = entityManager.getTransaction();
+    transaction.begin();
+    PersonPopulate pp = new PersonPopulate(entityManager);
+    long key = System.currentTimeMillis();
+    Random r = new Random();
+    for (int i = 0; i < 20; i++) {
+      Person p = pp.createPerson(i, key, r);
+      entityManager.persist(p);
+      if (i % 10 == 0) {
+        transaction.commit();
+        transaction = entityManager.getTransaction();
+        transaction.begin();
+      }
+    }
+    transaction.commit();
+  }
+
+}
diff --git a/java/graaasp/src/test/resources/log4j.properties b/java/graaasp/src/test/resources/log4j.properties
new file mode 100644
index 0000000..b51d247
--- /dev/null
+++ b/java/graaasp/src/test/resources/log4j.properties
@@ -0,0 +1,36 @@
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#  http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+
+log4j.rootCategory=info
+log4j.rootLogger=info, stdout
+
+log4j.appender.stdout=org.apache.log4j.ConsoleAppender
+log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
+log4j.appender.stdout.layout.ConversionPattern= %p %m  [%d] (%F:%L) %n
+
+# http://www.hibernate.org/hib_docs/reference/en/html/configuration-logging.html
+log4j.logger.org.hibernate.SQL=ERROR
+log4j.logger.org.hibernate.type=ERROR
+log4j.logger.org.hibernate.tool.hbm2ddl=ERROR
+log4j.logger.org.hibernate.pretty=ERROR
+log4j.logger.org.hibernate.cache=ERROR
+log4j.logger.org.hibernate.transaction=ERROR
+log4j.logger.org.hibernate.jdbc=ERROR
+log4j.logger.org.hibernate.hql=ERROR
+log4j.logger.org.hibernate.hql.ast.AST=ERROR
+log4j.logger.org.hibernate.secure=ERROR
+log4j.logger.org.hibernate=ERROR
diff --git a/java/graaasp/src/test/resources/sampledata/canonicaldb.json b/java/graaasp/src/test/resources/sampledata/canonicaldb.json
new file mode 100644
index 0000000..9f8b584
--- /dev/null
+++ b/java/graaasp/src/test/resources/sampledata/canonicaldb.json
@@ -0,0 +1,463 @@
+//
+// Licensed to the Apache Software Foundation (ASF) under one
+// or more contributor license agreements. See the NOTICE file
+// distributed with this work for additional information
+// regarding copyright ownership. The ASF licenses this file
+// to you under the Apache License, Version 2.0 (the
+// "License"); you may not use this file except in compliance
+// with the License. You may obtain a copy of the License at
+//
+// http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing,
+// software distributed under the License is distributed on an
+// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+// KIND, either express or implied. See the License for the
+// specific language governing permissions and limitations under the License.
+//
+
+//  WARNING! Changing this file will affect unit-tests
+//  A canonical JSON backed DB of OpenSocial datastructures in their RESTful forms
+//
+//  Basic structure:
+//  { people : Array<Person>,
+//    activity : Map<Person.Id, Array<Activity>>
+//    data : Map<Person.Id, Map<String,String>>
+//    friendLinks : Map<Person.Id, Array<Person.Id>>
+//    userApplications : Map<Person.Id, Array<Application.Id>>
+//    messages : Map<Person.Id, Array<Message>>
+//  }
+//
+//  Notes:
+//   - The structure of Person, Activity MUST! match those in the RESTful spec
+//   - Data for "canonical" user should exercise every field in the spec. And is relied on
+//     for unit-testing so change at your peril
+//   - Consider adding a structure for Map<Person.Id, Array<appId>> to represent installed gadgets
+//
+//  TODO:
+//   - Use URLs for appIds
+//
+//
+{
+"people" : [
+{
+"id" : "canonical",
+"aboutMe" : "I have an example of every piece of data",
+"activities" : ["Coding Shindig"],
+"addresses" : [{
+"country" : "US",
+"latitude" : "28.3043",
+"longitude" : "143.0859",
+"locality" : "who knows",
+"postalCode" : "12345",
+"region" : "Apache, CA",
+"streetAddress" : "1 OpenStandards Way",
+"type" : "home",
+"formatted" : "PoBox 3565, 1 OpenStandards Way, Apache, CA"
+}],
+"age" : 33,
+"bodyType" : {
+"build" : "svelte",
+"eyeColor" : "blue",
+"hairColor" : "black",
+"height" : 1.84,
+"weight" : 74
+},
+"books" : ["The Cathedral & the Bazaar","Catch 22"],
+"cars" : ["beetle","prius"],
+"children" : "3",
+"currentLocation" : {
+"latitude" : "48.858193",
+"longitude" : "2.29419"
+},
+"birthday" : "1975-01-01",
+"displayName" : "Shin Digg",
+"drinker" : {
+"value" : "SOCIALLY",
+"displayValue" : "Socially"
+},
+"emails" : [{
+"value" : "dev@shindig.apache.org",
+"type" : "work"
+}],
+"ethnicity" : "developer",
+"fashion" : "t-shirts",
+"food" : ["sushi","burgers"],
+"gender" : "male",
+"happiestWhen" : "coding",
+"hasApp" : true,
+"heroes" : ["Doug Crockford", "Charles Babbage"],
+"humor" : "none to speak of",
+"interests" : ["PHP","Java"],
+"jobInterests" : "will work for beer",
+"organizations" : [{
+"address" : {
+"formatted" : "1 Shindig Drive"
+},
+"description" : "lots of coding",
+"endDate" : "2010-10-10",
+"field" : "Software Engineering",
+"name" : "Apache.com",
+"salary" : "$1000000000",
+"startDate" : "1995-01-01",
+"subField" : "Development",
+"title" : "Grand PooBah",
+"webpage" : "http://shindig.apache.org/",
+"type" : "job"
+},{
+"address" : {
+"formatted" : "1 Skid Row"
+},
+"description" : "",
+"endDate" : "1995-01-01",
+"field" : "College",
+"name" : "School of hard Knocks",
+"salary" : "$100",
+"startDate" : "1991-01-01",
+"subField" : "Lab Tech",
+"title" : "Gopher",
+"webpage" : "",
+"type" : "job"
+}],
+"languagesSpoken" : ["English","Dutch","Esperanto"],
+"updated" : "2006-06-06T12:12:12Z",
+"livingArrangement" : "in a house",
+"lookingFor" : [
+  {"value" : "RANDOM", "displayValue" : "Random"},
+  {"value" : "NETWORKING", "displayValue" : "Networking"}
+],
+"movies" : ["Iron Man", "Nosferatu"],
+"music" : ["Chieftains","Beck"],
+"name" : {
+"additionalName" : "H",
+"familyName" : "Digg",
+"givenName" : "Shin",
+"honorificPrefix" : "Sir",
+"honorificSuffix" : "Social Butterfly",
+"formatted" : "Sir Shin H. Digg Social Butterfly"
+},
+"networkPresence" : {
+"value" : "ONLINE",
+"displayValue" : "Online"
+},
+"nickname" : "diggy",
+"pets" : "dog,cat",
+"phoneNumbers" : [{
+"value" : "111-111-111",
+"type" : "work"
+},{
+"value" : "999-999-999",
+"type" : "mobile"
+}],
+"politicalViews" : "open leaning",
+"profileSong" : {
+"value" : "http://www.example.org/songs/OnlyTheLonely.mp3",
+"linkText" : "Feelin' blue",
+"type" : "road"
+},
+"profileUrl" : "http://www.example.org/?id=1",
+"profileVideo" : {
+"value" : "http://www.example.org/videos/Thriller.flv",
+"linkText" : "Thriller",
+"type" : "video"
+},
+"quotes" : ["I am therfore I code", "Doh!"],
+"relationshipStatus" : "married to my job",
+"religion" : "druidic",
+"romance" : "twice a year",
+"scaredOf" : "COBOL",
+"sexualOrientation" : "north",
+"smoker" : {
+"value" : "NO",
+"displayValue" : "No"
+},
+"sports" : ["frisbee","rugby"],
+"status" : "happy",
+"tags" : ["C#","JSON","template"],
+"thumbnailUrl" : "http://www.example.org/pic/?id=1",
+"utcOffset" : "-8",
+"turnOffs" : ["lack of unit tests","cabbage"],
+"turnOns" : ["well document code"],
+"tvShows" : ["House","Battlestar Galactica"],
+"urls" : [{
+"value" : "http://www.example.org/?id=1",
+"linkText" : "my profile",
+"type" : "Profile"
+},{
+"value" : "http://www.example.org/pic/?id=1",
+"linkText" : "my awesome picture",
+"type" : "Thumbnail"
+}]
+},
+{
+"id" : "john.doe",
+"displayName" : "Johnny",
+"gender" : "male",
+"hasApp" : true,
+"name" : {
+"familyName" : "Doe",
+"givenName" : "John",
+"formatted" : "John Doe"
+}
+},
+{
+"id" : "jane.doe",
+"displayName" : "Janey",
+"gender" : "female",
+"hasApp" : true,
+"name" : {
+"familyName" : "Doe",
+"givenName" : "Jane",
+"formatted" : "Jane Doe"
+}
+},
+{
+"id" : "george.doe",
+"displayName" : "Georgey",
+"gender" : "male",
+"hasApp" : true,
+"name" : {
+"familyName" : "Doe",
+"givenName" : "George",
+"formatted" : "George Doe"
+}
+},
+{
+"id" : "mario.rossi",
+"displayName" : "Mario",
+"gender" : "male",
+"hasApp" : true,
+"name" : {
+"familyName" : "Rossi",
+"givenName" : "Mario",
+"formatted" : "Mario Rossi"
+}
+},
+{
+"id" : "maija.m",
+"displayName" : "Maija",
+"gender" : "female",
+"hasApp" : true,
+"name" : {
+"familyName" : "Meikäläinen",
+"givenName" : "Maija",
+"formatted" : "Maija Meikäläinen"
+}
+}],
+//
+// ----------------------------- Data ---------------------------------------
+//
+"data" : {
+"canonical" : {
+"count" : "2",
+"size" : "100"
+},
+"john.doe" : {
+"count" : "0"
+},
+"george.doe" : {
+"count" : "2"
+},
+"jane.doe" : {
+"count" : "7"
+}
+},
+"activities" : {
+"canonical" : [{
+"appId" : "1",
+"body" : "Went rafting",
+"bodyId" : "1",
+"externalId" : "http://www.example.org/123456",
+"id" : "1",
+"updated" : "2008-06-06T12:12:12Z",
+"mediaItems" : [{
+"mimeType" : "image/*",
+"type" : "image",
+"url" : "http://upload.wikimedia.org/wikipedia/commons/thumb/7/77/Rafting_em_Brotas.jpg/800px-Rafting_em_Brotas.jpg"
+},{
+"mimeType" : "audio/mpeg",
+"type" : "audio",
+"url" : "http://www.archive.org/download/testmp3testfile/mpthreetest.mp3"
+}],
+"postedTime" : "1111111111",
+"priority" : "0.7",
+"streamFaviconUrl" : "http://upload.wikimedia.org/wikipedia/commons/0/02/Nuvola_apps_edu_languages.gif",
+"streamSourceUrl" : "http://www.example.org/canonical/streamsource",
+"streamTitle" : "All my activities",
+"streamUrl" : "http://www.example.org/canonical/activities",
+"templateParams" : {
+"small" : "true",
+"otherContent" : "and got wet"
+},
+"title" : "My trip",
+"titleId" : "1",
+"url" : "http://www.example.org/canonical/activities/1",
+"userId" : "canonical"
+},{
+"appId" : "1",
+"body" : "Went skiing",
+"bodyId" : "1",
+"externalId" : "http://www.example.org/123457",
+"id" : "1",
+"updated" : "2008-06-10T12:12:12Z",
+"postedTime" : "1111111112",
+"priority" : "0.7",
+"streamFaviconUrl" : "http://upload.wikimedia.org/wikipedia/commons/0/02/Nuvola_apps_edu_languages.gif",
+"streamSourceUrl" : "http://www.example.org/canonical/streamsource",
+"streamTitle" : "All my activities",
+"streamUrl" : "http://www.example.org/canonical/activities",
+"templateParams" : {
+"small" : "true",
+"otherContent" : "and went fast"
+},
+"title" : "My next trip",
+"titleId" : "1",
+"url" : "http://www.example.org/canonical/activities/2",
+"userId" : "canonical"
+}],
+"john.doe" : [{
+"id" : "1",
+"userId" : "john.doe",
+"title" : "yellow",
+"body" : "what a color!"
+}],
+"jane.doe" : [{
+"id" : "1",
+"body" : "and she thinks you look like him",
+"mediaItems" : [{
+"mimeType" : "image/jpeg",
+"type" : "image",
+"url" : "http://animals.nationalgeographic.com/staticfiles/NGS/Shared/StaticFiles/animals/images/primary/black-spider-monkey.jpg"
+},{
+"mimeType" : "image/jpeg",
+"type" : "image",
+"url" : "http://image.guardian.co.uk/sys-images/Guardian/Pix/gallery/2002/01/03/monkey300.jpg"
+}],
+"streamTitle" : "jane's photos",
+"title" : "Jane just posted a photo of a monkey",
+"userId" : "jane.doe"
+},{
+"id" : "2",
+"body" : "or is it you?",
+"mediaItems" : [{
+"mimeType" : "image/jpeg",
+"type" : "image",
+"url" : "http://www.funnyphotos.net.au/images/fancy-dress-dog-yoda-from-star-wars1.jpg"
+}],
+"streamTitle" : "jane's photos",
+"title" : "Jane says George likes yoda!",
+"userId" : "jane.doe"
+}]
+
+},
+//
+// ----------------------------- Data ---------------------------------------
+//
+"friendLinks" : {
+"canonical" : ["john.doe", "jane.doe", "george.doe", "maija.m"],
+"john.doe" : ["jane.doe", "george.doe", "maija.m"],
+"jane.doe" : ["john.doe"],
+"george.doe" : ["john.doe"],
+"maija.m" : []
+},
+//
+// ----------------------------- Groups ---------------------------------------
+//
+"groups" : {
+"john.doe" :  ["1", "2", "3"],
+"george.doe" : ["13","14"],
+},
+//
+//---------------------------- Data For User Applications --------------------------------------------
+//
+"userApplications" : {
+"canonical" : ["9158", "9703", "9143", "8877"],
+"john.doe" : ["8877", "9143", "9158"],
+"jane.doe" : ["9158", "9703"],
+"george.doe" : ["9143"],
+"maija.m" : []
+},
+//
+//--------------------------- Message Collections. -----------------------------------------
+//
+"messages" : {
+"canonical" : {
+  "notification" : {"title" : "Notifications",
+                         "messages" : [
+                           {"id": "1", "title": "whazzup", "type": "notification", "body": "hey dude."},
+                           {"id": "2", "title": "play checkers", "type": "notification", "body": "hot online checkers action"},
+                           {"id": "3", "title": "you won!", "type": "notification", "body": "<b>yes, you really, really won!</b>"}
+
+                           ]},
+  "publicMessage" : { "title" : "Profile Comments",
+        "messages" : [
+          {"id": "1", "senderId": "john.doe", "title": "Hairdo", "type": "publicMessage", "body": "nice &quot;haircut!&quot;", "replies": ["1a","1b"]},
+          {"id": "1a", "senderId": "canonical", "title": "", "type": "publicMessage", "body": "that's not hair, it's a wig!", "inReplyTo": "1"},
+          {"id": "1b", "senderId": "john.doe", "title": "100% polyester", "type": "publicMessage", "body": "only the finest hyrdrocarbons :)","inReplyTo": "1"},
+          {"id": "2", "senderId": "jane.doe", "title": "hola", "type": "publicMessage", "body": "be my bff?"}
+
+        ]},
+  "privateMessage" : {"title" : "Inbox",
+        "messages" : []}
+  
+  },
+
+"john.doe" : {
+  "notification" : {"title" : "Notifications",
+                          "messages" : [
+                          {"id": "1", "title": "you received a peanut", "type": "notification", "body": "peanuts are healthy"},
+                          {"id": "3", "title": "Group Request", "type": "notification", "body": "Join Cat Lovers Anonymous"}
+                          ]},
+  "privateMessage" : {"title" : "Inbox", "messages" : []},
+  "publicMessage" : {"title" : "Inbox", "messages" : []}
+},
+"jane.doe" : {
+    "notification" : {"title" : "Notifications", "messages" : []},
+    "privateMessage" : {"title" : "Inbox", "messages" : []},
+    "publicMessage" : {"title" : "Inbox", "messages" : []}
+},
+  "george.doe" : {
+        "notification" : {"title" : "Notifications", "messages" : []},
+        "privateMessage" : {"title" : "Inbox", "messages" : []},
+        "publicMessage" : {"title" : "Inbox", "messages" : []}
+  },
+  "maija.m" : { 
+        "notification" : {"title" : "Notifications", "messages" : []},
+        "privateMessage" : {"title" : "Inbox", "messages" : []},
+        "publicMessage" : {"title" : "Inbox", "messages" : []}
+  }
+},
+//
+// Gadgets/App information.  OAuth Consumer Key defaults to the app url.
+//
+"apps" : {
+    "http://localhost:8080/gadgets/files/samplecontainer/examples/SocialHelloWorld.xml":
+        { "title" : "Social Hello World",
+          "consumerSecret" : "secret",
+           "icon" : "http://localhost:8080/gadgets/files/samplecontainer/examples/icon.png"},
+    "http://localhost:8080/gadgets/files/samplecontainer/examples/SocialActivitiesWorld.xml" :
+        { "title" : "Social Activities World",
+          "consumerSecret" : "secret",
+          "icon" : "http://localhost:8080/gadgets/files/samplecontainer/examples/icon.png"},
+    "http://localhost:8080/gadgets/files/samplecontainer/examples/oauth.xml" :
+        { "title" : "Demo OAuth Gadget",
+          "consumerSecret" : "secret",
+          "icon" : "http://localhost:8080/gadgets/files/samplecontainer/examples/icon.png"}
+ },
+
+ // duplicates userApplications as above..
+ "permissions": {
+   "john.doe" : { "http://localhost:8080/gadgets/files/samplecontainer/examples/SocialHelloWorld.xml" : { installed : true},
+                  "http://localhost:8080/gadgets/files/samplecontainer/examples/SocialActivitiesWorld.xml" : { installed : true}
+   },
+   "canonical" :{ "http://localhost:8080/gadgets/files/samplecontainer/examples/SocialHelloWorld.xml" : { installed : true},
+                  "http://localhost:8080/gadgets/files/samplecontainer/examples/SocialActivitiesWorld.xml" : { installed : true}
+   }
+ },
+// Passwords for authenticaiton service
+ "passwords" : {
+    "john.doe" : "password",
+    "jane.doe" : "password",
+    "canonical" : "password"
+  }
+}
<<<<<<< HEAD

=======
diff --git a/java/samples/src/main/resources/META-INF/orm.xml b/java/samples/src/main/resources/META-INF/orm.xml
index 99b9e2c..7674ceb 100644
--- a/java/samples/src/main/resources/META-INF/orm.xml
+++ b/java/samples/src/main/resources/META-INF/orm.xml
@@ -74,7 +74,7 @@
   </entity>
   <entity class="org.apache.shindig.social.opensocial.jpa.GroupPropertyDb">
   </entity>
-  <entity class="org.apache.shindig.social.opensocial.jpa.ApplicationDb">
+  <entity class="org.apache.shindig.social.opensocial.jpa.AppDb">
   </entity>
   <entity class="org.apache.shindig.social.opensocial.jpa.ApplicationPropertyDb">
   </entity>
diff --git a/java/server/pom.xml b/java/server/pom.xml
index 48b7b17..7cc54a2 100644
--- a/java/server/pom.xml
+++ b/java/server/pom.xml
@@ -125,6 +125,11 @@
       <groupId>org.apache.shindig</groupId>
       <artifactId>shindig-extras</artifactId>
     </dependency>
+    <dependency>
+      <groupId>org.apache.shindig</groupId>
+      <artifactId>shindig-graaasp</artifactId>
+    </dependency>
+    
 
     <!-- external dependencies -->
     <dependency>
>>>>>>> updates .gitignore, adds diff file for previous version of shindig
diff --git a/java/server/src/main/webapp/WEB-INF/web.xml b/java/server/src/main/webapp/WEB-INF/web.xml
deleted file mode 100644
index c32e917..0000000
--- a/java/server/src/main/webapp/WEB-INF/web.xml
+++ /dev/null
@@ -1,279 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one
-  or more contributor license agreements.  See the NOTICE file
-  distributed with this work for additional information
-  regarding copyright ownership.  The ASF licenses this file
-  to you under the Apache License, Version 2.0 (the
-  "License"); you may not use this file except in compliance
-  with the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing,
-  software distributed under the License is distributed on an
-  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-  KIND, either express or implied.  See the License for the
-  specific language governing permissions and limitations
-  under the License.
--->
-<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xmlns="http://java.sun.com/xml/ns/javaee"
-         xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
-         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
-         id="Shindig"
-         version="2.5">
-  <display-name>Shindig</display-name>
-  <!-- configuration -->
-  <!-- If you have your own Guice module(s), put them here as a colon-separated list. -->
-  <!-- Note that any extras modules are optional -->
-  <context-param>
-    <param-name>guice-modules</param-name>
-    <param-value>
-      org.apache.shindig.common.PropertiesModule:
-      org.apache.shindig.gadgets.DefaultGuiceModule:
-      org.apache.shindig.social.core.config.SocialApiGuiceModule:
-      org.apache.shindig.social.sample.SampleModule:
-      org.apache.shindig.gadgets.oauth.OAuthModule:
-      org.apache.shindig.common.cache.ehcache.EhCacheModule:
-      org.apache.shindig.sample.shiro.ShiroGuiceModule:
-      org.apache.shindig.sample.container.SampleContainerGuiceModule:
-      org.apache.shindig.extras.ShindigExtrasGuiceModule:
-      org.apache.shindig.extras.as.ActivityStreamsGuiceModule
-    </param-value>
-  </context-param>
-
-  <!-- 
-  Syntax: <key>=<value> separated by a newline
-  
-  system.properties specifies the environmental variables that will be set to the JVM System Properties at server startup time.
-  Alternatively, you may add these values in your app server (ex: Tomcat) as
-  VM arguments like this: -Dshindig.host="my.production.shindig.server.com".
-  
-  Here are a few properties that can be set for Shindig:
-  shindig.host: the server name that Shindig is deployed and running on
-  shindig.port: the port number of shindig.host server
-  
-  Make sure you escape all HTML values for the web.xml to be parsed correctly.
-  -->
-   <context-param>
-  	<param-name>system.properties</param-name>
-     <param-value>
-    	shindig.host=localhost
-    	
-    	aKey=/shindig/gadgets/proxy?container=default&amp;url=
-    	shindig.port=
-    	
-     </param-value>
-  </context-param>  
-
-    <filter>
-        <filter-name>ShiroFilter</filter-name>
-        <filter-class>org.apache.shiro.web.servlet.IniShiroFilter</filter-class>
-        <init-param>
-            <param-name>config</param-name>
-            <param-value>
-                # The ShiroFilter configuration is very powerful and flexible, while still remaining succinct.
-                # Please read the comprehensive example, with full comments and explanations, in the JavaDoc:
-                #
-                # http://www.jsecurity.org/api/org/jsecurity/web/servlet/JSecurityFilter.html
-                [main]
-                shindigSampleRealm = org.apache.shindig.sample.shiro.SampleShiroRealm
-                securityManager.realm = $shindigSampleRealm
-                authc.loginUrl = /login.jsp
-
-                [urls]
-                # The /login.jsp is not restricted to authenticated users (otherwise no one could log in!), but
-                # the 'authc' filter must still be specified for it so it can process that url's
-                # login submissions. It is 'smart' enough to allow those requests through as specified by the
-                # shiro.loginUrl above.
-                /login.jsp = authc
-
-                /oauth/authorize/** = authc
-
-            </param-value>
-        </init-param>
-    </filter>
-
-  <filter>
-    <filter-name>authFilter</filter-name>
-    <filter-class>org.apache.shindig.auth.AuthenticationServletFilter</filter-class>
-  </filter>
-
-
-  <filter-mapping>
-      <filter-name>ShiroFilter</filter-name>
-      <url-pattern>/oauth/authorize</url-pattern>
-  </filter-mapping>
-
-  <filter-mapping>
-      <filter-name>ShiroFilter</filter-name>
-      <url-pattern>*.jsp</url-pattern>
-  </filter-mapping>
-
-  <filter-mapping>
-    <filter-name>authFilter</filter-name>
-    <url-pattern>/social/*</url-pattern>
-    <url-pattern>/gadgets/ifr</url-pattern>
-    <url-pattern>/gadgets/makeRequest</url-pattern>
-    <url-pattern>/gadgets/api/rpc/*</url-pattern>
-    <url-pattern>/gadgets/api/rest/*</url-pattern>
-    <url-pattern>/rpc/*</url-pattern>
-    <url-pattern>/rest/*</url-pattern>
-  </filter-mapping>
-
-  <listener>
-    <listener-class>org.apache.shindig.common.servlet.GuiceServletContextListener</listener-class>
-  </listener>
-
-  <!-- Render a Gadget -->
-  <servlet>
-    <servlet-name>xml-to-html</servlet-name>
-    <servlet-class>
-      org.apache.shindig.gadgets.servlet.GadgetRenderingServlet
-    </servlet-class>
-  </servlet>
-
-  <servlet>
-    <servlet-name>accel</servlet-name>
-    <servlet-class>
-      org.apache.shindig.gadgets.servlet.HtmlAccelServlet
-    </servlet-class>
-  </servlet>
-
-  <!-- Proxy -->
-  <servlet>
-    <servlet-name>proxy</servlet-name>
-    <servlet-class>
-      org.apache.shindig.gadgets.servlet.ProxyServlet
-    </servlet-class>
-  </servlet>
-
-  <!-- makeRequest -->
-  <servlet>
-    <servlet-name>makeRequest</servlet-name>
-    <servlet-class>
-      org.apache.shindig.gadgets.servlet.MakeRequestServlet
-    </servlet-class>
-  </servlet>
-
-  <!-- Concat -->
-  <servlet>
-    <servlet-name>concat</servlet-name>
-    <servlet-class>
-      org.apache.shindig.gadgets.servlet.ConcatProxyServlet
-    </servlet-class>
-  </servlet>
-
-  <!-- OAuth callback -->
-  <servlet>
-    <servlet-name>oauthCallback</servlet-name>
-    <servlet-class>
-      org.apache.shindig.gadgets.servlet.OAuthCallbackServlet
-    </servlet-class>
-  </servlet>
-
-  <!-- Metadata RPC -->
-  <servlet>
-    <servlet-name>metadata</servlet-name>
-    <servlet-class>
-      org.apache.shindig.gadgets.servlet.RpcServlet
-    </servlet-class>
-  </servlet>
-
-  <!-- javascript serving -->
-  <servlet>
-    <servlet-name>js</servlet-name>
-    <servlet-class>org.apache.shindig.gadgets.servlet.JsServlet</servlet-class>
-  </servlet>
-
-  <servlet>
-    <servlet-name>restapiServlet</servlet-name>
-    <servlet-class>
-      org.apache.shindig.protocol.DataServiceServlet
-    </servlet-class>
-    <init-param>
-      <param-name>handlers</param-name>
-      <param-value>org.apache.shindig.handlers</param-value>
-    </init-param>
-  </servlet>
-
-  <!-- Serve social RPC api -->
-  <servlet>
-    <servlet-name>jsonRpcServlet</servlet-name>
-    <servlet-class>
-      org.apache.shindig.protocol.JsonRpcServlet
-    </servlet-class>
-    <init-param>
-      <param-name>handlers</param-name>
-      <param-value>org.apache.shindig.handlers</param-value>
-    </init-param>
-  </servlet>
-
-  <!-- Serve sample OAuth apis -->
-  <servlet>
-    <servlet-name>sampleOAuth</servlet-name>
-    <servlet-class>
-      org.apache.shindig.social.sample.oauth.SampleOAuthServlet
-    </servlet-class>
-  </servlet>
-
-  <servlet-mapping>
-    <servlet-name>js</servlet-name>
-    <url-pattern>/gadgets/js/*</url-pattern>
-  </servlet-mapping>
-
-  <servlet-mapping>
-    <servlet-name>proxy</servlet-name>
-    <url-pattern>/gadgets/proxy/*</url-pattern>
-  </servlet-mapping>
-
-  <servlet-mapping>
-    <servlet-name>makeRequest</servlet-name>
-    <url-pattern>/gadgets/makeRequest</url-pattern>
-  </servlet-mapping>
-
-  <servlet-mapping>
-    <servlet-name>jsonRpcServlet</servlet-name>
-    <url-pattern>/rpc/*</url-pattern>
-    <url-pattern>/gadgets/api/rpc/*</url-pattern>
-    <url-pattern>/social/rpc/*</url-pattern>
-  </servlet-mapping>
-
-  <servlet-mapping>
-    <servlet-name>restapiServlet</servlet-name>
-    <url-pattern>/rest/*</url-pattern>
-    <url-pattern>/gadgets/api/rest/*</url-pattern>
-    <url-pattern>/social/rest/*</url-pattern>
-  </servlet-mapping>
-
-  <servlet-mapping>
-    <servlet-name>concat</servlet-name>
-    <url-pattern>/gadgets/concat</url-pattern>
-  </servlet-mapping>
-
-  <servlet-mapping>
-    <servlet-name>oauthCallback</servlet-name>
-    <url-pattern>/gadgets/oauthcallback</url-pattern>
-  </servlet-mapping>
-
-  <servlet-mapping>
-    <servlet-name>xml-to-html</servlet-name>
-    <url-pattern>/gadgets/ifr</url-pattern>
-  </servlet-mapping>
-
-  <servlet-mapping>
-    <servlet-name>accel</servlet-name>
-    <url-pattern>/gadgets/accel</url-pattern>
-  </servlet-mapping>
-
-  <servlet-mapping>
-    <servlet-name>metadata</servlet-name>
-    <url-pattern>/gadgets/metadata</url-pattern>
-  </servlet-mapping>
-
-  <servlet-mapping>
-    <servlet-name>sampleOAuth</servlet-name>
-    <url-pattern>/oauth/*</url-pattern>
-  </servlet-mapping>
-</web-app>
<<<<<<< HEAD

=======
diff --git a/java/social-api/pom.xml b/java/social-api/pom.xml
index 3a639b0..a6b1831 100644
--- a/java/social-api/pom.xml
+++ b/java/social-api/pom.xml
@@ -118,6 +118,34 @@
       <groupId>net.oauth.core</groupId>
       <artifactId>oauth-httpclient4</artifactId>
     </dependency>
+    
+    <!-- Hibernate -->
+    <dependency>
+      <groupId>org.hibernate</groupId>
+      <artifactId>hibernate</artifactId>
+      <version>3.2.6.ga</version>
+    </dependency>
+    <dependency>
+      <groupId>org.hibernate</groupId>
+      <artifactId>hibernate-annotations</artifactId>
+      <version>3.3.1.GA</version>
+    </dependency>
+    <dependency>
+      <groupId>org.hibernate</groupId>
+      <artifactId>hibernate-entitymanager</artifactId>
+      <version>3.3.1.ga</version>
+    </dependency>
+    <dependency>
+      <groupId>org.hibernate</groupId>
+      <artifactId>hibernate-tools</artifactId>
+      <version>3.2.0.ga</version>
+    </dependency>
+    <dependency>
+      <groupId>org.hibernate</groupId>
+      <artifactId>ejb3-persistence</artifactId>
+      <version>1.0.1.GA</version>
+    </dependency>
+    
 
     <!-- may only be needed for JDK < 1.6 -->
     <dependency>
@@ -141,6 +169,11 @@
       <artifactId>httpclient</artifactId>
     </dependency>
     <dependency>
+    	<groupId>org.apache.httpcomponents</groupId>
+    	<artifactId>httpmime</artifactId>
+    	<version>4.1.2</version>
+    </dependency>
+    <dependency>
       <groupId>xml-apis</groupId>
       <artifactId>xml-apis</artifactId>
     </dependency>
>>>>>>> updates .gitignore, adds diff file for previous version of shindig
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/config/SocialApiGuiceModule.java b/java/social-api/src/main/java/org/apache/shindig/social/core/config/SocialApiGuiceModule.java
index 911431d..8f8a4ae 100644
--- a/java/social-api/src/main/java/org/apache/shindig/social/core/config/SocialApiGuiceModule.java
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/config/SocialApiGuiceModule.java
@@ -38,6 +38,14 @@ import org.apache.shindig.social.opensocial.service.AppDataHandler;
 import org.apache.shindig.social.opensocial.service.MediaItemHandler;
 import org.apache.shindig.social.opensocial.service.MessageHandler;
 import org.apache.shindig.social.opensocial.service.PersonHandler;
+import org.apache.shindig.social.opensocial.service.SpaceHandler;
+import org.apache.shindig.social.opensocial.service.AppHandler;
+import org.apache.shindig.social.opensocial.service.DocumentHandler;
+import org.apache.shindig.social.opensocial.service.RecommenderHandler;
+import org.apache.shindig.social.opensocial.service.ContextHandler;
+
+import org.apache.shindig.social.opensocial.oauth.OAuthDataStore;
+import org.apache.shindig.social.sample.oauth.SampleOAuthDataStore;
 
 import com.google.common.collect.ImmutableSet;
 import com.google.inject.AbstractModule;
@@ -70,7 +78,9 @@ public class SocialApiGuiceModule extends AbstractModule {
     bind(BeanConverter.class).annotatedWith(Names.named("shindig.bean.converter.atom")).to(
         BeanXStreamAtomConverter.class);
 
-    bind(new TypeLiteral<List<AuthenticationHandler>>(){}).toProvider(
+	bind(OAuthDataStore.class).to(SampleOAuthDataStore.class);
+    
+	bind(new TypeLiteral<List<AuthenticationHandler>>(){}).toProvider(
         AuthenticationHandlerProvider.class);
 
     Multibinder<Object> handlerBinder = Multibinder.newSetBinder(binder(), Object.class, Names.named("org.apache.shindig.handlers"));
@@ -85,6 +95,8 @@ public class SocialApiGuiceModule extends AbstractModule {
    */
   protected Set<Class<?>> getHandlers() {
     return ImmutableSet.<Class<?>>of(ActivityHandler.class, AppDataHandler.class,
-        PersonHandler.class, MessageHandler.class, AlbumHandler.class, MediaItemHandler.class);
+        PersonHandler.class, MessageHandler.class, AlbumHandler.class, MediaItemHandler.class, 
+		SpaceHandler.class, AppHandler.class, DocumentHandler.class, ContextHandler.class,
+		RecommenderHandler.class);
   }
 }
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/AccountDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AccountDb.java
new file mode 100644
index 0000000..4e0aa4f
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AccountDb.java
@@ -0,0 +1,163 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.social.opensocial.model.Account;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.DiscriminatorColumn;
+import javax.persistence.DiscriminatorValue;
+import javax.persistence.Entity;
+import javax.persistence.Id;
+import javax.persistence.Inheritance;
+import javax.persistence.InheritanceType;
+import javax.persistence.Table;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Version;
+import javax.persistence.Transient;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+/**
+ * Storage object for the Person. Stored in a table "account" which is also used by
+ * joined extension classes, the account usage column defines the class where the extension
+ * is used, but in most cases addresses are shared and this column has the value "sharedaccount"
+ * For more information on the API see {@link Account}
+ */
+@Entity
+@Table(name = "account")
+@Inheritance(strategy = InheritanceType.JOINED)
+@DiscriminatorColumn(name = "account_usage")
+@DiscriminatorValue(value = "sharedaccount")
+public class AccountDb implements Account, DbObject {
+  /**
+   * The internal object ID used for references to this object. Should be generated
+   * by the underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "oid")
+  protected long objectId;
+
+  /**
+   * An optimistic locking field.
+   */
+  @Version
+  @Column(name = "version")
+  protected long version;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Account
+   */
+  @Basic
+  @Column(name = "domain", length = 255)
+  protected String domain;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Account
+   */
+  @Basic
+  @Column(name = "user_id", length = 255)
+  protected String userId;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Account
+   */
+  @Basic
+  @Column(name = "username", length = 255)
+  protected String username;
+
+  /**
+   * create an empty account object.
+   */
+  public AccountDb() {
+  }
+
+  /**
+   * Create an account object based on domain, userId and username
+   * @param domain the domain of the account
+   * @param userId the user id of the account
+   * @param username the username of the account
+   */
+  public AccountDb(String domain, String userId, String username) {
+    this.domain = domain;
+    this.userId = userId;
+    this.username = username;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Account#getDomain()
+   */
+  public String getDomain() {
+    return domain;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Account#setDomain(java.lang.String)
+   */
+  public void setDomain(String domain) {
+    this.domain = domain;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Account#getUserId()
+   */
+  public String getUserId() {
+    return userId;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Account#setUserId(java.lang.String)
+   */
+  public void setUserId(String userId) {
+    this.userId = userId;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Account#getUsername()
+   */
+  public String getUsername() {
+    return username;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Account#setUsername(java.lang.String)
+   */
+  public void setUsername(String username) {
+    this.username = username;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.core.model.DbObject#getObjectId()
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/ActivityDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ActivityDb.java
new file mode 100644
index 0000000..92c4024
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ActivityDb.java
@@ -0,0 +1,667 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.CascadeType.ALL;
+import static javax.persistence.GenerationType.IDENTITY;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.MapMaker;
+
+import org.apache.shindig.social.core.model.ActivityDb;
+import org.apache.shindig.social.core.model.ActivityTemplateParamsDb;
+import org.apache.shindig.social.core.model.MediaItemDb;
+import org.apache.shindig.social.opensocial.model.Activity;
+import org.apache.shindig.social.opensocial.model.MediaItem;
+
+import java.util.Date;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.JoinTable;
+import javax.persistence.ManyToMany;
+import javax.persistence.MapKey;
+import javax.persistence.NamedQueries;
+import javax.persistence.NamedQuery;
+import javax.persistence.OneToMany;
+import javax.persistence.PostLoad;
+import javax.persistence.PrePersist;
+import javax.persistence.Table;
+import javax.persistence.Temporal;
+import javax.persistence.TemporalType;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+
+/**
+ * Activity model object stored in the "activity" table.
+ */
+@Entity
+@Table(name = "activity")
+@NamedQueries(value = {
+    @NamedQuery(name = ActivityDb.FINDBY_ACTIVITY_ID, 
+        query = "select activity from ActivityDb activity where activity.userId = :userId and activity.id = :activityId")
+    })
+public class ActivityDb implements Activity, DbObject {
+
+  public static final String FINDBY_ACTIVITY_ID = "q.activity.findbyactivityid";
+
+  public static final String PARAM_USERID = "userId";
+  
+  public static final String PARAM_ACTIVITYID = "activityId";
+   
+  public static final String JPQL_FINDBY_ACTIVITIES = null;
+  
+  public static final String JPQL_FINDACTIVITY = "select a from ActivityDb a where ";
+  
+  public static final String JPQL_FINDACTIVITY_BY_FRIENDS = "select a from ActivityDb a where a.userId in (select p.id from PersonDb p where p.objectId in (select f.friend.objectId from PersonDb p, FriendDb f where p.objectId = f.person.objectId and ";
+
+  /**
+   * The internal object ID used for references to this object. Should be
+   * generated by the underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "oid")
+  protected long objectId;
+
+  /**
+   * An optimistic locking field
+   */
+  @Version
+  @Column(name = "version")
+  protected long version;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "app_id", length = 255)
+  protected String appId;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "body", length = 255)
+  protected String body;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "body_id", length = 255)
+  protected String bodyId;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "external_id", length = 255)
+  protected String externalId;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "activity_id", length = 255)
+  protected String id;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "updated")
+  @Temporal(TemporalType.TIMESTAMP)
+  protected Date updated;
+
+  /**
+   * A list of shared media items associated with this activity, joined by the
+   * table "activity_media" such that activity_media.activity_id = activity.oid
+   * and activity_media.media_id = media.oid. Media items may be shared amongst
+   * many activities or other entities.
+   */
+  @ManyToMany(targetEntity = MediaItemDb.class, cascade = ALL)
+  @JoinTable(name = "activity_media",
+      joinColumns = @JoinColumn(name = "activity_id", referencedColumnName = "oid"),
+      inverseJoinColumns = @JoinColumn(name = "media_id", referencedColumnName = "oid"))
+  protected List<MediaItem> mediaItems;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "posted_time")
+  protected Long postedTime;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "priority")
+  protected Float priority;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "stream_favicon_url", length = 255)
+  protected String streamFaviconUrl;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "stream_source_url", length = 255)
+  protected String streamSourceUrl;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "stream_title", length = 255)
+  protected String streamTitle;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "stream_url", length = 255)
+  protected String streamUrl;
+
+  /**
+   * Create map using ActivityTemplateParamsDb such that ActivityTemplateParams
+   * are joined on oid -> activity_id and then the name value becomes the key,
+   * and the value becomes the value unfortunately JPA wont do
+   * Map<String,String> so this is handled in the prePersist and postLoad hook.
+   */
+  @OneToMany(targetEntity = ActivityTemplateParamsDb.class, mappedBy = "activity", cascade = ALL)
+  @MapKey(name = "name")
+  protected Map<String, ActivityTemplateParamsDb> templateParamsDb = new MapMaker().makeMap();
+
+  /**
+   * The transient store for templateParamers loaded by the postLoad hook and
+   * persisted by the prePersist hook.
+   */
+  @Transient
+  protected Map<String, String> templateParams;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "title", length = 255)
+  protected String title;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "title_id", length = 255)
+  protected String titleId;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "url", length = 255)
+  protected String url;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "user_id", length = 255)
+  protected String userId;
+
+  public ActivityDb() {
+  }
+
+  public ActivityDb(String id, String userId) {
+    this.id = id;
+    this.userId = userId;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getAppId()
+   */
+  public String getAppId() {
+    return appId;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setAppId(java.lang.String)
+   */
+  public void setAppId(String appId) {
+    this.appId = appId;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getBody()
+   */
+  public String getBody() {
+    return body;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setBody(java.lang.String)
+   */
+  public void setBody(String body) {
+    this.body = body;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getBodyId()
+   */
+  public String getBodyId() {
+    return bodyId;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setBodyId(java.lang.String)
+   */
+  public void setBodyId(String bodyId) {
+    this.bodyId = bodyId;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getExternalId()
+   */
+  public String getExternalId() {
+    return externalId;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setExternalId(java.lang.String)
+   */
+  public void setExternalId(String externalId) {
+    this.externalId = externalId;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getId()
+   */
+  public String getId() {
+    return id;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setId(java.lang.String)
+   */
+  public void setId(String id) {
+    this.id = id;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getUpdated()
+   */
+  public Date getUpdated() {
+    if (updated == null) {
+      return null;
+    }
+    return new Date(updated.getTime());
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setUpdated(java.util.Date)
+   */
+  public void setUpdated(Date updated) {
+    if (updated == null) {
+      this.updated = null;
+    } else {
+      this.updated = new Date(updated.getTime());
+    }
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getMediaItems()
+   */
+  public List<MediaItem> getMediaItems() {
+    return mediaItems;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setMediaItems(java.util.List)
+   */
+  public void setMediaItems(List<MediaItem> mediaItems) {
+    this.mediaItems = mediaItems;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getPostedTime()
+   */
+  public Long getPostedTime() {
+    return postedTime;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setPostedTime(java.lang.Long)
+   */
+  public void setPostedTime(Long postedTime) {
+    this.postedTime = postedTime;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getPriority()
+   */
+  public Float getPriority() {
+    return priority;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setPriority(java.lang.Float)
+   */
+  public void setPriority(Float priority) {
+    this.priority = priority;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getStreamFaviconUrl()
+   */
+  public String getStreamFaviconUrl() {
+    return streamFaviconUrl;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setStreamFaviconUrl(java.lang.String)
+   */
+  public void setStreamFaviconUrl(String streamFaviconUrl) {
+    this.streamFaviconUrl = streamFaviconUrl;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getStreamSourceUrl()
+   */
+  public String getStreamSourceUrl() {
+    return streamSourceUrl;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setStreamSourceUrl(java.lang.String)
+   */
+  public void setStreamSourceUrl(String streamSourceUrl) {
+    this.streamSourceUrl = streamSourceUrl;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getStreamTitle()
+   */
+  public String getStreamTitle() {
+    return streamTitle;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setStreamTitle(java.lang.String)
+   */
+  public void setStreamTitle(String streamTitle) {
+    this.streamTitle = streamTitle;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getStreamUrl()
+   */
+  public String getStreamUrl() {
+    return streamUrl;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setStreamUrl(java.lang.String)
+   */
+  public void setStreamUrl(String streamUrl) {
+    this.streamUrl = streamUrl;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getTemplateParams()
+   */
+  public Map<String, String> getTemplateParams() {
+    return templateParams;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setTemplateParams(java.util.Map)
+   */
+  public void setTemplateParams(Map<String, String> templateParams) {
+    this.templateParams = templateParams;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getTitle()
+   */
+  public String getTitle() {
+    return title;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setTitle(java.lang.String)
+   */
+  public void setTitle(String title) {
+    this.title = title;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getTitleId()
+   */
+  public String getTitleId() {
+    return titleId;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setTitleId(java.lang.String)
+   */
+  public void setTitleId(String titleId) {
+    this.titleId = titleId;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getUrl()
+   */
+  public String getUrl() {
+    return url;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setUrl(java.lang.String)
+   */
+  public void setUrl(String url) {
+    this.url = url;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getUserId()
+   */
+  public String getUserId() {
+    return userId;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setUserId(java.lang.String)
+   */
+  public void setUserId(String userId) {
+    this.userId = userId;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.core.model.DbObject#getObjectId()
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+  /**
+   * Hook into the pre persist JPA event to take the transient fields and
+   * populate the DB fields prior to persisting the data.
+   */
+  @PrePersist
+  public void populateDbFields() {
+    if (templateParams != null) {
+      // add new entries
+      for (Entry<String, String> e : templateParams.entrySet()) {
+        ActivityTemplateParamsDb a = templateParamsDb.get(e.getKey());
+        if (a == null) {
+          a = new ActivityTemplateParamsDb();
+          a.name = e.getKey();
+          a.value = e.getValue();
+          a.activity = this;
+          // a.activities = Lists.newArrayList();
+          // a.activities.add(this);
+          templateParamsDb.put(e.getKey(), a);
+        } else {
+          a.value = e.getValue();
+        }
+      }
+      // remove old entries
+      List<String> toRemove = Lists.newArrayList();
+      for (Entry<String, ActivityTemplateParamsDb> e : templateParamsDb
+          .entrySet()) {
+        if (!templateParams.containsKey(e.getKey())) {
+          toRemove.add(e.getKey());
+        }
+      }
+      for (String r : toRemove) {
+        templateParamsDb.remove(r);
+      }
+    }
+  }
+
+  /**
+   * Hook into the post load event in JPA to take the database fields and load
+   * the transient fields prior to making the object available to java.
+   */
+  @PostLoad
+  public void loadTransientFields() {
+    templateParams = new MapMaker().makeMap();
+    for (Entry<String, ActivityTemplateParamsDb> e : templateParamsDb
+        .entrySet()) {
+      templateParams.put(e.getKey(), e.getValue().value);
+    }
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/ActivityTemplateParamsDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ActivityTemplateParamsDb.java
new file mode 100644
index 0000000..6205dc7
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ActivityTemplateParamsDb.java
@@ -0,0 +1,96 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.CascadeType.ALL;
+import static javax.persistence.GenerationType.IDENTITY;
+
+import org.apache.shindig.social.core.model.ActivityDb;
+import org.apache.shindig.social.opensocial.model.Activity;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.Table;
+import javax.persistence.Version;
+
+/**
+ *
+ */
+@Entity
+@Table(name = "template_params")
+public class ActivityTemplateParamsDb implements DbObject {
+  /**
+   * The internal object ID used for references to this object. Should be
+   * generated by the underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "oid")
+  protected long objectId;
+
+  /**
+   * An optimistic locking field.
+   */
+  @Version
+  @Column(name = "version")
+  protected long version;
+
+  /**
+   * Create a link to the activities joining activity_id here to oid in
+   * activities.
+   */
+
+  @ManyToOne(targetEntity = ActivityDb.class, cascade = ALL)
+  @JoinColumn(name = "activity_id", referencedColumnName = "oid")
+  protected Activity activity;
+  // TODO: <openjpa-1.2.0-r422266:683325 fatal user error>
+  // org.apache.openjpa.persistence.ArgumentException: The type of field
+  // "org.apache.shindig.graaasp.jpa.ActivityTemplateParamsDb.activities"
+  // isn't supported
+  // by declared persistence strategy "ManyToOne". Please choose a different
+  // strategy.
+
+  /**
+   * The name of the value in the template parameters.
+   */
+  @Basic
+  @Column(name = "template_name")
+  protected String name;
+
+  /**
+   * The value of the parameter.
+   */
+  @Basic
+  @Column(name = "template_value")
+  protected String value;
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.core.model.DbObject#getObjectId()
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/AddressDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AddressDb.java
new file mode 100644
index 0000000..59c9930
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AddressDb.java
@@ -0,0 +1,381 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Address;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.DiscriminatorColumn;
+import javax.persistence.DiscriminatorValue;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.Inheritance;
+import javax.persistence.InheritanceType;
+import javax.persistence.NamedQuery;
+import javax.persistence.OneToMany;
+import javax.persistence.Table;
+import javax.persistence.Version;
+import javax.persistence.Transient;
+
+import java.util.List;
+
+/**
+ * Address storage, stored in "address", may be joined with other subclasses and if so
+ * "address_usage" will contain the subclass discriminatory value. 
+ * This might also be "sharedaddress" if this address is shared.
+ */
+@Entity
+@Table(name = "addresses")
+@Inheritance(strategy = InheritanceType.JOINED)
+@DiscriminatorColumn(name = "address_usage")
+@DiscriminatorValue(value = "sharedaddress")
+@NamedQuery(name = AddressDb.FINDBY_POSTCODE, 
+    query = "select a from AddressDb a where a.postalCode = :postalcode ")
+public class AddressDb implements Address, DbObject {
+  /**
+   * Name of the JPA query to find addresses by postcode
+   */
+  public static final String FINDBY_POSTCODE = "q.address.findbypostcode";
+
+  /**
+   * name of the postcode parameter used in named queries (JPA)
+   */
+  public static final String PARAM_POSTCODE = "postalcode";
+
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "id")
+  private long objectId;
+
+  /**
+   * An optimistic locking field
+   */
+  // @Version
+  // @Column(name = "version")
+  @Transient
+  protected long version;
+
+  /**
+   * People may be at this address, this is a list of people who are currently at this address.
+   */
+  // @OneToMany(targetEntity = UserDb.class, mappedBy = "currentLocation")
+  @Transient
+  private List<Person> atLocation;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Address
+   */
+  @Basic
+  @Column(name = "country", length = 255)
+  private String country;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Address
+   */
+  @Basic
+  @Column(name = "latitude")
+  private Float latitude;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Address
+   */
+  @Basic
+  @Column(name = "longitude")
+  private Float longitude;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Address
+   */
+  @Basic
+  @Column(name = "locality", length = 255)
+  private String locality;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Address
+   */
+  @Basic
+  @Column(name = "postal_code", length = 255)
+  private String postalCode;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Address
+   */
+  // @Basic
+  // @Column(name = "region", length = 255)
+  @Transient
+  private String region;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Address
+   */
+  @Basic
+  @Column(name = "street_address", length = 255)
+  private String streetAddress;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Address
+   */
+  @Basic
+  @Column(name = "type", length = 255)
+  private String type;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Address
+   */
+  // @Basic
+  // @Column(name = "formatted", length = 255)
+  @Transient
+  private String formatted;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Address
+   */
+  // @Basic
+  // @Column(name = "primary_address")
+  @Transient
+  private Boolean primary;
+
+  /**
+   *  default constructor
+   */
+  public AddressDb() {
+  }
+
+  /**
+   * Create an address from the formatted address, no parsing of the address will be performed.
+   * @param formatted the formatted address.
+   */
+  public AddressDb(String formatted) {
+    this.formatted = formatted;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#getCountry()
+   */
+  public String getCountry() {
+    return country;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#setCountry(java.lang.String)
+   */
+  public void setCountry(String country) {
+    this.country = country;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#getLatitude()
+   */
+  public Float getLatitude() {
+    return latitude;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#setLatitude(java.lang.Float)
+   */
+  public void setLatitude(Float latitude) {
+    this.latitude = latitude;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#getLocality()
+   */
+  public String getLocality() {
+    return locality;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#setLocality(java.lang.String)
+   */
+  public void setLocality(String locality) {
+    this.locality = locality;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#getLongitude()
+   */
+  public Float getLongitude() {
+    return longitude;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#setLongitude(java.lang.Float)
+   */
+  public void setLongitude(Float longitude) {
+    this.longitude = longitude;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#getPostalCode()
+   */
+  public String getPostalCode() {
+    return postalCode;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#setPostalCode(java.lang.String)
+   */
+  public void setPostalCode(String postalCode) {
+    this.postalCode = postalCode;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#getRegion()
+   */
+  public String getRegion() {
+    return region;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#setRegion(java.lang.String)
+   */
+  public void setRegion(String region) {
+    this.region = region;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#getStreetAddress()
+   */
+  public String getStreetAddress() {
+    return streetAddress;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#setStreetAddress(java.lang.String)
+   */
+  public void setStreetAddress(String streetAddress) {
+    this.streetAddress = streetAddress;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#getType()
+   */
+  public String getType() {
+    return type;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#setType(java.lang.String)
+   */
+  public void setType(String type) {
+    this.type = type;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#getFormatted()
+   */
+  public String getFormatted() {
+    return formatted;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#setFormatted(java.lang.String)
+   */
+  public void setFormatted(String formatted) {
+    this.formatted = formatted;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#getPrimary()
+   */
+  public Boolean getPrimary() {
+    return primary;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#setPrimary(java.lang.Boolean)
+   */
+  public void setPrimary(Boolean primary) {
+    this.primary = primary;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+  /**
+   * @return the atLocation
+   */
+  public List<Person> getAtLocation() {
+    return atLocation;
+  }
+
+  /**
+   * @param atLocation the atLocation to set
+   */
+  public void setAtLocation(List<Person> atLocation) {
+    this.atLocation = atLocation;
+  }
+  
+  /**
+   * @return the objectId
+   */
+  public Person getPerson() {
+    return null;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public void setPerson(Person person) {
+    // this.person = person;
+  }
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/AddressImpl.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AddressImpl.java
index 2279558..c8d5048 100644
--- a/java/social-api/src/main/java/org/apache/shindig/social/core/model/AddressImpl.java
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AddressImpl.java
@@ -18,6 +18,7 @@
 package org.apache.shindig.social.core.model;
 
 import org.apache.shindig.social.opensocial.model.Address;
+import org.apache.shindig.social.opensocial.model.Person;
 
 /**
  * Default representation of an {@link org.apache.shindig.social.opensocial.model.Address}
@@ -129,4 +130,8 @@ public class AddressImpl implements Address {
   public void setPrimary(Boolean primary) {
     this.primary = primary;
   }
+  
+  public void setPerson(Person person) {
+    // this.person = person;
+  }
 }
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/AppDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AppDb.java
new file mode 100644
index 0000000..b7317d1
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AppDb.java
@@ -0,0 +1,124 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+import org.apache.shindig.social.core.model.ApplicationPropertyDb;
+import org.apache.shindig.social.opensocial.model.ListField;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.MapKey;
+import javax.persistence.OneToMany;
+import javax.persistence.Table;
+import javax.persistence.Version;
+
+import java.util.Map;
+
+/**
+ * Stores information about apps
+ */
+@Entity
+@Table(name = "app")
+public class AppDb implements DbObject {
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "oid")
+  protected long objectId;
+
+  /**
+   * An optimistic locking field.
+   */
+  @Version
+  @Column(name = "version")
+  protected long version;
+
+
+  /**
+   * The app has properties.
+   */
+  @OneToMany(targetEntity = ApplicationPropertyDb.class, mappedBy = "application")
+  @MapKey(name = "type")
+  protected Map<String, ListField> properties;
+
+
+  /**
+   * Each Application has an Id
+   */
+  @Basic
+  @Column(name = "id", length = 255)
+  protected String id;
+
+
+  /**
+   * @return the properties
+   */
+  public Map<String, ListField> getProperties() {
+    return properties;
+  }
+
+
+  /**
+   * @param properties the properties to set
+   */
+  public void setProperties(Map<String, ListField> properties) {
+    this.properties = properties;
+  }
+
+
+  /**
+   * @return the id
+   */
+  public String getId() {
+    return id;
+  }
+
+
+  /**
+   * @param id the id to set
+   */
+  public void setId(String id) {
+    this.id = id;
+  }
+
+
+  /**
+   * @return the version
+   */
+  public long getVersion() {
+    return version;
+  }
+
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/AppdataDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AppdataDb.java
new file mode 100644
index 0000000..bbd75f2
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AppdataDb.java
@@ -0,0 +1,191 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.CascadeType.ALL;
+import static javax.persistence.GenerationType.IDENTITY;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.MapMaker;
+
+
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.MapKey;
+import javax.persistence.OneToMany;
+import javax.persistence.PostLoad;
+import javax.persistence.PrePersist;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+
+
+/**
+ * An app data map is the map of data for a single key within an app.
+ */
+@Entity
+@Table(name="appdatas")
+public class AppdataDb implements DbObject {
+  /**
+   * The object needs to be seializable (map).
+   */
+  private static final long serialVersionUID = 8017568825925047318L;
+
+  public static final String FINDBY_ALL_GROUP = null;
+
+  public static final String FINDBY_FRIENDS_GROUP = "select ad from AppdataDb ad where ad.personId in (select f.friend.id from PersonDb p, FriendDb f where p.objectId = f.person.objectId and ";
+
+  public static final String FINDBY_GROUP_GROUP = null;
+
+  public static final String FINDBY_SELF_GROUP = "select ad from AppdataDb ad where ";
+
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "id")
+  protected long id;
+
+  @Basic
+  @Column(name = "app_id")
+  protected long AppId;
+
+  /**
+   * A Application Data Map belongs to a set of maps associated with an app.
+   * The link from Application to DataMap is not navigable since it may contain 1000's of entries.
+   */
+  // @ManyToOne(targetEntity=AppDb.class)
+  // @JoinColumn(name="app_id", referencedColumnName="oid")
+  @Transient
+  protected AppDb app;
+
+  @Basic
+  @Column(name="context_id")
+  protected long contextId;
+
+  @Basic
+  @Column(name="context_type", length=255)
+  protected String contextType;
+  
+  @Basic
+  @Column(name="name", length=255)
+  protected String name;
+  
+  
+  @Basic
+  @Column(name="value", length=4096)
+  protected String value;
+  
+
+  /**
+   * @return the id
+   */
+  public long getId() {
+    return id;
+  }
+  
+  /**
+   * @return the id
+   */
+  public long getObjectId() {
+    return id;
+  }
+  
+  /**
+   * @return the AppId
+   */
+  public long getAppId() {
+    return AppId;
+  }
+
+  /**
+   * @param AppId to set
+   */
+  public void setAppId(long AppId) {
+    this.AppId = AppId;
+  }
+
+  /**
+   * @return the contextId
+   */
+  public long getContextId() {
+    return contextId;
+  }
+
+  /**
+   * @param contextId the contextId to set
+   */
+  public void setContextId(long contextId) {
+    this.contextId = contextId;
+  }
+  
+  /**
+   * @return the contextType
+   */
+  public String getContextType() {
+    return contextType;
+  }
+
+  /**
+   * @param contextType the contextType to set
+   */
+  public void setContextType(String contextType) {
+    this.contextType = contextType;
+  }
+  
+  /**
+   * @return the name
+   */
+  public String getName() {
+    return name;
+  }
+
+  /**
+   * @param name the name to set
+   */
+  public void setName(String name) {
+    this.name = name;
+  }
+  
+  /**
+   * @return the value
+   */
+  public String getValue() {
+    return value;
+  }
+
+  /**
+   * @param value the value to set
+   */
+  public void setValue(String value) {
+    this.value = value;
+  }
+  
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/ApplicationDataMapDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ApplicationDataMapDb.java
new file mode 100644
index 0000000..fe79c37
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ApplicationDataMapDb.java
@@ -0,0 +1,239 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.CascadeType.ALL;
+import static javax.persistence.GenerationType.IDENTITY;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.MapMaker;
+
+import org.apache.shindig.social.core.model.ApplicationDataMapValueDb;
+import org.apache.shindig.social.core.model.WidgetDb;
+
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.MapKey;
+import javax.persistence.OneToMany;
+import javax.persistence.PostLoad;
+import javax.persistence.PrePersist;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+
+
+/**
+ * An application data map is the map of data for a single key within an application.
+ */
+@Entity
+@Table(name="application_datamaps")
+public class ApplicationDataMapDb implements DbObject {
+  /**
+   * The object needs to be seializable (map).
+   */
+  private static final long serialVersionUID = 8017568825925047318L;
+
+  public static final String FINDBY_ALL_GROUP = null;
+
+  public static final String FINDBY_FRIENDS_GROUP = "select am from ApplicationDataMapDb am where am.contextType = 'User' and am.contextId in (select f.friend.id from PersonDb p, FriendDb f where p.objectId = f.person.objectId and ";
+
+  public static final String FINDBY_GROUP_GROUP = null;
+
+  public static final String FINDBY_SELF_GROUP = "select am from ApplicationDataMapDb am where ";
+
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "id")
+  protected long objectId;
+
+  /**
+   * A Application Data Map belongs to a set of maps associated with an application.
+   * The link from Application to DataMap is not navigable since it may contain 1000's of entries.
+   */
+  // @ManyToOne(targetEntity=WidgetDb.class)
+  // @JoinColumn(name="application_id", referencedColumnName="id")
+  // protected WidgetDb application;
+  @Basic
+  @Column(name="application_id")
+  protected long applicationId;
+
+  /**
+   * Create map using ApplicationDataMapValueDb such that ApplicationDataMapDb are joined on oid ->
+   * application_datamap_id and then the name value becomes the key, and the value becomes the value
+   * unfortunately JPA wont do Map<String,String> so this is handled in the prePersist and postLoad
+   * hook.
+   */
+  @OneToMany(targetEntity=ApplicationDataMapValueDb.class, mappedBy="applicationDataMap", cascade = ALL)
+  @MapKey(name="name")
+  protected Map<String, ApplicationDataMapValueDb> valuesDb = new MapMaker().makeMap();
+
+  /**
+   * The transient store for values loaded by the postLoad hook and persisted by the
+   * prePersist hook.
+   */
+  @Transient
+  protected Map<String, String> values;
+
+  @Basic
+  @Column(name="context_id", length=255)
+  protected long contextId;
+
+  @Basic
+  @Column(name="context_type", length=255)
+  protected String contextType;
+
+  /**
+   * persist the state of object before sending to the db.
+   */
+  @PrePersist
+  public void prePersist() {
+    if (values == null) {
+      return;
+    }
+    // add new entries
+    for (Entry<String, String> e : values.entrySet()) {
+      ApplicationDataMapValueDb a = valuesDb.get(e.getKey());
+      if (a == null) {
+        a = new ApplicationDataMapValueDb();
+        a.name = e.getKey();
+        a.value = e.getValue();
+        a.applicationDataMap = this;
+        valuesDb.put(e.getKey(), a);
+      } else {
+        a.value = e.getValue();
+      }
+    }
+    // remove old entries
+    List<String> toRemove = Lists.newArrayList();
+    for (Entry<String, ApplicationDataMapValueDb> e : valuesDb.entrySet()) {
+      if (!values.containsKey(e.getKey())) {
+        toRemove.add(e.getKey());
+      }
+    }
+    for (String r : toRemove) {
+      valuesDb.remove(r);
+    }
+  }
+
+  /**
+   * set the state of the object after load
+   */
+  @PostLoad
+  public void postLoad() {
+    values = new MapMaker().makeMap();
+    for (Entry<String, ApplicationDataMapValueDb> e : valuesDb.entrySet()) {
+      values.put(e.getKey(), e.getValue().value);
+    }
+  }
+
+  // /**
+  //  * @return the application
+  //  */
+  // public WidgetDb getApplication() {
+  //   return application;
+  // }
+  // 
+  // /**
+  //  * @param applicationData the applicationData to set
+  //  */
+  // public void setApplication(WidgetDb application) {
+  //   this.application = application;
+  // }
+
+  /**
+   * @return the values
+   */
+  public Map<String, String> getValues() {
+    return values;
+  }
+
+  /**
+   * @param values the values to set
+   */
+  public void setValues(Map<String, String> values) {
+    if (values == null) {
+      this.values = new MapMaker().makeMap();
+    } else {
+      this.values = values;
+    }
+  }
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+  /**
+   * @return the contextId
+   */
+  public long getContextId() {
+    return contextId;
+  }
+
+  /**
+   * @param contextId the contextId to set
+   */
+  public void setContextId(long contextId) {
+    this.contextId = contextId;
+  }
+
+  /**
+   * @return the contextType
+   */
+  public String getContextType() {
+    return contextType;
+  }
+
+  /**
+   * @param contextType the contextType to set
+   */
+  public void setContextType(String contextType) {
+    this.contextType = contextType;
+  }
+  
+  /**
+   * @return the applicationId
+   */
+  public long getApplicationId() {
+    return applicationId;
+  }
+
+  /**
+   * @param applicationId the applicationId to set
+   */
+  public void setApplicationId(long applicationId) {
+    this.applicationId = applicationId;
+  }
+  
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/ApplicationDataMapValueDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ApplicationDataMapValueDb.java
new file mode 100644
index 0000000..1d5fd06
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ApplicationDataMapValueDb.java
@@ -0,0 +1,118 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+import org.apache.shindig.social.core.model.ApplicationDataMapDb;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.Table;
+import javax.persistence.Version;
+
+/**
+ * The final storage of data in the application datamap. Values are limited here to 4K in size.
+ */
+@Entity
+@Table(name="application_datavalues")
+public class ApplicationDataMapValueDb implements DbObject {
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "id")
+  protected long objectId;
+
+  /**
+   * Each entry is associated with an application Data Map
+   */
+  @ManyToOne(targetEntity=ApplicationDataMapDb.class)
+  @JoinColumn(name="application_datamap_id", referencedColumnName="id")
+  protected ApplicationDataMapDb applicationDataMap;
+  
+  /**
+   * Each entry has a name
+   */
+  @Basic
+  @Column(name="name", length=255)
+  protected String name;
+  
+  /**
+   * Each entry has a value (4K limit to size)
+   */
+  @Basic
+  @Column(name="value", length=4094)
+  protected String value;
+
+  /**
+   * @return the applicationDataMap
+   */
+  public ApplicationDataMapDb getApplicationDataMap() {
+    return applicationDataMap;
+  }
+
+  /**
+   * @param applicationDataMap the applicationDataMap to set
+   */
+  public void setApplicationDataMap(ApplicationDataMapDb applicationDataMap) {
+    this.applicationDataMap = applicationDataMap;
+  }
+
+  /**
+   * @return the name
+   */
+  public String getName() {
+    return name;
+  }
+
+  /**
+   * @param name the name to set
+   */
+  public void setName(String name) {
+    this.name = name;
+  }
+
+  /**
+   * @return the value
+   */
+  public String getValue() {
+    return value;
+  }
+
+  /**
+   * @param value the value to set
+   */
+  public void setValue(String value) {
+    this.value = value;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/ApplicationPropertyDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ApplicationPropertyDb.java
new file mode 100644
index 0000000..bb2442b
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ApplicationPropertyDb.java
@@ -0,0 +1,59 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.PrimaryKeyJoinColumn;
+import javax.persistence.Table;
+
+import org.apache.shindig.social.core.model.AppDb;
+import org.apache.shindig.social.core.model.ListFieldDb;
+
+/**
+ * This is a property of an application, extending the listfield type, and using the type property
+ * to perform the mapping. Main storage is in the listfield table, but application property stores
+ * the details of the properties of the application.
+ */
+@Entity
+@Table(name = "application_property")
+@PrimaryKeyJoinColumn(name = "oid")
+public class ApplicationPropertyDb extends ListFieldDb {
+  /**
+   * The application  relationship connected with this property.
+   */
+  @ManyToOne(targetEntity = AppDb.class)
+  @JoinColumn(name = "application_id", referencedColumnName = "oid")
+  protected AppDb application;
+
+  /**
+   * @return the application
+   */
+  public AppDb getApplication() {
+    return application;
+  }
+
+  /**
+   * @param application the application to set
+   */
+  public void setApplication(AppDb application) {
+    this.application = application;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/AssetDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AssetDb.java
new file mode 100644
index 0000000..d24cef4
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AssetDb.java
@@ -0,0 +1,519 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.CascadeType.ALL;
+import static javax.persistence.CascadeType.MERGE;
+import static javax.persistence.CascadeType.PERSIST;
+import static javax.persistence.CascadeType.REFRESH;
+import static javax.persistence.GenerationType.IDENTITY;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
+import org.apache.shindig.protocol.model.Enum;
+import org.apache.shindig.protocol.model.FilterOperation;
+import org.apache.shindig.social.opensocial.model.Account;
+import org.apache.shindig.social.opensocial.model.Address;
+import org.apache.shindig.social.opensocial.model.BodyType;
+import org.apache.shindig.social.opensocial.model.Drinker;
+import org.apache.shindig.social.opensocial.model.ListField;
+import org.apache.shindig.social.opensocial.model.LookingFor;
+import org.apache.shindig.social.opensocial.model.Name;
+import org.apache.shindig.social.opensocial.model.NetworkPresence;
+import org.apache.shindig.social.opensocial.model.Organization;
+import org.apache.shindig.social.opensocial.model.Person;
+import org.apache.shindig.social.opensocial.model.Document;
+import org.apache.shindig.social.opensocial.model.Smoker;
+import org.apache.shindig.social.opensocial.model.Url;
+import org.apache.shindig.social.opensocial.model.Attachment;
+import org.apache.shindig.social.core.model.AttachmentDb;
+
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.JoinTable;
+import javax.persistence.ManyToMany;
+import javax.persistence.ManyToOne;
+import javax.persistence.NamedQueries;
+import javax.persistence.NamedQuery;
+import javax.persistence.OneToMany;
+import javax.persistence.OneToOne;
+import javax.persistence.PostLoad;
+import javax.persistence.PrePersist;
+import javax.persistence.Table;
+import javax.persistence.Temporal;
+import javax.persistence.TemporalType;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+
+import com.google.inject.name.Named;
+import com.google.inject.Inject;
+
+/**
+ * Default Implementation of the Person object in the org.apache.shindig.graaasp.jpa.
+ */
+@Entity
+@Table(name = "assets")
+@NamedQueries(value = {
+    @NamedQuery(name = AssetDb.FINDBY_DOCUMENTID,
+        query = "select a from AssetDb a where a.id = :id "),
+    @NamedQuery(name = AssetDb.FINDBY_LIKE_DOCUMENTID,
+        query = "select a from AssetDb a where a.id like :id") })
+public class AssetDb implements Document, DbObject {
+
+  public static final String GRAASP_URL = System.getProperty("shindig.container_url");
+
+  public static final String FINDBY_DOCUMENTID = "q.asset.findbyassetid";
+
+  public static final String PARAM_DOCUMENTID = "id";
+
+  public static final String FINDBY_LIKE_DOCUMENTID = "q.asset.findbylikeassetid";
+
+  private static final String INTERESTS_PROPERTY = "interest";
+
+  private static final Map<String, FilterSpecification> FILTER_COLUMNS =
+    new HashMap<String, FilterSpecification>();
+
+  private static final FilterOperation[] ALL_FILTEROPTIONS = new FilterOperation[] {
+      FilterOperation.equals, FilterOperation.contains, FilterOperation.present,
+      FilterOperation.startsWith };
+  private static final FilterOperation[] NUMERIC_FILTEROPTIONS = new FilterOperation[] {
+      FilterOperation.equals, FilterOperation.present };
+  @SuppressWarnings("unused")
+  private static final FilterOperation[] EQUALS_FILTEROPTIONS =
+    new FilterOperation[] { FilterOperation.equals };
+
+  static {
+    FILTER_COLUMNS.put("displayName", new FilterSpecification("displayName", ALL_FILTEROPTIONS));
+
+    // the following are special operations which are accepted, but work differently
+    FILTER_COLUMNS.put("topFriends", new FilterSpecification());
+    FILTER_COLUMNS.put("hasApp", new FilterSpecification());
+  }
+
+  private static final FilterCapability FILTER_CAPABILITY = new FilterCapability() {
+    /**
+     * {@inheritDoc}
+     */
+    public String findFilterableProperty(String fieldName, FilterOperation filterOperation) {
+      FilterSpecification spec = FILTER_COLUMNS.get(fieldName);
+      if (spec != null) {
+        return spec.translateProperty(filterOperation);
+      }
+      return null;
+    }
+
+  };
+
+  public static final String JPQL_FINDALLPERSON = null;
+
+  // TODO The commented out query supports sorting by friend.score but needs a join with FriendDb which returns duplicates.
+  // Using 'group by' to avoid duplicates doesn't work in HSQLDB or Derby - causes a "Not in aggregate function or group by clause" jdbc exception.
+  // public static final String JPQL_FINDPERSON_BY_FRIENDS = "select p from PersonDb p join FriendDb f on p.objectId = f.friend.objectId where p.objectId in (select f.friend.objectId from PersonDb p, FriendDb f where p.objectId = f.person.objectId and ";
+  public static final String JPQL_FINDPERSON_BY_FRIENDS = "select p from PersonDb p where p.objectId in (select f.friend.objectId from PersonDb p, FriendDb f where p.objectId = f.person.objectId and ";
+
+  public static final Object JPQL_FINDPERSON_BY_GROUP = null;
+
+  public static final Object JPQL_FINDDOCUMENT = "select a from AssetDb a where ";
+  public static final Object JPQL_FINDDOCUMENTS = "select a from AssetDb a where ";
+
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "id")
+  private long objectId;
+  
+  /**
+   * The internal parentId and parentType used for references to the parent of a asset.
+   */
+  @Basic
+  @Column(name = "parent_id", length = 255)
+  private String parentId;
+  
+  @Basic
+  @Column(name = "parent_type", length = 255)
+  protected String parentType;
+
+  @OneToOne(targetEntity = AttachmentDb.class, mappedBy = "document", cascade = ALL)
+  protected Attachment attachment;
+
+  /**
+   * An optimistic locking field.
+   */
+
+  @Basic
+  @Column(name = "entity", length = 255)
+  protected String documentEntity;
+  
+  @Basic
+  @Column(name = "format_settings_type", length = 255)
+  protected String documentType;
+
+  @Transient
+  protected String author;
+  
+  @Transient
+  protected String authorEmail;
+
+  @Basic
+  @Column(name = "name", length = 255)
+  private String displayName;
+
+  @Basic
+  @Column(name = "name", length = 255, insertable = false, updatable = false)
+  private String name;
+  
+  @Basic
+  @Column(name = "picture")
+  protected String picture;
+  
+  
+  /**
+   *
+   */
+  @Transient
+  protected Integer height;
+
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "description", length = 255)
+  protected String description;
+
+
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "id", length = 255, insertable = false, updatable = false)
+  protected String id;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<ListField> ims;
+
+
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "updated_at")
+  @Temporal(TemporalType.TIMESTAMP)
+  protected Date updated;
+
+  /**
+   *
+   */
+  @Transient
+  protected String screenshotUrl;
+  
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "external_thumbnail", length = 255)
+  protected String thumbnailUrl;
+
+
+  /**
+   *
+   */
+  @Transient
+  protected Long utcOffset;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> tags;
+
+  // Note: Not in the opensocial js person object directly
+  @Transient
+  private boolean isOwner = false;
+
+  public AssetDb() {
+  }
+
+  public AssetDb(String id, String displayName) {
+    this.id = id;
+    this.displayName = displayName;
+  }
+
+  public Attachment getAttachment() {
+    return attachment;
+  }
+
+  public void setAttachment(Attachment attachment) {
+    this.attachment = attachment;
+  }
+
+  public String getDocumentType() {
+	  return documentType;
+  }
+
+  public void setDocumentType(String documentType) {
+	  this.documentType = documentType;
+  }
+	  
+  public String getDocumentEntity() {
+    return documentEntity;
+  }
+
+  public void setDocumentEntity(String documentEntity) {
+    this.documentEntity = documentEntity;
+  }
+
+  public String getAuthor() {
+    return author;
+  }
+
+  public void setAuthor(String author) {
+    this.author = author;
+  }
+
+  public Integer getHeight() {
+    return height;
+  }
+
+  public void setHeight(Integer height) {
+    this.height = height;
+  }
+
+  public String getScreenshotUrl() {
+    return screenshotUrl;
+  }
+
+  public void setScreenshotUrl(String screenshotUrl) {
+    this.screenshotUrl = screenshotUrl;
+  }
+  
+  public String getProfileUrl() {
+    return GRAASP_URL+"/#item=asset_"+String.valueOf(objectId);     
+  }
+
+  public void setProfileUrl(String profileUrl) {
+    
+  }
+  
+  public String getThumbnailUrl() {
+    String pic = picture;
+    if (pic == null || pic.equals("")) {
+      return GRAASP_URL+"/images/pics/asset_thumb.png";
+    }
+    
+    return GRAASP_URL+"/asset/picture/"+String.valueOf(objectId)+"/thumb/"+pic;        
+  }
+
+  public void setThumbnailUrl(String thumbnailUrl) {
+    this.thumbnailUrl = thumbnailUrl;
+  }
+
+  public String getAuthorEmail() {
+    return authorEmail;
+  }
+
+  public void setAuthorEmail(String authorEmail) {
+    this.authorEmail = authorEmail;
+  }                               
+
+  public List<String> getTags() {
+    return tags;
+  }
+
+  public void setTags(List<String> tags) {
+    this.tags = tags;
+  }
+
+  public String getParentId() {
+    return this.parentId;
+  }
+
+  public void setParentId(String parentId) {
+    this.parentId = parentId;
+  }
+  
+  public String getParentType() {
+	  if(this.parentType.equals("User")){
+		  return "@person";
+	  }else{
+		  return "@space";
+	  }
+  }
+
+  public void setParentType(String parentType) {
+    this.parentType = parentType;
+  }
+  
+  public String getName() {
+    return this.name;
+  }
+
+  public void setName(String name) {
+    this.name = name;
+  }
+
+  
+  public String getId() {
+    return id;
+  }
+
+  public void setId(String id) {
+    this.id = id;
+  }
+
+  public List<ListField> getIms() {
+    return ims;
+  }
+
+  public void setIms(List<ListField> ims) {
+    this.ims = ims;
+  }
+
+  public Date getUpdated() {
+    if (updated == null) {
+      return null;
+    }
+    return new Date(updated.getTime());
+  }
+
+  public void setUpdated(Date updated) {
+    if (updated == null) {
+      this.updated = null;
+    } else {
+      this.updated = new Date(updated.getTime());
+    }
+  }
+
+
+  public String getDescription() {
+    return description;
+  }
+
+  public void setDescription(String description) {
+    this.description = description;
+  }
+  
+  public Long getUtcOffset() {
+    return utcOffset;
+  }
+
+  public void setUtcOffset(Long utcOffset) {
+    this.utcOffset = utcOffset;
+  }
+
+  public boolean getIsOwner() {
+    return isOwner;
+  }
+
+  public void setIsOwner(boolean isOwner) {
+    this.isOwner = isOwner;
+  }
+
+  // Proxied fields
+
+
+
+  private <T extends ListField> T getListFieldWithType(String type, List<T> list) {
+    if (list != null) {
+      for (T url : list) {
+        if (type.equalsIgnoreCase(url.getType())) {
+          return url;
+        }
+      }
+    }
+
+    return null;
+  }
+
+  private <T extends ListField> List<T> addListField(T field, List<T> list) {
+    if (list == null) {
+      list = Lists.newArrayList();
+    }
+    list.add(field);
+    return list;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return Long.parseLong(id);
+  }
+
+  @PrePersist
+  public void populateDbFields() {
+
+
+  }
+
+  @PostLoad
+  public void loadTransientFields() {
+
+
+  }
+
+  /*
+   * (non-Javadoc)
+   *
+   * @see org.apache.shindig.social.opensocial.model.Person#getDisplayName()
+   */
+  public String getDisplayName() {
+    return displayName;
+  }
+
+  /*
+   * (non-Javadoc)
+   *
+   * @see org.apache.shindig.social.opensocial.model.Person#setDisplayName(java.lang.String)
+   */
+  public void setDisplayName(String displayName) {
+    this.displayName = displayName;
+  }
+
+  public static FilterCapability getFilterCapability() {
+    return FILTER_CAPABILITY;
+
+  }
+
+  /** {@inheritDoc} */
+  public Map<String, ? extends Object> getAppData()
+  {
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public void setAppData( Map<String, ? extends Object> appData )
+  {
+  }
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/AttachmentDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AttachmentDb.java
new file mode 100644
index 0000000..90a0ece
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AttachmentDb.java
@@ -0,0 +1,131 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Attachment;
+import org.apache.shindig.social.opensocial.model.Document;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.DiscriminatorColumn;
+import javax.persistence.DiscriminatorValue;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.Inheritance;
+import javax.persistence.InheritanceType;
+import javax.persistence.NamedQuery;
+import javax.persistence.OneToMany;
+import javax.persistence.OneToOne;
+import javax.persistence.Table;
+import javax.persistence.Version;
+import javax.persistence.Transient;
+import javax.persistence.JoinColumn;
+
+import com.google.inject.Inject;
+import com.google.inject.name.Named;
+import java.util.List;
+
+/**
+ * Attachment storage, stored in "address", may be joined with other subclasses and if so
+ * "address_usage" will contain the subclass discriminatory value. 
+ * This might also be "sharedaddress" if this address is shared.
+ */
+@Entity
+@Table(name = "attachments")
+public class AttachmentDb implements Attachment, DbObject {
+
+  public static final String GRAASP_URL = System.getProperty("shindig.container_url");
+
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "id")
+  private long objectId;
+
+  @Basic
+  @Column(name = "filename", length = 255)
+  private String filename;
+
+  @Basic
+  @Column(name = "size", length = 255)
+  private String size;
+
+  @Basic
+  @Column(name = "content_type", length = 255)
+  private String contentType;
+
+  @OneToOne(targetEntity = AssetDb.class)
+  @JoinColumn(name = "asset_id", referencedColumnName = "id")
+  private Document document;
+
+  public String getUrl() {
+    return GRAASP_URL+"/attachment/download/file/"+String.valueOf(objectId);  
+  }
+
+  public Document getDocument() {
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public void setDocument(Document document) {
+    this.document = document;
+  }
+
+  public String getFilename() {
+    return filename;
+  }
+
+  /** {@inheritDoc} */
+  public void setFilename(String filename) {
+    this.filename = filename;
+  }
+
+  public String getContentType() {
+    return contentType;
+  }
+
+  /** {@inheritDoc} */
+  public void setContentType(String contentType) {
+    this.contentType = contentType;
+  }
+
+  public String getSize() {
+    return size;
+  }
+
+  /** {@inheritDoc} */
+  public void setSize(String size) {
+    this.size = size;
+  }
+
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/AttachmentImpl.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AttachmentImpl.java
new file mode 100644
index 0000000..4ade15b
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AttachmentImpl.java
@@ -0,0 +1,63 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.social.opensocial.model.Attachment;
+
+/**
+ * Default representation of an {@link org.apache.shindig.social.opensocial.model.Attachment}
+ */
+public class AttachmentImpl implements Attachment {
+  private String contentType;
+  private String size;
+  private String filename;
+
+  public AttachmentImpl() { }
+
+  public String getFilename() {
+    return filename;
+  }
+
+  public String getUrl() {
+    return "url";
+  }
+
+  /** {@inheritDoc} */
+  public void setFilename(String filename) {
+    this.filename = filename;
+  }
+
+  public String getContentType() {
+    return contentType;
+  }
+
+  /** {@inheritDoc} */
+  public void setContentType(String contentType) {
+    this.contentType = contentType;
+  }
+
+  public String getSize() {
+    return size;
+  }
+
+  /** {@inheritDoc} */
+  public void setSize(String size) {
+    this.size = size;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/BodyTypeDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/BodyTypeDb.java
new file mode 100644
index 0000000..128d2f7
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/BodyTypeDb.java
@@ -0,0 +1,222 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+
+
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+import org.apache.shindig.social.core.model.BodyTypeDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.BodyType;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.NamedQuery;
+import javax.persistence.OneToMany;
+import javax.persistence.Table;
+import javax.persistence.Version;
+import javax.persistence.Transient;
+
+import java.util.List;
+
+/**
+ * The body type entity, stored in "body_type" 
+ *
+ */
+@Entity
+@Table(name = "body_type")
+@NamedQuery(name = BodyTypeDb.FINDBY_HEIGHT,
+    query = "select b from BodyTypeDb b where b.height = :height ")
+public class BodyTypeDb implements BodyType, DbObject {
+  /**
+   * Name of the JPA query to find BodyType by exact height, mainly used in testing.
+   */
+  public static final String FINDBY_HEIGHT = "q.bosytype.findbyheight";
+
+  /**
+   * name of the height parameter in JPA queries.
+   */
+  public static final String PARAM_HEIGHT = "height";
+
+  /**
+   * The internal object ID used for references to this object. Should be generated 
+   * by the underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "oid")
+  private long objectId;
+
+  /**
+   * An optimistic locking field
+   */
+  @Version
+  @Column(name = "version")
+  protected long version;
+
+  // @OneToMany(targetEntity = UserDb.class, mappedBy = "bodyType")
+  @Transient
+  private List<Person> persons;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.BodyType
+   */
+  @Basic
+  @Column(name = "build", length = 255)
+  private String build;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.BodyType
+   */
+  @Basic
+  @Column(name = "eye_color", length = 255)
+  private String eyeColor;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.BodyType
+   */
+  @Basic
+  @Column(name = "hair_color", length = 255)
+  private String hairColor;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.BodyType
+   */
+  @Basic
+  @Column(name = "height")
+  private Float height;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.BodyType
+   */
+  @Basic
+  @Column(name = "weight")
+  private Float weight;
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.BodyType#getBuild()
+   */
+  public String getBuild() {
+    return build;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.BodyType#setBuild(java.lang.String)
+   */
+  public void setBuild(String build) {
+    this.build = build;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.BodyType#getEyeColor()
+   */
+  public String getEyeColor() {
+    return eyeColor;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.BodyType#setEyeColor(java.lang.String)
+   */
+  public void setEyeColor(String eyeColor) {
+    this.eyeColor = eyeColor;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.BodyType#getHairColor()
+   */
+  public String getHairColor() {
+    return hairColor;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.BodyType#setHairColor(java.lang.String)
+   */
+  public void setHairColor(String hairColor) {
+    this.hairColor = hairColor;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.BodyType#getHeight()
+   */
+  public Float getHeight() {
+    return height;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.BodyType#setHeight(java.lang.String)
+   */
+  public void setHeight(Float height) {
+    this.height = height;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.BodyType#getWeight()
+   */
+  public Float getWeight() {
+    return weight;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.BodyType#setWeight(java.lang.String)
+   */
+  public void setWeight(Float weight) {
+    this.weight = weight;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+
+  /**
+   * @return the persons
+   */
+  public List<Person> getPersons() {
+    return persons;
+  }
+
+  /**
+   * @param persons the persons to set
+   */
+  public void setPersons(List<Person> persons) {
+    this.persons = persons;
+  }
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/CompetenceDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/CompetenceDb.java
new file mode 100644
index 0000000..b35011d
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/CompetenceDb.java
@@ -0,0 +1,158 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+import java.util.Date;
+import java.util.List;
+
+import org.apache.shindig.social.opensocial.model.Competence;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.PostLoad;
+import javax.persistence.PrePersist;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+
+import javax.persistence.DiscriminatorValue;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+
+/**
+ * Messages are stored in the message table.
+ */
+@Entity
+@Table(name="person_competences")
+public class CompetenceDb implements Competence, DbObject {
+  /**
+   * The internal object ID used for references to this object. Should be generated
+   * by the underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy=IDENTITY)
+  @Column(name="id")
+  protected long objectId;
+  
+  // In Customer class:
+  // 
+  // @OneToMany(cascade=ALL, mappedBy="customer")
+  // public Set getOrders() { return orders; }
+  // 
+  // In Order class:
+  // 
+  // @ManyToOne
+  // @JoinColumn(name="CUST_ID", nullable=false)
+  // public Customer getCustomer() { return customer; }
+  
+  @ManyToOne(targetEntity=UserDb.class)
+  @JoinColumn(name="user_id", referencedColumnName="id")
+  private Person person;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Message
+   */
+  @Basic
+  @Column(name="topic", length=255)
+  protected String topic;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Message
+   */
+  @Basic
+  @Column(name="value", length=255)
+  protected String value;
+
+  /**
+   * create an empty message.
+   */
+  public CompetenceDb() {
+  }
+
+  /**
+   * Create a message object with body, title and type.
+   * @param topic the body of the message.
+   * @param value the title of the message.
+   */
+  public CompetenceDb(String initTopic, String initValue) {
+    this.topic = initTopic;
+    this.value = initValue;
+  }
+  
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+  
+  /**
+   * @return the objectId
+   */
+  public Person getPerson() {
+    return null;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public void setPerson(Person person) {
+    this.person = person;
+  }
+  
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Message#getBody()
+   */
+  public String getTopic() {
+    return this.topic;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Message#setBody(java.lang.String)
+   */
+  public void setTopic(String topic) {
+    this.topic = topic;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Message#getTitle()
+   */
+  public String getValue() {
+    return this.value;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Message#setTitle(java.lang.String)
+   */
+  public void setValue(String value) {
+    this.value = value;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/DbObject.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/DbObject.java
new file mode 100644
index 0000000..e241c2b
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/DbObject.java
@@ -0,0 +1,32 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+
+/**
+ * All Database objects should implement this, mainly to ensure that each has an
+ * object ID. The object ID can't be set, its generated.
+ */
+public interface DbObject {
+  /**
+   * Get the internal object ID used for references to this object. Should be generated
+   * by the underlying storage mechanism.
+   * @return the ID of the object
+   */
+  long getObjectId();
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/EmailDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/EmailDb.java
new file mode 100644
index 0000000..03be80e
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/EmailDb.java
@@ -0,0 +1,78 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.social.core.model.EmailDb;
+import org.apache.shindig.social.core.model.ListFieldDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.NamedQuery;
+import javax.persistence.PrimaryKeyJoinColumn;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+import javax.persistence.DiscriminatorValue;
+
+
+/**
+ * Email Entity, extends the ListField object (and list_field table), joining on the object ID.
+ * Objects of this type will have "list_field_type" set to EmailDb in list_field
+ */
+@Entity
+@Table(name = "person_emails")
+@PrimaryKeyJoinColumn(name = "id")
+@DiscriminatorValue(value="ListFieldDb")
+@NamedQuery(name = EmailDb.FINDBY_EMAIL, query = "select e from EmailDb e where e.value = :email ")
+public class EmailDb extends ListFieldDb {
+
+  /**
+   * The name of the JPA query to find Email by email address
+   */
+  public static final String FINDBY_EMAIL = "q.emai.findbyemail";
+  /**
+   * The name of the JPA parameter used for email address
+   */
+  public static final String PARAM_EMAIL = "email";
+
+  /**
+   * A list of People who have this address, a human may have more than one person and so may shared
+   * email addresses. Perhaps thats not valid in an implementation, but within this model it is
+   * possible.
+   */
+  @ManyToOne(targetEntity = UserDb.class)
+  @JoinColumn(name = "user_id", referencedColumnName = "id")
+  protected Person person;
+  
+  /**
+   * @return the objectId
+   */
+  public Person getPerson() {
+    return null;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public void setPerson(Person person) {
+    this.person = person;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/EnumDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/EnumDb.java
new file mode 100644
index 0000000..1bd794e
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/EnumDb.java
@@ -0,0 +1,84 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.protocol.model.Enum;
+
+/**
+ * This a utility holder class for Enums to assist in database storage. It does not have any
+ * database tables or persistence associated with it.
+ * 
+ * @param <E> The Enum type.
+ */
+public final class EnumDb<E extends Enum.EnumKey> implements Enum<E> {
+  private String displayValue;
+  private E value = null;
+
+  /**
+   * Constructs a Enum object.
+   * 
+   * @param value EnumKey The key to use
+   * @param displayValue String The display value
+   */
+  public EnumDb(E value, String displayValue) {
+    this.value = value;
+    this.displayValue = displayValue;
+  }
+
+  /**
+   * Constructs a Enum object.
+   * 
+   * @param value The key to use. Will use the value from getDisplayValue() as the display value.
+   */
+  public EnumDb(E value) {
+    this(value, value.getDisplayValue());
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Enum#getDisplayValue()
+   */
+  public String getDisplayValue() {
+    return displayValue;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Enum#setDisplayValue(java.lang.String)
+   */
+  public void setDisplayValue(String displayValue) {
+    this.displayValue = displayValue;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Enum#getValue()
+   */
+  public E getValue() {
+    return value;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Enum#setValue(org.apache.shindig.social.opensocial.model.Enum.EnumKey)
+   */
+  public void setValue(E value) {
+    this.value = value;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/FilterCapability.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/FilterCapability.java
new file mode 100644
index 0000000..0b88053
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/FilterCapability.java
@@ -0,0 +1,37 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.protocol.model.FilterOperation;
+
+/**
+ * Specifies the ability to filter an object
+ */
+public interface FilterCapability {
+  /**
+   * Check to see if the property is filterable on an operation. The final property that is returned
+   * must not be directly based on the fieldName passed in and must be suitable for direct use
+   * within a JPQL statement. (ie don't trust the passed in parameter)
+   * 
+   * @param fieldName the field name that is being filtered, value is not to be trusted.
+   * @param filterOperation the operation being applied to the field.
+   * @return the final property that is being filtered or null is the filter operation specified is
+   *         not applicable
+   */
+  String findFilterableProperty(String fieldName, FilterOperation filterOperation);
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/FilterSpecification.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/FilterSpecification.java
new file mode 100644
index 0000000..b133ea6
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/FilterSpecification.java
@@ -0,0 +1,93 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.protocol.model.FilterOperation;
+
+/**
+ * A FilterSpecifiation encapsulates the Filter operation for a specific field. Name of the target
+ * property based on the operation.
+ */
+public class FilterSpecification {
+
+  public static final String SPECIAL_OPERATION = "special operation";
+  private String finalProperty;
+  private FilterOperation[] filterOptions;
+  private boolean special;
+
+  /**
+   * Create a FilterSpecification with a target final property name and a set of acceptable
+   * operations.
+   *
+   * @param finalProperty the name of the final property on the class as used by JPQL
+   * @param filterOptions an array of operations that may be applied to this property
+   */
+  public FilterSpecification(String finalProperty, FilterOperation[] filterOptions) {
+    this.finalProperty = finalProperty;
+    this.filterOptions = new FilterOperation[filterOptions.length];
+    System.arraycopy(filterOptions, 0, this.filterOptions, 0, filterOptions.length);
+    this.special = false;
+  }
+
+  /**
+   * Create a default filter operation that operates on special terms, ie that is has no filter
+   * mapping and is handled as a special case in the processing. Im this case the finalProperty is
+   * set to a reserved value.
+   */
+  public FilterSpecification() {
+    this.special = true;
+  }
+
+  /**
+   * Convert the property into the final property.
+   *
+   * @param operation the operation that is being used.
+   * @return returns the final property name, or null if the operation is not applicable
+   */
+  public String translateProperty(FilterOperation operation) {
+    if (special) {
+      return SPECIAL_OPERATION;
+    } else {
+      for (FilterOperation fo : filterOptions) {
+        if (fo.equals(operation)) {
+          return finalProperty;
+        }
+      }
+      return null;
+    }
+  }
+
+  /**
+   * If the final property is special, then return true.
+   * @param finalProp the final property
+   * @return true if special
+   */
+  public static boolean isSpecial(String finalProp) {
+    return SPECIAL_OPERATION.equals(finalProp);
+  }
+
+  /**
+   * If the final property is valid, return true.
+   * @param finalProp the final property
+   * @return true if valid.
+   */
+  public static boolean isValid(String finalProp) {
+    return (finalProp != null);
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/FriendDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/FriendDb.java
new file mode 100644
index 0000000..b2d40b1
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/FriendDb.java
@@ -0,0 +1,149 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+import org.apache.shindig.social.core.model.FriendPropertyDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.ListField;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.MapKey;
+import javax.persistence.OneToMany;
+import javax.persistence.PrimaryKeyJoinColumn;
+import javax.persistence.Table;
+import javax.persistence.Version;
+import javax.persistence.Transient;
+
+import java.util.Map;
+
+/**
+ * Fiends relates users to one another with attributes.
+ */
+@Entity 
+@Table(name = "friend")
+@PrimaryKeyJoinColumn(name = "oid") 
+public class FriendDb implements DbObject {
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "oid")
+  protected long objectId;
+
+  /**
+   * An optimistic locking field.
+   */
+  @Version
+  @Column(name = "version")
+  protected long version;
+
+  /**
+   * Someone asserts the friendship.
+   */
+  // @ManyToOne(targetEntity = UserDb.class)
+  // @JoinColumn(name = "person_id", referencedColumnName = "oid")
+  @Transient
+  protected Person person;
+
+  /**
+   * Someone else is the recipient of the friendship.
+   */
+  // @ManyToOne(targetEntity = UserDb.class)
+  // @JoinColumn(name = "friend_id", referencedColumnName = "oid")
+  @Transient
+  protected Person friend;
+
+  @Basic
+  @Column(name="score")
+  protected int score;
+
+  /**
+   * The friendship has properties.
+   */
+  @OneToMany(targetEntity = FriendPropertyDb.class, mappedBy = "friend")
+  @MapKey(name = "type")
+  protected Map<String, ListField> properties;
+
+  /**
+   * @return the person
+   */
+  public Person getPerson() {
+    return person;
+  }
+
+  /**
+   * @param person the person to set
+   */
+  public void setPerson(Person person) {
+    this.person = person;
+  }
+
+  /**
+   * @return the friend
+   */
+  public Person getFriend() {
+    return friend;
+  }
+
+  /**
+   * @param friend the friend to set
+   */
+  public void setFriend(Person friend) {
+    this.friend = friend;
+  }
+
+  /**
+   * @return the properties
+   */
+  public Map<String, ListField> getProperties() {
+    return properties;
+  }
+
+  /**
+   * @param properties the properties to set
+   */
+  public void setProperties(Map<String, ListField> properties) {
+    this.properties = properties;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+  /**
+   * @return the version
+   */
+  public long getVersion() {
+    return version;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/FriendPropertyDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/FriendPropertyDb.java
new file mode 100644
index 0000000..63e40b4
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/FriendPropertyDb.java
@@ -0,0 +1,59 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.PrimaryKeyJoinColumn;
+import javax.persistence.Table;
+
+import org.apache.shindig.social.core.model.FriendDb;
+import org.apache.shindig.social.core.model.ListFieldDb;
+
+/**
+ * This is a property of a friend link, extending the listfield type, and using the type property to
+ * perform the mapping. Main storage is in the listfield table, but friend property stores the
+ * details of the relationship with the friend object.
+ */
+@Entity
+@Table(name = "friend_property")
+@PrimaryKeyJoinColumn(name = "oid")
+public class FriendPropertyDb extends ListFieldDb {
+  /**
+   * The friend relationship connected with this property.
+   */
+  @ManyToOne(targetEntity = FriendDb.class)
+  @JoinColumn(name = "friend_id", referencedColumnName = "oid")
+  protected FriendDb friend;
+
+  /**
+   * @return the friend
+   */
+  public FriendDb getFriend() {
+    return friend;
+  }
+
+  /**
+   * @param friend the friend to set
+   */
+  public void setFriend(FriendDb friend) {
+    this.friend = friend;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/GroupDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/GroupDb.java
new file mode 100644
index 0000000..3a6dbce
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/GroupDb.java
@@ -0,0 +1,172 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+import org.apache.shindig.social.core.model.GroupPropertyDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.ListField;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.JoinTable;
+import javax.persistence.ManyToMany;
+import javax.persistence.ManyToOne;
+import javax.persistence.MapKey;
+import javax.persistence.OneToMany;
+import javax.persistence.Table;
+import javax.persistence.Version;
+import javax.persistence.Transient;
+
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Represents a group in the social database. The assumption in this object is that groups are
+ * associated with individuals and are used by those individuals to manage people.
+ */
+@Entity
+@Table(name = "person_group")
+public class GroupDb implements DbObject {
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "oid")
+  protected long objectId;
+
+  /**
+   * An optimistic locking field.
+   */
+  @Version
+  @Column(name = "version")
+  protected long version;
+
+  /**
+   * There is a single owner of a group.
+   */
+  // @ManyToOne(targetEntity = UserDb.class)
+  // @JoinColumn(name = "person_id", referencedColumnName = "oid")
+  @Transient
+  protected Person owner;
+
+  /**
+   * There are many members of a group.
+   */
+  // @ManyToMany(targetEntity = UserDb.class)
+  // @JoinTable(name = "membership", 
+  //     joinColumns = 
+  //       @JoinColumn(name = "group_id", referencedColumnName = "oid"), 
+  //     inverseJoinColumns = 
+  //       @JoinColumn(name = "person_id", referencedColumnName = "oid"))
+  @Transient
+  protected List<Person> members;
+
+  /**
+   * Each group has a group Id.
+   */
+  @Basic
+  @Column(name = "id", length = 255)
+  protected String id;
+
+  /**
+   * The group has properties.
+   */
+  @OneToMany(targetEntity = GroupPropertyDb.class, mappedBy = "group")
+  @MapKey(name = "type")
+  protected Map<String, ListField> properties;
+
+  /**
+   * @return the owner
+   */
+  public Person getOwner() {
+    return owner;
+  }
+
+  /**
+   * @param owner the owner to set
+   */
+  public void setOwner(Person owner) {
+    this.owner = owner;
+  }
+
+  /**
+   * @return the members
+   */
+  public List<Person> getMembers() {
+    return members;
+  }
+
+  /**
+   * @param members the members to set
+   */
+  public void setMembers(List<Person> members) {
+    this.members = members;
+  }
+
+  /**
+   * @return the id
+   */
+  public String getId() {
+    return id;
+  }
+
+  /**
+   * @param id the id to set
+   */
+  public void setId(String id) {
+    this.id = id;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+  /**
+   * @return the version
+   */
+  public long getVersion() {
+    return version;
+  }
+
+  /**
+   * @return the properties
+   */
+  public Map<String, ListField> getProperties() {
+    return properties;
+  }
+
+  /**
+   * @param properties the properties to set
+   */
+  public void setProperties(Map<String, ListField> properties) {
+    this.properties = properties;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/GroupPropertyDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/GroupPropertyDb.java
new file mode 100644
index 0000000..a1481a4
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/GroupPropertyDb.java
@@ -0,0 +1,62 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.PrimaryKeyJoinColumn;
+import javax.persistence.Table;
+
+import org.apache.shindig.social.core.model.GroupDb;
+import org.apache.shindig.social.core.model.ListFieldDb;
+
+/**
+ * This is a property of a group, extending the listfield type, and using the type property to
+ * perform the mapping. Main storage is in the listfield table, but group property stores the
+ * details of the properties of the group.
+ */
+@Entity
+@Table(name = "group_property")
+@PrimaryKeyJoinColumn(name = "oid")
+public class GroupPropertyDb extends ListFieldDb {
+  /**
+   * The group relationship connected with this property.
+   */
+  @ManyToOne(targetEntity = GroupDb.class)
+  @JoinColumn(name = "group_id", referencedColumnName = "oid")
+  protected GroupDb group;
+
+  /**
+   * @return the group
+   */
+  public GroupDb getGroup() {
+    return group;
+  }
+
+  /**
+   * @param group the group to set
+   */
+  public void setGroup(GroupDb group) {
+    this.group = group;
+  }
+  
+
+
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/ImDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ImDb.java
new file mode 100644
index 0000000..26d1793
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ImDb.java
@@ -0,0 +1,49 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.social.core.model.ListFieldDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.PrimaryKeyJoinColumn;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+
+/**
+ * IM (Instant Message account) Entity, extends the ListField object (and list_field table), joining
+ * on the object ID. Objects of this type will have "list_field_type" set to ImDb in list_field
+ */
+@Entity
+@Table(name = "im")
+@PrimaryKeyJoinColumn(name = "oid")
+public class ImDb extends ListFieldDb {
+
+  /**
+   * The person who owns this IM account. This information is maintained in the database using a
+   * join column "person_id" in the im table that points to oid in the person table.
+   */
+  // @ManyToOne(targetEntity = UserDb.class)
+  // @JoinColumn(name = "person_id", referencedColumnName = "oid")
+  @Transient
+  protected Person person;
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/ListFieldDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ListFieldDb.java
new file mode 100644
index 0000000..4b07e15
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ListFieldDb.java
@@ -0,0 +1,178 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+import org.apache.shindig.social.opensocial.model.ListField;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.DiscriminatorColumn;
+import javax.persistence.DiscriminatorType;
+import javax.persistence.DiscriminatorValue;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.Inheritance;
+import javax.persistence.InheritanceType;
+import javax.persistence.MappedSuperclass;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+
+/**
+ * List fields represent storage of list of fields potentially with a preferred or primary value.
+ * This is the base storage class for all list fields, stored in the lsit_field table. Classes will
+ * extend this class using a join strategy and setting the list_field_type column to the type of
+ * class represented by the record. If there is no type it defaults to ListFieldDb.
+ */
+@MappedSuperclass
+@Table(name="list_fields")
+@Inheritance(strategy=InheritanceType.JOINED)
+@DiscriminatorColumn(name="list_field_type", length=30, discriminatorType=DiscriminatorType.STRING)
+@DiscriminatorValue(value="ListFieldDb")
+public class ListFieldDb implements ListField, DbObject {
+  /**
+   * The internal object ID used for references to this object. Should be generated 
+   * by the underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy=IDENTITY)
+  @Column(name="id")
+  protected long objectId;
+  
+  /**
+   * An optimistic locking field.
+   */
+  // @Version
+  // @Column(name="version")
+  @Transient
+  protected long version;
+
+  
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.ListField
+   */
+  @Basic
+  @Column(name="field_type", length=255)
+  protected String type;
+  
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.ListField
+   */
+  @Basic
+  @Column(name="field_value", length=255)
+  protected String value;
+  
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.ListField
+   */
+  @Basic
+  @Column(name="primary_field")
+  protected Boolean primary;
+
+  /**
+   * Create a list field.
+   */
+  public ListFieldDb() { }
+
+  /**
+   * Create a list field, specifying the type and the value.
+   * @param type the type or name of the field
+   * @param value the value contained in the field.
+   */
+  public ListFieldDb(String type, String value) {
+    this.type = type;
+    this.value = value;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.ListField#getType()
+   */
+  public String getType() {
+    return type;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.ListField#setType(java.lang.String)
+   */
+  public void setType(String type) {
+    this.type = type;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.ListField#getValue()
+   */
+  public String getValue() {
+    return value;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.ListField#setValue(java.lang.String)
+   */
+  public void setValue(String value) {
+    this.value = value;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.ListField#getPrimary()
+   */
+  public Boolean getPrimary() {
+    return primary;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.ListField#setPrimary(java.lang.Boolean)
+   */
+  public void setPrimary(Boolean primary) {
+    this.primary = primary;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.core.model.DbObject#getObjectId()
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+  
+  /**
+   * @return the objectId
+   */
+  public Person getPerson() {
+    return null;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public void setPerson(Person person) {
+    // this.person = person;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/ListFieldImpl.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ListFieldImpl.java
index d5f44d0..1e27c20 100644
--- a/java/social-api/src/main/java/org/apache/shindig/social/core/model/ListFieldImpl.java
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ListFieldImpl.java
@@ -18,6 +18,7 @@
 package org.apache.shindig.social.core.model;
 
 import org.apache.shindig.social.opensocial.model.ListField;
+import org.apache.shindig.social.opensocial.model.Person;
 
 /**
  * ListField data structure
@@ -60,4 +61,8 @@ public class ListFieldImpl implements ListField {
   public void setPrimary(Boolean primary) {
     this.primary = primary;
   }
+  
+  public void setPerson(Person person) {
+    // this.person = person;
+  }
 }
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/MediaItemDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/MediaItemDb.java
new file mode 100644
index 0000000..2c3271d
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/MediaItemDb.java
@@ -0,0 +1,598 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.CascadeType.MERGE;
+import static javax.persistence.CascadeType.PERSIST;
+import static javax.persistence.CascadeType.REFRESH;
+import static javax.persistence.GenerationType.IDENTITY;
+
+import org.apache.shindig.social.core.model.ActivityDb;
+import org.apache.shindig.social.core.model.AddressDb;
+import org.apache.shindig.social.opensocial.model.Activity;
+import org.apache.shindig.social.opensocial.model.Address;
+import org.apache.shindig.social.opensocial.model.MediaItem;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToMany;
+import javax.persistence.ManyToOne;
+import javax.persistence.PostLoad;
+import javax.persistence.PrePersist;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+
+import java.util.List;
+
+/**
+ * Media items are stored in the media_item table, Items may be shared amongst activities and are
+ * related to people.
+ */
+@Entity
+@Table(name = "media_item")
+public class MediaItemDb implements MediaItem, DbObject {
+  /**
+   * The internal object ID used for references to this object. Should be generated
+   * by the underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "oid")
+  private long objectId;
+
+  /**
+   * An optimistic locking field
+   */
+  @Version
+  @Column(name = "version")
+  protected long version;
+
+  /**
+   * The list of activities which this media item is reference in, this relationship is specified by
+   * the java property mediaItems in the class ActivityDb.
+   *
+   * @see ActivityDb for more information on this mapping.
+   */
+  @ManyToMany(targetEntity = ActivityDb.class, mappedBy = "mediaItems")
+  protected List<Activity> activities;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "mime_type", length = 255)
+  private String mimeType;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "media_type")
+  private String typeDb;
+
+  /**
+   * model field
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "thumbnail_url", length = 255)
+  private String thumbnailUrl;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Transient
+  private Type type;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "url", length = 255)
+  private String url;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "album_id")
+  private String albumId;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "created")
+  private String created;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "description")
+  private String description;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "title")
+  private String title;
+
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "duration")
+  private String duration;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "file_size")
+  private String fileSize;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "id")
+  private String id;
+
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "language")
+  private String language;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "last_updated")
+  private String lastUpdated;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @ManyToOne(targetEntity = AddressDb.class, cascade = { PERSIST, MERGE, REFRESH })
+  @JoinColumn(name = "address_id", referencedColumnName = "oid")
+  private Address location;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "num_comments")
+  private String numComments;
+
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "num_views")
+  private String numViews;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "num_votes")
+  private String numVotes;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "rating")
+  private String rating;
+
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "start_time")
+  private String startTime;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "tagged_people")
+  private String taggedPeople;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "tags")
+  private String tags;
+
+  /**
+   * Create a new blank media item.
+   */
+  public MediaItemDb() {
+  }
+
+  /**
+   * Create a media item specifying the mimeType, type and url.
+   * @param mimeType the mime type of the media item.
+   * @param type the type of the media items (see the specification)
+   * @param url the url pointing to the media item.
+   */
+  public MediaItemDb(String mimeType, Type type, String url) {
+    this.mimeType = mimeType;
+    this.type = type;
+    this.url = url;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.MediaItem#getMimeType()
+   */
+  public String getMimeType() {
+    return mimeType;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.MediaItem#setMimeType(java.lang.String)
+   */
+  public void setMimeType(String mimeType) {
+    this.mimeType = mimeType;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.MediaItem#getType()
+   */
+  public Type getType() {
+    return type;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.MediaItem#setType(org.apache.shindig.social.opensocial.model.MediaItem.Type)
+   */
+  public void setType(Type type) {
+    this.type = type;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.MediaItem#getUrl()
+   */
+  public String getUrl() {
+    return url;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.MediaItem#setUrl(java.lang.String)
+   */
+  public void setUrl(String url) {
+    this.url = url;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.MediaItem#getThumbnailUrl()
+   */
+  public String getThumbnailUrl() {
+    return thumbnailUrl;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.MediaItem#setThumbnailUrl(java.lang.String)
+   */
+  public void setThumbnailUrl(String url) {
+    this.thumbnailUrl = url;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getAlbumId() {
+    return albumId;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setAlbumId(String albumId) {
+    this.albumId = albumId;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getCreated() {
+    return created;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setCreated(String created) {
+    this.created = created;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getDescription() {
+    return description;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setDescription(String description) {
+    this.description = description;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getDuration() {
+    return duration;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setDuration(String duration) {
+    this.duration = duration;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getFileSize() {
+    return fileSize;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setFileSize(String fileSize) {
+    this.fileSize = fileSize;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getId() {
+    return id;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setId(String id) {
+    this.id = id;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getLanguage() {
+    return language;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setLanguage(String language) {
+    this.language = language;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getLastUpdated() {
+    return lastUpdated;
+  }
+
+  public void setLastUpdated(String lastUpdated) {
+    this.lastUpdated = lastUpdated;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public Address getLocation() {
+    return location;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setLocation(Address location) {
+    this.location = location;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getNumComments() {
+    return numComments;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setNumComments(String numComments) {
+    this.numComments = numComments;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getNumViews() {
+    return numViews;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setNumViews(String numViews) {
+    this.numViews = numViews;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getNumVotes() {
+    return numVotes;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setNumVotes(String numVotes) {
+    this.numVotes = numVotes;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getRating() {
+    return rating;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setRating(String rating) {
+    this.rating = rating;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getStartTime() {
+    return startTime;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setStartTime(String startTime) {
+    this.startTime = startTime;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getTaggedPeople() {
+    return taggedPeople;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setTaggedPeople(String taggedPeople) {
+    this.taggedPeople = taggedPeople;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getTags() {
+    return tags;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setTags(String tags) {
+    this.tags = tags;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getTitle() {
+    return title;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setTitle(String title) {
+    this.title = title;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.core.model.DbObject#getObjectId()
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+  /**
+   * a hook into the pre persist phase of JPA to convert type into the db representation.
+   */
+  @PrePersist
+  public void populateDbFields() {
+    typeDb = type.toString();
+  }
+
+  /**
+   * A hook into the load to convert the type in the Db into the Type Enum.
+   */
+  @PostLoad
+  public void loadTransientFields() {
+    type = Type.valueOf(typeDb);
+  }
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/MessageDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/MessageDb.java
new file mode 100644
index 0000000..635ce7b
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/MessageDb.java
@@ -0,0 +1,327 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+import java.util.Date;
+import java.util.List;
+
+import org.apache.shindig.social.opensocial.model.Message;
+import org.apache.shindig.social.opensocial.model.Url;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.PostLoad;
+import javax.persistence.PrePersist;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+
+/**
+ * Messages are stored in the message table.
+ */
+@Entity
+@Table(name="message")
+public class MessageDb implements Message, DbObject {
+  /**
+   * The internal object ID used for references to this object. Should be generated
+   * by the underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy=IDENTITY)
+  @Column(name="oid")
+  protected long objectId;
+
+  /**
+   * An optimistic locking field
+   */
+  @Version
+  @Column(name="version")
+  protected long version;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Message
+   */
+  @Basic
+  @Column(name="body", length=255)
+  protected String body;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Message
+   */
+  @Basic
+  @Column(name="title", length=255)
+  protected String title;
+
+  /**
+   * model field. (database representation of type)
+   * @see org.apache.shindig.social.opensocial.model.Message
+   */
+  @Basic
+  @Column(name="message_type")
+  protected String typeDb;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Message
+   */
+  @Transient
+  protected Type type;
+
+  /**
+   * create an empty message.
+   */
+  public MessageDb() {
+  }
+
+  /**
+   * Create a message object with body, title and type.
+   * @param initBody the body of the message.
+   * @param initTitle the title of the message.
+   * @param initType the type of the message.
+   */
+  public MessageDb(String initBody, String initTitle, Type initType) {
+    this.body = initBody;
+    this.title = initTitle;
+    this.type = initType;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Message#getBody()
+   */
+  public String getBody() {
+    return this.body;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Message#setBody(java.lang.String)
+   */
+  public void setBody(String newBody) {
+    this.body = newBody;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Message#getTitle()
+   */
+  public String getTitle() {
+    return this.title;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Message#setTitle(java.lang.String)
+   */
+  public void setTitle(String newTitle) {
+    this.title = newTitle;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Message#getType()
+   */
+  public Type getType() {
+    return type;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Message#setType(org.apache.shindig.social.opensocial.model.Message.Type)
+   */
+  public void setType(Type newType) {
+    this.type = newType;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Message#sanitizeHTML(java.lang.String)
+   */
+  public String sanitizeHTML(String htmlStr) {
+    return htmlStr;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.core.model.DbObject#getObjectId()
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+  /**
+   *
+   */
+  @PrePersist
+  public void populateDbFields() {
+    typeDb = type.toString();
+  }
+
+  /**
+   *
+   */
+  @PostLoad
+  public void loadTransientFields() {
+    type = Type.valueOf(typeDb);
+  }
+
+  /** {@inheritDoc} */
+  public String getAppUrl() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public String getBodyId() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public List<String> getCollectionIds() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public String getId() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public String getInReplyTo() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public List<String> getRecipients() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public List<String> getReplies() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public String getSenderId() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public Status getStatus() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public Date getTimeSent() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public String getTitleId() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public Date getUpdated() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public List<Url> getUrls() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public void setAppUrl(String url) {
+    // TODO Auto-generated method stub
+  }
+
+  /** {@inheritDoc} */
+  public void setBodyId(String bodyId) {
+    // TODO Auto-generated method stub
+  }
+
+  /** {@inheritDoc} */
+  public void setCollectionIds(List<String> collectionIds) {
+    // TODO Auto-generated method stub
+  }
+
+  /** {@inheritDoc} */
+  public void setId(String id) {
+    // TODO Auto-generated method stub
+  }
+
+  /** {@inheritDoc} */
+  public void setInReplyTo(String parentId) {
+    // TODO Auto-generated method stub
+  }
+
+  /** {@inheritDoc} */
+  public void setRecipients(List<String> recipients) {
+    // TODO Auto-generated method stub
+  }
+
+  /** {@inheritDoc} */
+  public void setSenderId(String senderId) {
+    // TODO Auto-generated method stub
+  }
+
+  /** {@inheritDoc} */
+  public void setStatus(Status status) {
+    // TODO Auto-generated method stub
+  }
+
+  /** {@inheritDoc} */
+  public void setTimeSent(Date timeSent) {
+    // TODO Auto-generated method stub
+  }
+
+  /** {@inheritDoc} */
+  public void setTitleId(String titleId) {
+    // TODO Auto-generated method stub
+  }
+
+  /** {@inheritDoc} */
+  public void setUpdated(Date updated) {
+    // TODO Auto-generated method stub
+  }
+
+  /** {@inheritDoc} */
+  public void setUrls(List<Url> urls) {
+    // TODO Auto-generated method stub
+  }
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/NameDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/NameDb.java
new file mode 100644
index 0000000..73c7770
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/NameDb.java
@@ -0,0 +1,287 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+import org.apache.shindig.social.core.model.NameDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Name;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.NamedQuery;
+import javax.persistence.OneToMany;
+import javax.persistence.Table;
+import javax.persistence.Version;
+import javax.persistence.Transient;
+
+import java.util.List;
+
+/**
+ * The name object, stored in the name table.
+ */
+@Entity
+@Table(name = "person_names")
+@NamedQuery(name = NameDb.FINDBY_FAMILY_NAME, query = "select n from NameDb n where n.familyName = :familyName ")
+public class NameDb implements Name, DbObject {
+  /**
+   * the name of the JPA query that selects a name by family name.
+   */
+  public static final String FINDBY_FAMILY_NAME = "q.name.findbyfamilyname";
+  /**
+   * the name of the family name parameter used in JPA named queries.
+   */
+  public static final String PARAM_FAMILY_NAME = "familyName";
+
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "id")
+  private long objectId;
+
+  /**
+   * An optimistic locking field
+   */
+  // @Version
+  // @Column(name = "version")
+  @Transient
+  protected long version;
+
+  /**
+   * A list of people who shared this name, relationship is specified by the name property on the
+   * Person Object.
+   */
+  @OneToMany(targetEntity = UserDb.class, mappedBy = "name")
+  private List<Person> persons;
+
+  /**
+   * model field.
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name
+   */
+  // @Basic
+  // @Column(name = "additional_name", length = 255)
+  @Transient
+  private String additionalName;
+
+  /**
+   * model field.
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name
+   */
+  @Basic
+  @Column(name = "family_name", length = 255)
+  private String familyName;
+
+  /**
+   * model field.
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name
+   */
+  @Basic
+  @Column(name = "given_name", length = 255)
+  private String givenName;
+
+  /**
+   * model field.
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name
+   */
+  // @Basic
+  // @Column(name = "honorific_prefix", length = 255)
+  @Transient
+  private String honorificPrefix;
+
+  /**
+   * model field.
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name
+   */
+  // @Basic
+  // @Column(name = "honorific_suffix", length = 255)
+  @Transient
+  private String honorificSuffix;
+
+  /**
+   * model field.
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name
+   */
+  // @Basic
+  // @Column(name = "formatted", length = 255)
+  @Transient
+  private String formatted;
+
+  /**
+   * 
+   */
+  public NameDb() {
+  }
+
+  /**
+   * @param formatted
+   */
+  public NameDb(String formatted) {
+    this.formatted = formatted;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name#getAdditionalName()
+   */
+  public String getAdditionalName() {
+    return additionalName;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name#setAdditionalName(java.lang.String)
+   */
+  public void setAdditionalName(String additionalName) {
+    this.additionalName = additionalName;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name#getFamilyName()
+   */
+  public String getFamilyName() {
+    return familyName;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name#setFamilyName(java.lang.String)
+   */
+  public void setFamilyName(String familyName) {
+    this.familyName = familyName;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name#getGivenName()
+   */
+  public String getGivenName() {
+    return givenName;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name#setGivenName(java.lang.String)
+   */
+  public void setGivenName(String givenName) {
+    this.givenName = givenName;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name#getHonorificPrefix()
+   */
+  public String getHonorificPrefix() {
+    return honorificPrefix;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name#setHonorificPrefix(java.lang.String)
+   */
+  public void setHonorificPrefix(String honorificPrefix) {
+    this.honorificPrefix = honorificPrefix;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name#getHonorificSuffix()
+   */
+  public String getHonorificSuffix() {
+    return honorificSuffix;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name#setHonorificSuffix(java.lang.String)
+   */
+  public void setHonorificSuffix(String honorificSuffix) {
+    this.honorificSuffix = honorificSuffix;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.core.model.DbObject#getObjectId()
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+  /**
+   * A list of people who have this name
+   * 
+   * @return the persons
+   */
+  public List<Person> getPersons() {
+    return null;
+    // return persons;
+  }
+
+  /**
+   * Set the list of people who have this name
+   * 
+   * @param persons the persons to set
+   */
+  public void setPersons(List<Person> persons) {
+    this.persons = persons;
+
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name#getFormatted()
+   */
+  public String getFormatted() {
+    return formatted;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name#setFormatted(java.lang.String)
+   */
+  public void setFormatted(String formatted) {
+    this.formatted = formatted;
+  }
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/OrganizationAddressDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/OrganizationAddressDb.java
new file mode 100644
index 0000000..3197465
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/OrganizationAddressDb.java
@@ -0,0 +1,133 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.social.core.model.AddressDb;
+import org.apache.shindig.social.core.model.OrganizationDb;
+import org.apache.shindig.social.opensocial.model.Organization;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.DiscriminatorValue;
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.OneToOne;
+import javax.persistence.Table;
+
+/**
+ * This object connects to a single Address, and to a single organization, defining the
+ * organizations relationship with the address. The class extends AddressDb, which stores itself in
+ * the address table. The specialization of this class is stored in organization_address and joined
+ * on the objectId property (oid column). Records are discriminated using the address_usage column
+ * in the address table and set to the value 'sharedaddress' (i.e. no discrimination) indicating
+ * that the address is shared.
+ */
+// TODO, uncertain about the mapping of this, oid <-> oid means one to one, and this is only
+// associated with a single
+// Organization. IMHO, we should be mapping organizational_address.address_id to address.oid, but
+// need to think about this.
+@Entity
+@Table(name = "organizational_address")
+@DiscriminatorValue(value = "sharedaddress")
+// this is the same as others since we want to share the data.
+public class OrganizationAddressDb extends AddressDb {
+  /**
+   * Indicates this address is the primary address for the organization.
+   */
+  @Basic
+  @Column(name = "primary_organization")
+  private Boolean primary;
+
+  /**
+   * This address is associated with a single organization in this form.
+   *
+   */
+  @OneToOne(targetEntity = OrganizationDb.class)
+  @JoinColumn(name = "organization_id", referencedColumnName = "oid")
+  private Organization organization;
+
+  /**
+   * the type of the address for the organization.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Address
+   */
+  @Basic
+  @Column(name = "type", length = 255)
+  private String type;
+
+  /**
+   * Create an organizational address.
+   */
+  public OrganizationAddressDb() {
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.core.model.AddressDb#getType()
+   */
+  public String getType() {
+    return type;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.core.model.AddressDb#setType(java.lang.String)
+   */
+  public void setType(String type) {
+    this.type = type;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.core.model.AddressDb#getPrimary()
+   */
+  public Boolean getPrimary() {
+    return primary;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.core.model.AddressDb#setPrimary(java.lang.Boolean)
+   */
+  public void setPrimary(Boolean primary) {
+    this.primary = primary;
+  }
+
+  /**
+   * The organization this address address relates to.
+   *
+   * @return the organization
+   */
+  public Organization getOrganization() {
+    return organization;
+  }
+
+  /**
+   * Set the organization this address relates to.
+   *
+   * @param organization the organization to set
+   */
+  public void setOrganization(Organization organization) {
+    this.organization = organization;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/OrganizationDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/OrganizationDb.java
new file mode 100644
index 0000000..9162233
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/OrganizationDb.java
@@ -0,0 +1,399 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+import org.apache.shindig.social.core.model.OrganizationAddressDb;
+import org.apache.shindig.social.core.model.OrganizationDb;
+import org.apache.shindig.social.opensocial.model.Address;
+import org.apache.shindig.social.opensocial.model.Organization;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.DiscriminatorColumn;
+import javax.persistence.DiscriminatorValue;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.Inheritance;
+import javax.persistence.InheritanceType;
+import javax.persistence.NamedQuery;
+import javax.persistence.OneToOne;
+import javax.persistence.Table;
+import javax.persistence.Temporal;
+import javax.persistence.TemporalType;
+import javax.persistence.Version;
+
+import java.util.Date;
+import static javax.persistence.CascadeType.PERSIST;
+import static javax.persistence.CascadeType.MERGE;
+import static javax.persistence.CascadeType.REFRESH;
+
+/**
+ * An organization is stored in the organization table. There may be types of organization where
+ * this class is extended. The storage contains a org_usage column which is used to discriminate the
+ * usage of each organization record. Where the record is shared the value will be shared. Classes
+ * that extend this class may have other values.
+ */
+@Entity
+@Table(name = "organization")
+@Inheritance(strategy = InheritanceType.JOINED)
+@DiscriminatorColumn(name = "org_usage")
+@DiscriminatorValue("shared")
+@NamedQuery(name = OrganizationDb.FINDBY_NAME, 
+    query = "select o from OrganizationDb o where o.name = :name ")
+public class OrganizationDb implements Organization, DbObject {
+  /**
+   * The name of the JPA named query to find the organization by name.
+   */
+  public static final String FINDBY_NAME = "q.organization.findbyname";
+  /**
+   * The name of the parameter used for the name column in JPA queries.
+   */
+  public static final String PARAM_NAME = "name";
+
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "oid")
+  private long objectId;
+
+  /**
+   * An optimistic locking field
+   */
+  @Version
+  @Column(name = "version")
+  protected long version;
+
+  /**
+   * The address associated with this Organization.
+   */
+  // TODO: does an organization have only one address, or many with one primary
+  @OneToOne(targetEntity = OrganizationAddressDb.class, mappedBy = "organization", cascade = {
+      PERSIST, MERGE, REFRESH })
+  private Address address;
+
+  /**
+   * Part of the Organization Model
+   * @see org.apache.shindig.social.opensocial.model.Organization
+   */
+  @Basic
+  @Column(name = "description", length = 255)
+  private String description;
+
+  /**
+   * Part of the Organization Model
+   * @see org.apache.shindig.social.opensocial.model.Organization
+   */
+  @Basic
+  @Column(name = "endDate")
+  @Temporal(TemporalType.DATE)
+  private Date endDate;
+
+  /**
+   * Part of the Organization Model
+   * @see org.apache.shindig.social.opensocial.model.Organization
+   */
+  @Basic
+  @Column(name = "field", length = 255)
+  private String field;
+
+  /**
+   * Part of the Organization Model
+   * @see org.apache.shindig.social.opensocial.model.Organization
+   */
+  @Basic
+  @Column(name = "name", length = 255)
+  private String name;
+
+  /**
+   * Part of the Organization Model
+   * @see org.apache.shindig.social.opensocial.model.Organization
+   */
+  @Basic
+  @Column(name = "salary", length = 255)
+  private String salary;
+
+  /**
+   * Part of the Organization Model
+   * @see org.apache.shindig.social.opensocial.model.Organization
+   */
+  @Basic
+  @Column(name = "start_date")
+  @Temporal(TemporalType.DATE)
+  private Date startDate;
+
+  /**
+   * Part of the Organization Model
+   * @see org.apache.shindig.social.opensocial.model.Organization
+   */
+  @Basic
+  @Column(name = "sub_field", length = 255)
+  private String subField;
+
+  /**
+   * Part of the Organization Model
+   * @see org.apache.shindig.social.opensocial.model.Organization
+   */
+  @Basic
+  @Column(name = "title", length = 255)
+  private String title;
+
+  /**
+   * Part of the Organization Model
+   * @see org.apache.shindig.social.opensocial.model.Organization
+   */
+  @Basic
+  @Column(name = "webpage", length = 255)
+  private String webpage;
+
+  /**
+   * Part of the Organization Model
+   * @see org.apache.shindig.social.opensocial.model.Organization
+   */
+  @Basic
+  @Column(name = "type", length = 255)
+  private String type;
+
+  /**
+   * Part of the Organization Model
+   * @see org.apache.shindig.social.opensocial.model.Organization
+   */
+  @Basic
+  @Column(name = "primary_organization")
+  private Boolean primary;
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#getAddress()
+   */
+  public Address getAddress() {
+    return address;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#setAddress(org.apache.shindig.social.opensocial.model.Address)
+   */
+  public void setAddress(Address address) {
+    this.address = address;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#getDescription()
+   */
+  public String getDescription() {
+    return description;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#setDescription(java.lang.String)
+   */
+  public void setDescription(String description) {
+    this.description = description;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#getEndDate()
+   */
+  public Date getEndDate() {
+    if (endDate == null) {
+      return null;
+    }
+    return new Date(endDate.getTime());
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#setEndDate(java.util.Date)
+   */
+  public void setEndDate(Date endDate) {
+    if (endDate == null) {
+      this.endDate = null;
+    } else {
+      this.endDate = new Date(endDate.getTime());
+    }
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#getField()
+   */
+  public String getField() {
+    return field;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#setField(java.lang.String)
+   */
+  public void setField(String field) {
+    this.field = field;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#getName()
+   */
+  public String getName() {
+    return name;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#setName(java.lang.String)
+   */
+  public void setName(String name) {
+    this.name = name;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#getSalary()
+   */
+  public String getSalary() {
+    return salary;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#setSalary(java.lang.String)
+   */
+  public void setSalary(String salary) {
+    this.salary = salary;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#getStartDate()
+   */
+  public Date getStartDate() {
+    if (startDate == null) {
+      return null;
+    }
+    return new Date(startDate.getTime());
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#setStartDate(java.util.Date)
+   */
+  public void setStartDate(Date startDate) {
+    if (startDate == null) {
+      this.startDate = null;
+    } else {
+      this.startDate = new Date(startDate.getTime());
+    }
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#getSubField()
+   */
+  public String getSubField() {
+    return subField;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#setSubField(java.lang.String)
+   */
+  public void setSubField(String subField) {
+    this.subField = subField;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#getTitle()
+   */
+  public String getTitle() {
+    return title;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#setTitle(java.lang.String)
+   */
+  public void setTitle(String title) {
+    this.title = title;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#getWebpage()
+   */
+  public String getWebpage() {
+    return webpage;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#setWebpage(java.lang.String)
+   */
+  public void setWebpage(String webpage) {
+    this.webpage = webpage;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#getType()
+   */
+  public String getType() {
+    return type;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#setType(java.lang.String)
+   */
+  public void setType(String type) {
+    this.type = type;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#getPrimary()
+   */
+  public Boolean getPrimary() {
+    return primary;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#setPrimary(java.lang.Boolean)
+   */
+  public void setPrimary(Boolean primary) {
+    this.primary = primary;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.core.model.DbObject#getObjectId()
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/PermissionDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PermissionDb.java
new file mode 100644
index 0000000..e4781ff
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PermissionDb.java
@@ -0,0 +1,231 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.CascadeType.ALL;
+import static javax.persistence.CascadeType.MERGE;
+import static javax.persistence.CascadeType.PERSIST;
+import static javax.persistence.CascadeType.REFRESH;
+import static javax.persistence.GenerationType.IDENTITY;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
+import org.apache.shindig.protocol.model.Enum;
+import org.apache.shindig.protocol.model.FilterOperation;
+import org.apache.shindig.social.opensocial.model.Account;
+import org.apache.shindig.social.opensocial.model.Address;
+import org.apache.shindig.social.opensocial.model.BodyType;
+import org.apache.shindig.social.opensocial.model.Drinker;
+import org.apache.shindig.social.opensocial.model.ListField;
+import org.apache.shindig.social.opensocial.model.LookingFor;
+import org.apache.shindig.social.opensocial.model.Name;
+import org.apache.shindig.social.opensocial.model.NetworkPresence;
+import org.apache.shindig.social.opensocial.model.Organization;
+import org.apache.shindig.social.opensocial.model.Person;
+import org.apache.shindig.social.opensocial.model.App;
+import org.apache.shindig.social.opensocial.model.Smoker;
+import org.apache.shindig.social.opensocial.model.Url;
+
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.JoinTable;
+import javax.persistence.ManyToMany;
+import javax.persistence.ManyToOne;
+import javax.persistence.NamedQueries;
+import javax.persistence.NamedQuery;
+import javax.persistence.OneToMany;
+import javax.persistence.PostLoad;
+import javax.persistence.PrePersist;
+import javax.persistence.Table;
+import javax.persistence.Temporal;
+import javax.persistence.TemporalType;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+
+/**
+ * Default Implementation of the Person object in the org.apache.shindig.graaasp.jpa.
+ */
+@Entity
+@Table(name = "permissions")
+public class PermissionDb implements DbObject {
+  
+  // 3 is owner in Graaasp
+  public static final String JPQL_OWNERS_BY_SPACE = "select p.userId from PermissionDb p where p.status = 'joined' and p.rightType = '3' and p.itemType = 'Space'";
+
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "id")
+  private long objectId;
+  
+  /**
+   * The internal itemId and itemType used for references to the item of a widget.
+   */
+  @Basic
+  @Column(name = "item_id", length = 255)
+  private String itemId;
+  
+  @Basic
+  @Column(name = "item_type", length = 255)
+  protected String itemType;
+
+  @Basic
+  @Column(name = "user_id")
+  protected String userId;
+
+  @Basic
+  @Column(name = "status", length = 255)
+  protected String status;
+  
+  // right_type = {1 = "viewer", 2 = "editor", 3 = "owner"}
+  @Basic
+  @Column(name = "right_type")
+  protected Long rightType;
+  
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "id", length = 255, insertable = false, updatable = false)
+  protected String id;
+
+  // Note: Not in the opensocial js person object directly
+  @Transient
+  private boolean isOwner = false;
+
+  public PermissionDb() {
+  }
+
+  public String getUserId() {
+    return userId;
+  }
+
+  public void setUserId(String userId) {
+    this.userId = userId;
+  }                               
+
+  public String getStatus() {
+    return status;
+  }
+
+  public void setStatus(String status) {
+    this.status = status;
+  }                               
+
+  public Long getRightType() {
+    return rightType;
+  }
+
+  public void setRightType(Long rightType) {
+    this.rightType = rightType;
+  }
+
+  public String getItemId() {
+    return this.itemId;
+  }
+
+  public void setItemId(String itemId) {
+    this.itemId = itemId;
+  }
+  
+  public String getItemType() {
+	  if(this.itemType.equals("User")){
+		  return "@person";
+	  }else{
+		  return "@space";
+	  }
+  }
+
+  public void setItemType(String itemType) {
+    this.itemType = itemType;
+  }
+    
+  public String getId() {
+    return id;
+  }
+
+  public void setId(String id) {
+    this.id = id;
+  }
+
+  public boolean getIsOwner() {
+    return isOwner;
+  }
+
+  public void setIsOwner(boolean isOwner) {
+    this.isOwner = isOwner;
+  }
+
+  // Proxied fields
+
+
+
+  private <T extends ListField> T getListFieldWithType(String type, List<T> list) {
+    if (list != null) {
+      for (T url : list) {
+        if (type.equalsIgnoreCase(url.getType())) {
+          return url;
+        }
+      }
+    }
+
+    return null;
+  }
+
+  private <T extends ListField> List<T> addListField(T field, List<T> list) {
+    if (list == null) {
+      list = Lists.newArrayList();
+    }
+    list.add(field);
+    return list;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return Long.parseLong(id);
+  }
+
+  @PrePersist
+  public void populateDbFields() {
+
+
+  }
+
+  @PostLoad
+  public void loadTransientFields() {
+
+
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonAccountDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonAccountDb.java
new file mode 100644
index 0000000..a18390e
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonAccountDb.java
@@ -0,0 +1,98 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.social.core.model.AccountDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.DiscriminatorValue;
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+
+/**
+ * This object connects to a single account to a person, defining the relationship
+ * between the person and the account. It extends the account object, which stored its instances in
+ * the 'account' table by storing instances of this class in the 'person_account table. Records 
+ * are joined using oid, and use the same shared account discriminator.
+ */
+@Entity
+@Table(name="person_account")
+@DiscriminatorValue("sharedaccount")
+public class PersonAccountDb extends AccountDb {
+  @Basic
+  @Column(name="primary_account")
+  private Boolean primary;
+  
+  /**
+   * The person connected the account
+   */
+  // @ManyToOne(targetEntity=UserDb.class)
+  // @JoinColumn(name="person_id", referencedColumnName="oid")
+  @Transient
+  private Person person;
+  
+  @Basic
+  @Column(name="type", length=255)
+  private String type;
+
+
+  public PersonAccountDb() {
+  }
+
+
+  public String getType() {
+    return type;
+  }
+
+  public void setType(String type) {
+    this.type = type;
+  }
+
+
+  public Boolean getPrimary() {
+    return primary;
+  }
+
+  public void setPrimary(Boolean primary) {
+    this.primary = primary;
+  }
+
+
+  /**
+   * @return the person
+   */
+  public Person getPerson() {
+    return person;
+  }
+
+
+  /**
+   * @param person the person to set
+   */
+  public void setPerson(Person person) {
+    this.person = person;
+  }
+
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonAddressDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonAddressDb.java
new file mode 100644
index 0000000..059c740
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonAddressDb.java
@@ -0,0 +1,98 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.social.core.model.AddressDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.DiscriminatorValue;
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+
+/**
+ *
+ */
+/*
+ * This object connects to a single Address, and to a single organization, 
+ * defining the organizations relationship with the address
+ */
+@Entity
+@Table(name="person_addresses")
+@DiscriminatorValue(value="sharedaddress")
+public class PersonAddressDb extends AddressDb {
+  // @Basic
+  // @Column(name="primary_address")
+  @Transient
+  private Boolean primary;
+  
+  @ManyToOne(targetEntity=UserDb.class)
+  @JoinColumn(name="user_id", referencedColumnName="id")
+  private Person person;
+  
+  // @Basic
+  // @Column(name="type", length=255)
+  @Transient
+  private String type;
+
+
+  public PersonAddressDb() {
+    // TODO Auto-generated constructor stub
+  }
+
+
+  public String getType() {
+    return type;
+  }
+
+  public void setType(String type) {
+    this.type = type;
+  }
+
+
+  public Boolean getPrimary() {
+    return primary;
+  }
+
+  public void setPrimary(Boolean primary) {
+    this.primary = primary;
+  }
+
+
+  /**
+   * @return the person
+   */
+  public Person getPerson() {
+    return null;
+  }
+
+
+  /**
+   * @param person the person to set
+   */
+  public void setPerson(Person person) {
+    this.person = person;
+  }
+
+
+}
<<<<<<< HEAD

=======
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonImpl.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonImpl.java
index ac16516..e47431b 100644
--- a/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonImpl.java
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonImpl.java
@@ -20,6 +20,7 @@ package org.apache.shindig.social.core.model;
 import org.apache.shindig.protocol.model.Enum;
 import org.apache.shindig.social.opensocial.model.Account;
 import org.apache.shindig.social.opensocial.model.Address;
+import org.apache.shindig.social.opensocial.model.Competence;
 import org.apache.shindig.social.opensocial.model.BodyType;
 import org.apache.shindig.social.opensocial.model.Drinker;
 import org.apache.shindig.social.opensocial.model.ListField;
@@ -45,6 +46,7 @@ public class PersonImpl implements Person {
   private List<Account> accounts;
   private List<String> activities;
   private List<Address> addresses;
+  private List<Competence> competences;
   private Integer age;
   private Map<String, ?> appData;
   private Date birthday;
@@ -152,6 +154,14 @@ public class PersonImpl implements Person {
     this.addresses = addresses;
   }
 
+  public List<Competence> getCompetences() {
+    return competences;
+  }
+
+  public void setCompetences(List<Competence> competences) {
+    this.competences = competences;
+  }
+
   public Integer getAge() {
     return age;
   }
>>>>>>> updates .gitignore, adds diff file for previous version of shindig
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonOrganizationDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonOrganizationDb.java
new file mode 100644
index 0000000..17ef5c7
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonOrganizationDb.java
@@ -0,0 +1,83 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.social.core.model.OrganizationDb;
+import org.apache.shindig.social.core.model.PersonOrganizationDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.DiscriminatorValue;
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.NamedQuery;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+
+/**
+ * 
+ */
+/*
+ * This object connects to a single Address, and to a single organization, defining the
+ * organizations relationship with the address
+ */
+@Entity
+@Table(name = "person_organization")
+@DiscriminatorValue("shared")
+@NamedQuery(name = PersonOrganizationDb.PERSON_ORG_FINDBY_NAME, 
+    query = "select p from PersonOrganizationDb p where p.name = :name ")
+public class PersonOrganizationDb extends OrganizationDb {
+  public static final String PERSON_ORG_FINDBY_NAME = "q.personorganizationdb.findbyname";
+
+  @Basic
+  @Column(name = "primary_organization")
+  private Boolean primary;
+
+  // @ManyToOne(targetEntity = UserDb.class)
+  // @JoinColumn(name = "person_id", referencedColumnName = "oid")
+  @Transient
+  protected Person person;
+
+  @Basic
+  @Column(name = "type", length = 255)
+  private String type;
+
+  public PersonOrganizationDb() {
+    // TODO Auto-generated constructor stub
+  }
+
+  public String getType() {
+    return type;
+  }
+
+  public void setType(String type) {
+    this.type = type;
+  }
+
+  public Boolean getPrimary() {
+    return primary;
+  }
+
+  public void setPrimary(Boolean primary) {
+    this.primary = primary;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonPropertyDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonPropertyDb.java
new file mode 100644
index 0000000..14a7e17
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonPropertyDb.java
@@ -0,0 +1,47 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.social.core.model.ListFieldDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.PrimaryKeyJoinColumn;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+
+/**
+ * A property, associated with a person, extends the "list_field" table, 
+ * and sets the "list_field_type" to PersonPropertiesDb.
+ */
+@Entity
+@Table(name="person_properties")
+@PrimaryKeyJoinColumn(name="oid")
+public class PersonPropertyDb extends ListFieldDb {
+
+  /**
+   * The person who this property is associated with.
+   */
+  // @ManyToOne(targetEntity=UserDb.class)
+  // @JoinColumn(name="person_id", referencedColumnName="oid")
+  @Transient
+  protected Person person;
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/PhoneDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PhoneDb.java
new file mode 100644
index 0000000..f4da4e5
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PhoneDb.java
@@ -0,0 +1,61 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.social.core.model.ListFieldDb;
+import org.apache.shindig.social.core.model.PhoneDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.NamedQuery;
+import javax.persistence.PrimaryKeyJoinColumn;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+
+/**
+ * Phone Entity, extends the ListField object (and list_field table), joining on the object ID.
+ * Objects of this type will have "list_field_type" set to PhoneDb in list_field
+ */
+@Entity
+@Table(name = "phone")
+@PrimaryKeyJoinColumn(name = "oid")
+@NamedQuery(name = PhoneDb.FINDBY_PHONE_NUMBER, 
+    query = "select p from PhoneDb p where p.value = :phonenumber ")
+public class PhoneDb extends ListFieldDb {
+
+  /**
+   * The name of the JPA query to find phone numbers by phone number (bit odd)
+   */
+  public static final String FINDBY_PHONE_NUMBER = "q.pphone.findbynumber";
+  /**
+   * The name of the phone number parameter in JPA queries
+   */
+  public static final String PARAM_PHONE_NUMBER = "phonenumber";
+  
+  /**
+   * The person who is associated with this phone number.
+   */
+  // @ManyToOne(targetEntity = UserDb.class)
+  // @JoinColumn(name = "person_id", referencedColumnName = "oid")
+  @Transient
+  protected Person person;
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/PhotoDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PhotoDb.java
new file mode 100644
index 0000000..401816a
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PhotoDb.java
@@ -0,0 +1,61 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.social.core.model.ListFieldDb;
+import org.apache.shindig.social.core.model.PhotoDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.NamedQuery;
+import javax.persistence.PrimaryKeyJoinColumn;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+
+/**
+ * Photo Entity, extends the ListField object (and list_field table), joining on the object ID.
+ * Objects of this type will have "list_field_type" set to PhotoDb in list_field
+ */
+@Entity
+@Table(name="photo")
+@PrimaryKeyJoinColumn(name="oid")
+@NamedQuery(name = PhotoDb.FINDBY_PHOTO, 
+    query = "select p from PhotoDb p where p.value = :photo ")
+public class PhotoDb extends ListFieldDb {
+  
+  /**
+   * The name of the JPA query to find phone numbers by phone number (bit odd)
+   */
+  public static final String FINDBY_PHOTO = "q.pphoto.findbyphoto";
+  /**
+   * The name of the phone number parameter in JPA queries
+   */
+  public static final String PARAM_PHOTO = "photo";
+
+  /**
+   * The person who is using this photo.
+   */
+  // @ManyToOne(targetEntity=UserDb.class)
+  // @JoinColumn(name="person_id", referencedColumnName="oid")
+  @Transient
+  protected Person person;
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/SpaceDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/SpaceDb.java
new file mode 100644
index 0000000..a540aae
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/SpaceDb.java
@@ -0,0 +1,596 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.CascadeType.ALL;
+import static javax.persistence.CascadeType.MERGE;
+import static javax.persistence.CascadeType.PERSIST;
+import static javax.persistence.CascadeType.REFRESH;
+import static javax.persistence.GenerationType.IDENTITY;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
+import org.apache.shindig.protocol.model.Enum;
+import org.apache.shindig.protocol.model.FilterOperation;
+import org.apache.shindig.social.opensocial.model.Account;
+import org.apache.shindig.social.opensocial.model.Address;
+import org.apache.shindig.social.opensocial.model.BodyType;
+import org.apache.shindig.social.opensocial.model.Drinker;
+import org.apache.shindig.social.opensocial.model.ListField;
+import org.apache.shindig.social.opensocial.model.LookingFor;
+import org.apache.shindig.social.opensocial.model.Name;
+import org.apache.shindig.social.opensocial.model.NetworkPresence;
+import org.apache.shindig.social.opensocial.model.Organization;
+import org.apache.shindig.social.opensocial.model.Person;
+import org.apache.shindig.social.opensocial.model.Space;
+import org.apache.shindig.social.opensocial.model.Smoker;
+import org.apache.shindig.social.opensocial.model.Url;
+
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.ArrayList;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.JoinTable;
+import javax.persistence.ManyToMany;
+import javax.persistence.ManyToOne;
+import javax.persistence.NamedQueries;
+import javax.persistence.NamedQuery;
+import javax.persistence.OneToMany;
+import javax.persistence.PostLoad;
+import javax.persistence.PrePersist;
+import javax.persistence.Table;
+import javax.persistence.Temporal;
+import javax.persistence.TemporalType;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+
+import com.google.inject.name.Named;
+import com.google.inject.Inject;
+
+/**
+ * Default Implementation of the Person object in the org.apache.shindig.graasp.jpa.
+ */
+@Entity
+@Table(name = "spaces")
+@NamedQueries(value = {
+    @NamedQuery(name = SpaceDb.FINDBY_SPACEID,
+        query = "select s from SpaceDb s where s.id = :id "),
+    @NamedQuery(name = SpaceDb.FINDBY_LIKE_SPACEID,
+        query = "select s from SpaceDb s where s.id like :id") })
+public class SpaceDb implements Space, DbObject {
+
+  public static final String GRAASP_URL = System.getProperty("shindig.container_url");
+
+  public static final String FINDBY_SPACEID = "q.space.findbyspaceid";
+
+  public static final String PARAM_SPACEID = "id";
+
+  public static final String FINDBY_LIKE_SPACEID = "q.space.findbylikespaceid";
+
+  private static final String INTERESTS_PROPERTY = "interest";
+
+
+  private static final Map<String, FilterSpecification> FILTER_COLUMNS =
+    new HashMap<String, FilterSpecification>();
+
+  private static final FilterOperation[] ALL_FILTEROPTIONS = new FilterOperation[] {
+      FilterOperation.equals, FilterOperation.contains, FilterOperation.present,
+      FilterOperation.startsWith };
+  private static final FilterOperation[] NUMERIC_FILTEROPTIONS = new FilterOperation[] {
+      FilterOperation.equals, FilterOperation.present };
+  @SuppressWarnings("unused")
+  private static final FilterOperation[] EQUALS_FILTEROPTIONS =
+    new FilterOperation[] { FilterOperation.equals };
+
+  static {
+    FILTER_COLUMNS.put("displayName", new FilterSpecification("displayName", ALL_FILTEROPTIONS));
+
+    // the following are special operations which are accepted, but work differently
+    FILTER_COLUMNS.put("topFriends", new FilterSpecification());
+    FILTER_COLUMNS.put("hasApp", new FilterSpecification());
+  }
+
+  private static final FilterCapability FILTER_CAPABILITY = new FilterCapability() {
+    /**
+     * {@inheritDoc}
+     */
+    public String findFilterableProperty(String fieldName, FilterOperation filterOperation) {
+      FilterSpecification spec = FILTER_COLUMNS.get(fieldName);
+      if (spec != null) {
+        return spec.translateProperty(filterOperation);
+      }
+      return null;
+    }
+
+  };
+
+  public static final String JPQL_FINDALLPERSON = null;
+
+  // TODO The commented out query supports sorting by friend.score but needs a join with FriendDb which returns duplicates.
+  // Using 'group by' to avoid duplicates doesn't work in HSQLDB or Derby - causes a "Not in aggregate function or group by clause" jdbc exception.
+  // public static final String JPQL_FINDPERSON_BY_FRIENDS = "select p from PersonDb p join FriendDb f on p.objectId = f.friend.objectId where p.objectId in (select f.friend.objectId from PersonDb p, FriendDb f where p.objectId = f.person.objectId and ";
+  public static final String JPQL_FINDPERSON_BY_FRIENDS = "select p from PersonDb p where p.objectId in (select f.friend.objectId from PersonDb p, FriendDb f where p.objectId = f.person.objectId and ";
+
+  public static final Object JPQL_FINDPERSON_BY_GROUP = null;
+
+  public static final Object JPQL_FINDSPACE = "select s from SpaceDb s where ";
+  public static final Object JPQL_FINDSPACES = "select s from SpaceDb s where ";
+  
+  public static final String JPQL_ALL_PUBLIC_SPACES = "select s.objectId from SpaceDb s where s.visibilityLevel = 1 or s.visibilityLevel = 2";
+
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "id")
+  private long objectId;
+  
+  /**
+   * The internal parentId and parentType used for references to the parent of a space.
+   */
+  @Basic
+  @Column(name = "parent_id", length = 255)
+  private String parentId;
+  
+  @Basic
+  @Column(name = "parent_type", length = 255)
+  protected String parentType;
+
+  /**
+   * An optimistic locking field.
+   */
+
+  @Transient
+  protected List<Address> addresses;
+  
+  @Transient
+  protected String location;
+
+  @Basic
+  @Column(name = "name", length = 255)
+  private String displayName;
+
+  @Basic
+  @Column(name = "name", length = 255, insertable = false, updatable = false)
+  private String name;
+  
+  @Basic
+  @Column(name = "picture")
+  protected String picture;
+  
+  
+  /**
+   *
+   */
+  @Transient
+  protected List<ListField> emails;
+
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "description", length = 255)
+  protected String description;
+  
+  @Basic
+  @Column(name = "visibility_level", length = 11)
+  protected int visibilityLevel; 
+  
+  @Transient
+  protected List<String> allVisibilityLevels;
+
+  /**
+   *
+   */
+  @Transient
+  protected Boolean hasApp;
+
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "id", length = 255, insertable = false, updatable = false)
+  protected String id;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<ListField> ims;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> interests;
+
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "updated_at")
+  @Temporal(TemporalType.TIMESTAMP)
+  protected Date updated;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<ListField> phoneNumbers;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<ListField> images;
+  
+  /**
+   *
+   */
+  @Transient
+  protected String status;
+
+  /**
+   *
+   */
+  @Transient
+  protected Long utcOffset;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<Url> urls;
+
+  // Note: Not in the opensocial js person object directly
+  @Transient
+  private boolean isOwner = false;
+
+  public SpaceDb() {
+  }
+
+  public SpaceDb(String id, String displayName) {
+    this.id = id;
+    this.displayName = displayName;
+  }
+
+  public List<Address> getAddresses() {
+    return addresses;
+  }
+
+  public void setAddresses(List<Address> addresses) {
+    this.addresses = addresses;
+  }
+
+  public List<ListField> getEmails() {
+    return emails;
+  }
+
+  public void setEmails(List<ListField> emails) {
+    this.emails = emails;
+  }
+
+  public Boolean getHasApp() {
+    return hasApp;
+  }
+
+  public void setHasApp(Boolean hasApp) {
+    this.hasApp = hasApp;
+  }
+
+  public String getParentId() {
+    return this.parentId;
+  }
+
+  public void setParentId(String parentId) {
+    this.parentId = parentId;
+  }
+  
+  public String getParentType() {
+	  if(this.parentType.equals("User")){
+		  return "@person";
+	  }else{
+		  return "@space";
+	  }
+  }
+
+  public void setParentType(String parentType) {
+    this.parentType = parentType;
+  }
+
+  public String getLocation() {
+    return this.location;
+  }
+
+  public void setLocation(String location) {
+    this.location = location;
+  }
+  
+  public String getName() {
+    return this.name;
+  }
+
+  public void setName(String name) {
+    this.name = name;
+  }
+
+  
+  public String getId() {
+    return id;
+  }
+
+  public void setId(String id) {
+    this.id = id;
+  }
+
+  public List<ListField> getIms() {
+    return ims;
+  }
+
+  public void setIms(List<ListField> ims) {
+    this.ims = ims;
+  }
+
+  public List<String> getInterests() {
+    return interests;
+  }
+
+  public void setInterests(List<String> interests) {
+    this.interests = interests;
+  }
+
+  public Date getUpdated() {
+    if (updated == null) {
+      return null;
+    }
+    return new Date(updated.getTime());
+  }
+
+  public void setUpdated(Date updated) {
+    if (updated == null) {
+      this.updated = null;
+    } else {
+      this.updated = new Date(updated.getTime());
+    }
+  }
+
+  public List<ListField> getPhoneNumbers() {
+    return phoneNumbers;
+  }
+
+  public void setPhoneNumbers(List<ListField> phoneNumbers) {
+    this.phoneNumbers = phoneNumbers;
+  }
+
+  public List<ListField> getImages() {
+    return images;
+  }
+
+  public void setImages(List<ListField> images) {
+    this.images = images;
+  }
+
+  public String getDescription() {
+    return description;
+  }
+
+  public void setDescription(String description) {
+    this.description = description;
+  }
+  
+  public List<String> getAllVisibilityLevels() {
+    return allVisibilityLevels;
+  }
+  
+  public String getVisibilityLevel() {
+    return decodeVisibility(visibilityLevel);
+  }
+
+  public void setVisibilityLevel(String visibilityLevel) {
+    this.visibilityLevel = encodeVisibility(visibilityLevel);
+  }
+  
+  public String decodeVisibility(int visibilityLevel){
+    if(visibilityLevel == 1){
+      return "Everyone";
+    }
+    else if(visibilityLevel == 2){
+      return "Space members";
+    }
+    else{
+      return "Myself";  
+    }
+  }
+  
+  public int encodeVisibility(String visibilityStr){
+    if(visibilityStr == "Everyone"){
+      return 1;
+    }
+    else if(visibilityStr == "Space members"){
+      return 2;
+    }
+    else{
+      return 3;
+    }
+  }
+
+  
+  public String getStatus() {
+    return status;
+  }
+
+  public void setStatus(String status) {
+    this.status = status;
+  }
+
+  public Long getUtcOffset() {
+    return utcOffset;
+  }
+
+  public void setUtcOffset(Long utcOffset) {
+    this.utcOffset = utcOffset;
+  }
+
+  public List<Url> getUrls() {
+    return urls;
+  }
+
+  public void setUrls(List<Url> urls) {
+    this.urls = urls;
+  }
+
+  public boolean getIsOwner() {
+    return isOwner;
+  }
+
+  public void setIsOwner(boolean isOwner) {
+    this.isOwner = isOwner;
+  }
+
+  // Proxied fields
+
+  public String getProfileUrl() {
+    return GRAASP_URL+"/#item=space_"+String.valueOf(objectId);  
+  }
+
+  public void setProfileUrl(String profileUrl) {
+    Url url = getListFieldWithType(PROFILE_URL_TYPE, getUrls());
+    if (url != null) {
+      url.setValue(profileUrl);
+    } else {
+      setUrls(addListField(new UrlDb(profileUrl, null, PROFILE_URL_TYPE), getUrls()));
+    }
+  }
+
+  public String getThumbnailUrl() {
+    String pic = picture;
+    if (pic == null || pic.equals("")) {
+      return GRAASP_URL+"/images/pics/space_thumb.png";
+    }
+    
+    return GRAASP_URL+"/space/picture/"+String.valueOf(objectId)+"/thumb/"+pic;        
+  }
+
+  public void setThumbnailUrl(String thumbnailUrl) {
+    ListField photo = getListFieldWithType(THUMBNAIL_PHOTO_TYPE, getImages());
+    if (photo != null) {
+      photo.setValue(thumbnailUrl);
+    } else {
+      setImages(addListField(new ListFieldDb(THUMBNAIL_PHOTO_TYPE, thumbnailUrl), getImages()));
+    }
+  }
+
+  private <T extends ListField> T getListFieldWithType(String type, List<T> list) {
+    if (list != null) {
+      for (T url : list) {
+        if (type.equalsIgnoreCase(url.getType())) {
+          return url;
+        }
+      }
+    }
+
+    return null;
+  }
+
+  private <T extends ListField> List<T> addListField(T field, List<T> list) {
+    if (list == null) {
+      list = Lists.newArrayList();
+    }
+    list.add(field);
+    return list;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return Long.parseLong(id);
+  }
+
+  @PrePersist
+  public void populateDbFields() {
+
+    Map<String, List<String>> toSave = new HashMap<String, List<String>>();
+    toSave.put(INTERESTS_PROPERTY, this.interests);
+
+  }
+
+  @PostLoad
+  public void loadTransientFields() {
+
+
+    List<String> lookingFor = Lists.newArrayList();
+    this.interests = Lists.newArrayList();
+
+    Map<String, List<String>> toSave = Maps.newHashMap();
+
+    toSave.put(INTERESTS_PROPERTY, this.interests);
+    
+    this.allVisibilityLevels = new ArrayList<String>();
+    allVisibilityLevels.add("Everyone");
+    allVisibilityLevels.add("Space members");
+    allVisibilityLevels.add("Myself");
+
+  }
+
+  /*
+   * (non-Javadoc)
+   *
+   * @see org.apache.shindig.social.opensocial.model.Person#getDisplayName()
+   */
+  public String getDisplayName() {
+    return displayName;
+  }
+
+  /*
+   * (non-Javadoc)
+   *
+   * @see org.apache.shindig.social.opensocial.model.Person#setDisplayName(java.lang.String)
+   */
+  public void setDisplayName(String displayName) {
+    this.displayName = displayName;
+  }
+
+  public static FilterCapability getFilterCapability() {
+    return FILTER_CAPABILITY;
+
+  }
+
+  /** {@inheritDoc} */
+  public Map<String, ? extends Object> getAppData()
+  {
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public void setAppData( Map<String, ? extends Object> appData )
+  {
+  }
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/UrlDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/UrlDb.java
new file mode 100644
index 0000000..b6681a1
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/UrlDb.java
@@ -0,0 +1,76 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.social.core.model.ListFieldDb;
+import org.apache.shindig.social.core.model.UrlDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Person;
+import org.apache.shindig.social.opensocial.model.Url;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.NamedQuery;
+import javax.persistence.PrimaryKeyJoinColumn;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+
+/**
+ * Url Entity, extends the ListField object (and list_field table), joining on the object ID.
+ * Objects of this type will have "list_field_type" set to UrlDb in list_field
+ */
+@Entity
+@Table(name = "url")
+@PrimaryKeyJoinColumn(name = "oid")
+@NamedQuery(name = UrlDb.FINDBY_URL, query = "select u from UrlDb u where u.value = :url ")
+public class UrlDb extends ListFieldDb implements Url {
+  public static final String FINDBY_URL = "q.url.findbyurl";
+
+  public static final String PARAM_URL = "url";
+
+  @Basic
+  @Column(name = "link_text")
+  private String linkText;
+
+  /**
+   * The person who is using this url.
+   */
+  // @ManyToOne(targetEntity = UserDb.class)
+  // @JoinColumn(name = "person_id", referencedColumnName = "oid")
+  @Transient
+  protected Person person;
+
+  public UrlDb() {
+  }
+
+  public UrlDb(String value, String linkText, String type) {
+    super(type, value);
+    this.linkText = linkText;
+  }
+
+  public String getLinkText() {
+    return linkText;
+  }
+
+  public void setLinkText(String linkText) {
+    this.linkText = linkText;
+  }
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/UrlImpl.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/UrlImpl.java
index f1c2217..f3f9ea4 100644
--- a/java/social-api/src/main/java/org/apache/shindig/social/core/model/UrlImpl.java
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/UrlImpl.java
@@ -18,6 +18,7 @@
 package org.apache.shindig.social.core.model;
 
 import org.apache.shindig.social.opensocial.model.Url;
+import org.apache.shindig.social.opensocial.model.Person;
 
 /**
  * see
@@ -41,4 +42,8 @@ public class UrlImpl extends ListFieldImpl implements Url {
   public void setLinkText(String linkText) {
     this.linkText = linkText;
   }
+  
+  public void setPerson(Person person) {
+    // this.person = person;
+  }
 }
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/UserDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/UserDb.java
new file mode 100644
index 0000000..8b248fb
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/UserDb.java
@@ -0,0 +1,1449 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.CascadeType.ALL;
+import static javax.persistence.CascadeType.MERGE;
+import static javax.persistence.CascadeType.PERSIST;
+import static javax.persistence.CascadeType.REFRESH;
+import static javax.persistence.GenerationType.IDENTITY;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
+import org.apache.shindig.protocol.model.Enum;
+import org.apache.shindig.protocol.model.FilterOperation;
+import org.apache.shindig.social.core.model.EnumDb;
+import org.apache.shindig.social.core.model.AddressDb;
+import org.apache.shindig.social.core.model.AppDb;
+import org.apache.shindig.social.core.model.BodyTypeDb;
+import org.apache.shindig.social.core.model.EmailDb;
+import org.apache.shindig.social.core.model.ImDb;
+import org.apache.shindig.social.core.model.ListFieldDb;
+import org.apache.shindig.social.core.model.NameDb;
+import org.apache.shindig.social.core.model.PermissionDb;
+import org.apache.shindig.social.core.model.PersonAccountDb;
+import org.apache.shindig.social.core.model.PersonAddressDb;
+import org.apache.shindig.social.core.model.PersonOrganizationDb;
+import org.apache.shindig.social.core.model.PersonPropertyDb;
+import org.apache.shindig.social.core.model.PhoneDb;
+import org.apache.shindig.social.core.model.PhotoDb;
+import org.apache.shindig.social.core.model.UrlDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Account;
+import org.apache.shindig.social.opensocial.model.Address;
+import org.apache.shindig.social.opensocial.model.Competence;
+import org.apache.shindig.social.opensocial.model.BodyType;
+import org.apache.shindig.social.opensocial.model.Drinker;
+import org.apache.shindig.social.opensocial.model.ListField;
+import org.apache.shindig.social.opensocial.model.LookingFor;
+import org.apache.shindig.social.opensocial.model.Name;
+import org.apache.shindig.social.opensocial.model.NetworkPresence;
+import org.apache.shindig.social.opensocial.model.Organization;
+import org.apache.shindig.social.opensocial.model.Person;
+import org.apache.shindig.social.opensocial.model.Smoker;
+import org.apache.shindig.social.opensocial.model.Url;
+
+import org.apache.commons.beanutils.BeanUtils;
+
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.JoinTable;
+import javax.persistence.ManyToMany;
+import javax.persistence.ManyToOne;
+import javax.persistence.NamedQueries;
+import javax.persistence.NamedQuery;
+import javax.persistence.OneToMany;
+import javax.persistence.PostLoad;
+import javax.persistence.PrePersist;
+import javax.persistence.Table;
+import javax.persistence.Temporal;
+import javax.persistence.TemporalType;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+
+import com.google.inject.name.Named;
+import com.google.inject.Inject;
+
+/**
+ * Default Implementation of the Person object in the org.apache.shindig.graaasp.jpa.
+ */
+@Entity
+@Table(name = "users")
+@NamedQueries(value = {
+    @NamedQuery(name = UserDb.FINDBY_USERID,
+        query = "select a from UserDb a where a.id = :id "),
+    @NamedQuery(name = UserDb.FINDBY_LIKE_USERID,
+        query = "select a from UserDb a where a.id like :id") })
+public class UserDb implements Person, DbObject {
+
+  public static final String GRAASP_URL = System.getProperty("shindig.container_url");
+
+  public static final String FINDBY_USERID = "q.user.findbyuserid";
+
+  public static final String PARAM_USERID = "id";
+
+  public static final String FINDBY_LIKE_USERID = "q.user.findbylikeuserid";
+
+  private static final String LOOKING_FOR_PROPERTY = "looking-for";
+
+  private static final String ACTIVITIES_PROPERTY = "activity";
+
+  private static final String BOOKS_PROPERTY = "book";
+
+  private static final String CARS_PROPERTY = "car";
+
+  private static final String HEROES_PROPERTY = "hero";
+
+  private static final String INTERESTS_PROPERTY = "interest";
+
+  private static final String LANGUAGES_PROPERTY = "language";
+
+  private static final String MOVIES_PROPERTY = "movie";
+
+  private static final String MUSIC_PROPERTY = "music";
+
+  private static final String FOOD_PROPERTY = "food";
+
+  private static final String QUOTES_PROPERTY = "quotes";
+
+  private static final String SPORTS_PROPERTY = "sport";
+
+  private static final String TAGS_PROPERTY = "tag";
+
+  private static final String TURNOFFS_PROPERTY = "turnoff";
+
+  private static final String TURNONS_PROPERTY = "turnon";
+
+  private static final String TVSHOWS_PROPERTY = "tvshow";
+
+  private static final Map<String, FilterSpecification> FILTER_COLUMNS =
+    new HashMap<String, FilterSpecification>();
+
+  private static final FilterOperation[] ALL_FILTEROPTIONS = new FilterOperation[] {
+      FilterOperation.equals, FilterOperation.contains, FilterOperation.present,
+      FilterOperation.startsWith };
+  private static final FilterOperation[] NUMERIC_FILTEROPTIONS = new FilterOperation[] {
+      FilterOperation.equals, FilterOperation.present };
+  @SuppressWarnings("unused")
+  private static final FilterOperation[] EQUALS_FILTEROPTIONS =
+    new FilterOperation[] { FilterOperation.equals };
+
+  static {
+    FILTER_COLUMNS.put("aboutMe", new FilterSpecification("aboutMe", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("age", new FilterSpecification("age", NUMERIC_FILTEROPTIONS));
+    FILTER_COLUMNS.put("birthday", new FilterSpecification("birthday", NUMERIC_FILTEROPTIONS));
+    FILTER_COLUMNS.put("children", new FilterSpecification("children", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("displayName", new FilterSpecification("displayName", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("drinker", new FilterSpecification("drinkerDb", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("ethnicity", new FilterSpecification("ethnicity", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("fashion", new FilterSpecification("fashion", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("gender", new FilterSpecification("gender", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("happiestWhen", new FilterSpecification("happiestWhen", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("humor", new FilterSpecification("humor", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("jobInterests", new FilterSpecification("jobInterests", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("livingArrangement", new FilterSpecification("livingArrangement",
+        ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("movies", new FilterSpecification("movies", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("networkPresenceDb", new FilterSpecification("networkPresenceDb",
+        ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("nickname", new FilterSpecification("nickname", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("pets", new FilterSpecification("pets", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("politicalViews", new FilterSpecification("politicalViews",
+        ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("relationshipStatus", new FilterSpecification("relationshipStatus",
+        ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("religion", new FilterSpecification("religion", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("romance", new FilterSpecification("romance", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("scaredOf", new FilterSpecification("scaredOf", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("sexualOrientation", new FilterSpecification("sexualOrientation",
+        ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("smokerDb", new FilterSpecification("smokerDb", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("status", new FilterSpecification("status", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("utcOffset", new FilterSpecification("utcOffset", NUMERIC_FILTEROPTIONS));
+
+    // the following are special operations which are accepted, but work differently
+    FILTER_COLUMNS.put("topFriends", new FilterSpecification());
+    FILTER_COLUMNS.put("hasApp", new FilterSpecification());
+  }
+
+  private static final FilterCapability FILTER_CAPABILITY = new FilterCapability() {
+    /**
+     * {@inheritDoc}
+     */
+    public String findFilterableProperty(String fieldName, FilterOperation filterOperation) {
+      FilterSpecification spec = FILTER_COLUMNS.get(fieldName);
+      if (spec != null) {
+        return spec.translateProperty(filterOperation);
+      }
+      return null;
+    }
+
+  };
+
+  public static final String JPQL_FINDALLPERSON = null;
+
+  // TODO The commented out query supports sorting by friend.score but needs a join with FriendDb which returns duplicates.
+  // Using 'group by' to avoid duplicates doesn't work in HSQLDB or Derby - causes a "Not in aggregate function or group by clause" jdbc exception.
+  // public static final String JPQL_FINDPERSON_BY_FRIENDS = "select p from UserDb p join FriendDb f on p.objectId = f.friend.objectId where p.objectId in (select f.friend.objectId from UserDb p, FriendDb f where p.objectId = f.person.objectId and ";
+  public static final String JPQL_FINDPERSON_BY_FRIENDS = "select p from UserDb p where p.objectId in (select f.friend.objectId from UserDb p, FriendDb f where p.objectId = f.person.objectId and ";
+  public static final String JPQL_FINDPERSON_BY_PERMISSIONS = "select a from UserDb a where a.id in (select p.userId from PermissionDb p where p.status = 'joined' and ";
+  public static final String JPQL_PERMISSIONS = "select p.userId from PermissionDb p where p.status = 'joined' and ";
+  public static final String JPQL_ALL_PUBLIC_PEOPLE = "select u.objectId from UserDb u where u.visibilityLevel = 1";
+
+  public static final Object JPQL_FINDPERSON_BY_GROUP = null;
+
+  public static final Object JPQL_FINDPERSON = "select p from UserDb p where ";
+
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "id")
+  private long objectId;
+
+  /**
+   * An optimistic locking field.
+   */
+  // @Version
+  // @Column(name = "version")
+  @Transient
+  protected long version;
+
+  @Basic
+  @Column(name = "description", length = 255)
+  protected String aboutMe;
+  
+  @Basic
+  @Column(name = "visibility_level", length = 11)
+  protected int visibilityLevel;
+
+  // @OneToMany(targetEntity = PersonPropertyDb.class, mappedBy = "person", cascade = ALL)
+  @Transient
+  protected List<PersonPropertyDb> properties = Lists.newArrayList();
+
+  // @OneToMany(targetEntity = PersonAccountDb.class, mappedBy = "person", cascade = ALL)
+  @Transient
+  protected List<Account> accounts;
+
+  @Transient
+  protected List<String> activities;
+
+  // @Transient
+  @OneToMany(targetEntity = PersonAddressDb.class, mappedBy = "person", cascade = ALL)
+  protected List<Address> addresses;
+    
+  // @Basic
+  // @Column(name = "competences")
+  // @Transient
+  @OneToMany(targetEntity = CompetenceDb.class, mappedBy = "person", cascade = ALL)
+  protected List<Competence> competences;
+  
+  // @Basic
+  // @Column(name = "age")
+  @Transient
+  protected Integer age;
+
+  // @ManyToOne(targetEntity = BodyTypeDb.class, cascade = ALL)
+  // @JoinColumn(name = "body_type_id", referencedColumnName = "id")
+  @Transient
+  protected BodyType bodyType;
+
+  @Transient
+  protected List<String> books;
+
+  @Transient
+  protected List<String> cars;
+
+  // @Basic
+  // @Column(name = "children", length = 255)
+  @Transient
+  protected String children;
+
+  /**
+   *
+   */
+  // @ManyToOne(targetEntity = AddressDb.class, cascade = { PERSIST, MERGE, REFRESH })
+  // @JoinColumn(name = "address_id", referencedColumnName = "id")
+  @Transient
+  protected Address currentLocation;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "birthday")
+  // @Temporal(TemporalType.DATE)
+  @Transient
+  protected Date birthday;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "drinker", length = 255)
+  @Transient
+  protected String drinkerDb;
+
+  @Transient
+  protected Enum<Drinker> drinker;
+
+  @Basic
+  @Column(name = "name", length = 255)
+  private String displayName;
+  
+  @Basic
+  @Column(name = "picture")
+  protected String picture;
+
+  /**
+   *
+   */
+  // @Transient
+  // @Basic
+  // @Column(name = "emails")  
+  @OneToMany(targetEntity = EmailDb.class, mappedBy = "person", cascade = ALL)
+  protected List<ListField> emails;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "ethnicity", length = 255)
+  @Transient
+  protected String ethnicity;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "fashion", length = 255)
+  @Transient
+  protected String fashion;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> food;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "gender", length = 255)
+  @Transient
+  protected String genderDb;
+
+  @Transient
+  protected Gender gender;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "happiest_when", length = 255)
+  @Transient
+  protected String happiestWhen;
+
+  /**
+   *
+   */
+  @Transient
+  protected Boolean hasApp;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> heroes;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "humor", length = 255)
+  @Transient
+  protected String humor;
+
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "id", length = 255, insertable = false, updatable = false)
+  protected String id;
+
+  /**
+   *
+   */
+  // @OneToMany(targetEntity = ImDb.class, mappedBy = "person", cascade = ALL)
+  @Transient
+  protected List<ListField> ims;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> interests;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "job_interests", length = 255)
+  @Transient
+  protected String jobInterests;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> languagesSpoken;
+
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "updated_at")
+  @Temporal(TemporalType.TIMESTAMP)
+  protected Date updated;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "living_arrangement", length = 255)
+  @Transient
+  protected String livingArrangement;
+
+  /**
+   *
+   */
+  @Transient
+  // stored as a property, processed on get,set
+  protected List<Enum<LookingFor>> lookingFor;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> movies;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> music;
+
+  /**
+   *
+   */
+  // @Transient
+  @ManyToOne(targetEntity = NameDb.class, cascade = ALL)
+  @JoinColumn(name = "name_id", referencedColumnName = "id")
+  protected Name name;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "network_presence", length = 255)
+  @Transient
+  protected String networkPresenceDb;
+
+  @Transient
+  protected Enum<NetworkPresence> networkPresence = new EnumDb<NetworkPresence>(
+      NetworkPresence.XA);
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "nickname", length = 255)
+  @Transient
+  protected String nickname;
+
+  /**
+   *
+   */
+  // @OneToMany(targetEntity = PersonOrganizationDb.class, mappedBy = "person", cascade = { PERSIST,
+  //     MERGE, REFRESH })
+  @Transient
+  protected List<Organization> organizations;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "pets", length = 255)
+  @Transient
+  protected String pets;
+
+  /**
+   *
+   */
+  // @OneToMany(targetEntity = PhoneDb.class, mappedBy = "person", cascade = ALL)
+  @Transient
+  protected List<ListField> phoneNumbers;
+
+  /**
+   *
+   */
+  // @OneToMany(targetEntity = PhotoDb.class, mappedBy = "person", cascade = ALL)
+  @Transient
+  protected List<ListField> photos;
+  
+  // @Basic
+  // @Column(name = "political_views", length = 255)
+  @Transient
+  protected String politicalViews;
+
+  // @Basic
+  // @Column(name = "preferredUsername", length = 255)
+  @Transient
+  protected String preferredUsername;
+
+  /**
+   *
+   */
+  @Transient
+  protected Url profileSong;
+
+  /**
+   *
+   */
+  @Transient
+  protected Url profileVideo;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> quotes;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "relationship_status", length = 255)
+  @Transient
+  protected String relationshipStatus;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "religion", length = 255)
+  @Transient
+  protected String religion;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "romance", length = 255)
+  @Transient
+  protected String romance;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "scared_of", length = 255)
+  @Transient
+  protected String scaredOf;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "sexual_orientation", length = 255)
+  @Transient
+  protected String sexualOrientation;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "smoker", length = 255)
+  @Transient
+  protected String smokerDb;
+
+  @Transient
+  protected Enum<Smoker> smoker;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> sports;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "status", length = 255)
+  @Transient
+  protected String status;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> tags;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "utc_offset")
+  @Transient
+  protected Long utcOffset;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> turnOffs;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> turnOns;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> tvShows;
+
+  /**
+   *
+   */
+  // @OneToMany(targetEntity = UrlDb.class, mappedBy = "person", cascade = ALL)
+  @Transient
+  protected List<Url> urls;
+
+  // Note: Not in the opensocial js person object directly
+  @Transient
+  private boolean isOwner = false;
+
+  @Transient
+  private boolean isViewer = false;
+
+  /**
+   * People have apps that they use, many people may use the same app, hence this is
+   * a many to many property, the link table is person_app where
+   * person_app.person_id points to person.oid and person_app.app_id points
+   * to app.oid.
+   */
+  // @ManyToMany(targetEntity = AppDb.class)
+  // @JoinTable(name = "person_app",
+  //     joinColumns = @JoinColumn(name = "person_id", referencedColumnName = "id"),
+  //     inverseJoinColumns = @JoinColumn(name = "app_id", referencedColumnName = "id"))
+  @Transient
+  protected List<AppDb> applictions;
+
+  public UserDb() {
+  }
+
+  public UserDb(String id, String displayName) {
+    this.id = id;
+    // this.name = name;
+    this.displayName = displayName;
+  }
+
+  public String getAboutMe() {
+    return aboutMe;
+  }
+
+  public void setAboutMe(String aboutMe) {
+    this.aboutMe = aboutMe;
+  }
+  
+  public String getVisibilityLevel() {
+    return decodeVisibility(visibilityLevel);
+  }
+
+  public void setVisibilityLevel(String visibilityLevel) {
+    this.visibilityLevel = encodeVisibility(visibilityLevel);
+  }
+  
+  public String decodeVisibility(int visibilityLevel){
+    if(visibilityLevel == 1){
+      return "public";
+    }
+    else if(visibilityLevel == 2){
+      return "closed";
+    }
+    else{
+      return "hidden";  
+    }
+  }
+  
+  public int encodeVisibility(String visibilityStr){
+    if(visibilityStr == "public"){
+      return 1;
+    }
+    else if(visibilityStr == "closed"){
+      return 2;
+    }
+    else{
+      return 3;
+    }
+  }
+
+  public List<Account> getAccounts() {
+    return accounts;
+  }
+
+  public void setAccounts(List<Account> accounts) {
+    this.accounts = accounts;
+  }
+
+  public List<String> getActivities() {
+    return activities;
+  }
+
+  public void setActivities(List<String> activities) {
+    this.activities = activities;
+  }
+
+  // @Transient
+  // protected List<Address> addresses;
+  public List<Address> getAddresses() {
+    return addresses;
+  }
+
+  public void setAddresses(List<Address> addresses) {
+    this.addresses = addresses;
+  }
+    
+  // @Basic
+  // @Column(name = "competences")
+  // protected String competences;
+  public List<Competence> getCompetences() {
+    return competences;
+  }
+
+  public void setCompetences(List<Competence> competences) {
+    this.competences = competences;
+  }
+  
+  public Integer getAge() {
+    return age;
+  }
+
+  public void setAge(Integer age) {
+    this.age = age;
+  }
+
+  public BodyType getBodyType() {
+    return bodyType;
+  }
+
+  public void setBodyType(BodyType bodyType) {
+    this.bodyType = bodyType;
+  }
+
+  public List<String> getBooks() {
+    return books;
+  }
+
+  public void setBooks(List<String> books) {
+    this.books = books;
+  }
+
+  public List<String> getCars() {
+    return cars;
+  }
+
+  public void setCars(List<String> cars) {
+    this.cars = cars;
+  }
+
+  public String getChildren() {
+    return children;
+  }
+
+  public void setChildren(String children) {
+    this.children = children;
+  }
+
+  public Address getCurrentLocation() {
+    return currentLocation;
+  }
+
+  public void setCurrentLocation(Address currentLocation) {
+    this.currentLocation = currentLocation;
+  }
+
+  public Date getBirthday() {
+    if (birthday == null) {
+      return null;
+    }
+    return new Date(birthday.getTime());
+  }
+
+  public void setBirthday(Date birthday) {
+    if (birthday == null) {
+      this.birthday = null;
+    } else {
+      this.birthday = new Date(birthday.getTime());
+    }
+  }
+
+  public Enum<Drinker> getDrinker() {
+    return this.drinker;
+  }
+
+  public void setDrinker(Enum<Drinker> newDrinker) {
+    this.drinker = newDrinker;
+  }
+
+  public List<ListField> getEmails() {
+    return emails;
+  }
+
+  public void setEmails(List<ListField> emails) {
+    this.emails = emails;
+  }
+
+  public String getEthnicity() {
+    return ethnicity;
+  }
+
+  public void setEthnicity(String ethnicity) {
+    this.ethnicity = ethnicity;
+  }
+
+  public String getFashion() {
+    return fashion;
+  }
+
+  public void setFashion(String fashion) {
+    this.fashion = fashion;
+  }
+
+  public List<String> getFood() {
+    return food;
+  }
+
+  public void setFood(List<String> food) {
+    this.food = food;
+  }
+
+  public Gender getGender() {
+    return gender;
+  }
+
+  public void setGender(Gender newGender) {
+    this.gender = newGender;
+  }
+
+  public String getHappiestWhen() {
+    return happiestWhen;
+  }
+
+  public void setHappiestWhen(String happiestWhen) {
+    this.happiestWhen = happiestWhen;
+  }
+
+  public Boolean getHasApp() {
+    return hasApp;
+  }
+
+  public void setHasApp(Boolean hasApp) {
+    this.hasApp = hasApp;
+  }
+
+  public List<String> getHeroes() {
+    return heroes;
+  }
+
+  public void setHeroes(List<String> heroes) {
+    this.heroes = heroes;
+  }
+
+  public String getHumor() {
+    return humor;
+  }
+
+  public void setHumor(String humor) {
+    this.humor = humor;
+  }
+
+  public String getId() {
+    return id;
+  }
+
+  public void setId(String id) {
+    this.id = id;
+  }
+
+  public List<ListField> getIms() {
+    return ims;
+  }
+
+  public void setIms(List<ListField> ims) {
+    this.ims = ims;
+  }
+
+  public List<String> getInterests() {
+    return interests;
+  }
+
+  public void setInterests(List<String> interests) {
+    this.interests = interests;
+  }
+
+  public String getJobInterests() {
+    return jobInterests;
+  }
+
+  public void setJobInterests(String jobInterests) {
+    this.jobInterests = jobInterests;
+  }
+
+  public List<String> getLanguagesSpoken() {
+    return languagesSpoken;
+  }
+
+  public void setLanguagesSpoken(List<String> languagesSpoken) {
+    this.languagesSpoken = languagesSpoken;
+  }
+
+  public Date getUpdated() {
+    if (updated == null) {
+      return null;
+    }
+    return new Date(updated.getTime());
+  }
+
+  public void setUpdated(Date updated) {
+    if (updated == null) {
+      this.updated = null;
+    } else {
+      this.updated = new Date(updated.getTime());
+    }
+  }
+
+  public String getLivingArrangement() {
+    return livingArrangement;
+  }
+
+  public void setLivingArrangement(String livingArrangement) {
+    this.livingArrangement = livingArrangement;
+  }
+
+  public List<Enum<LookingFor>> getLookingFor() {
+    return lookingFor;
+  }
+
+  public void setLookingFor(List<Enum<LookingFor>> lookingFor) {
+    this.lookingFor = lookingFor;
+  }
+
+  public List<String> getMovies() {
+    return movies;
+  }
+
+  public void setMovies(List<String> movies) {
+    this.movies = movies;
+  }
+
+  public List<String> getMusic() {
+    return music;
+  }
+
+  public void setMusic(List<String> music) {
+    this.music = music;
+  }
+
+  public Name getName() {
+    return name;
+  }
+
+  public void setName(Name name) {
+    this.name = name;
+  }
+
+  public Enum<NetworkPresence> getNetworkPresence() {
+    return networkPresence;
+  }
+
+  public void setNetworkPresence(Enum<NetworkPresence> networkPresence) {
+    this.networkPresence = networkPresence;
+  }
+
+  public String getNickname() {
+    return nickname;
+  }
+
+  public void setNickname(String nickname) {
+    this.nickname = nickname;
+  }
+
+  public List<Organization> getOrganizations() {
+    return organizations;
+  }
+
+  public void setOrganizations(List<Organization> organizations) {
+    this.organizations = organizations;
+  }
+
+  public String getPets() {
+    return pets;
+  }
+
+  public void setPets(String pets) {
+    this.pets = pets;
+  }
+
+  public List<ListField> getPhoneNumbers() {
+    return phoneNumbers;
+  }
+
+  public void setPhoneNumbers(List<ListField> phoneNumbers) {
+    this.phoneNumbers = phoneNumbers;
+  }
+
+  public List<ListField> getPhotos() {
+    return photos;
+  }
+
+  public void setPhotos(List<ListField> photos) {
+    this.photos = photos;
+  }
+
+  public String getPoliticalViews() {
+    return politicalViews;
+  }
+
+  public void setPoliticalViews(String politicalViews) {
+    this.politicalViews = politicalViews;
+  }
+
+  public String getPreferredUsername() {
+    return preferredUsername;
+  }
+
+  public void setPreferredUsername(String preferredUsername) {
+    this.preferredUsername = preferredUsername;
+  }
+
+  public Url getProfileSong() {
+    return profileSong;
+  }
+
+  public void setProfileSong(Url profileSong) {
+    this.profileSong = profileSong;
+  }
+
+  public Url getProfileVideo() {
+    return profileVideo;
+  }
+
+  public void setProfileVideo(Url profileVideo) {
+    this.profileVideo = profileVideo;
+  }
+
+  public List<String> getQuotes() {
+    return quotes;
+  }
+
+  public void setQuotes(List<String> quotes) {
+    this.quotes = quotes;
+  }
+
+  public String getRelationshipStatus() {
+    return relationshipStatus;
+  }
+
+  public void setRelationshipStatus(String relationshipStatus) {
+    this.relationshipStatus = relationshipStatus;
+  }
+
+  public String getReligion() {
+    return religion;
+  }
+
+  public void setReligion(String religion) {
+    this.religion = religion;
+  }
+
+  public String getRomance() {
+    return romance;
+  }
+
+  public void setRomance(String romance) {
+    this.romance = romance;
+  }
+
+  public String getScaredOf() {
+    return scaredOf;
+  }
+
+  public void setScaredOf(String scaredOf) {
+    this.scaredOf = scaredOf;
+  }
+
+  public String getSexualOrientation() {
+    return sexualOrientation;
+  }
+
+  public void setSexualOrientation(String sexualOrientation) {
+    this.sexualOrientation = sexualOrientation;
+  }
+
+  public Enum<Smoker> getSmoker() {
+    return this.smoker;
+  }
+
+  public void setSmoker(Enum<Smoker> newSmoker) {
+    this.smoker = newSmoker;
+  }
+
+  public List<String> getSports() {
+    return sports;
+  }
+
+  public void setSports(List<String> sports) {
+    this.sports = sports;
+  }
+
+  public String getStatus() {
+    return status;
+  }
+
+  public void setStatus(String status) {
+    this.status = status;
+  }
+
+  public List<String> getTags() {
+    return tags;
+  }
+
+  public void setTags(List<String> tags) {
+    this.tags = tags;
+  }
+
+  public Long getUtcOffset() {
+    return utcOffset;
+  }
+
+  public void setUtcOffset(Long utcOffset) {
+    this.utcOffset = utcOffset;
+  }
+
+  public List<String> getTurnOffs() {
+    return turnOffs;
+  }
+
+  public void setTurnOffs(List<String> turnOffs) {
+    this.turnOffs = turnOffs;
+  }
+
+  public List<String> getTurnOns() {
+    return turnOns;
+  }
+
+  public void setTurnOns(List<String> turnOns) {
+    this.turnOns = turnOns;
+  }
+
+  public List<String> getTvShows() {
+    return tvShows;
+  }
+
+  public void setTvShows(List<String> tvShows) {
+    this.tvShows = tvShows;
+  }
+
+  public List<Url> getUrls() {
+    return urls;
+  }
+
+  public void setUrls(List<Url> urls) {
+    this.urls = urls;
+  }
+
+  public boolean getIsOwner() {
+    return isOwner;
+  }
+
+  public void setIsOwner(boolean isOwner) {
+    this.isOwner = isOwner;
+  }
+
+  public boolean getIsViewer() {
+    return isViewer;
+  }
+
+  public void setIsViewer(boolean isViewer) {
+    this.isViewer = isViewer;
+  }
+
+  // Proxied fields
+
+  public String getProfileUrl() {
+    return GRAASP_URL+"/#item=user_"+String.valueOf(objectId);    
+  }
+
+  public void setProfileUrl(String profileUrl) {
+    Url url = getListFieldWithType(PROFILE_URL_TYPE, getUrls());
+    if (url != null) {
+      url.setValue(profileUrl);
+    } else {
+      setUrls(addListField(new UrlDb(profileUrl, null, PROFILE_URL_TYPE), getUrls()));
+    }
+  }
+
+  public String getThumbnailUrl() {
+    String pic = picture;
+    if (pic == null || pic.equals("")) {
+      return GRAASP_URL+"/images/pics/user_thumb.png";
+    }
+    return GRAASP_URL+"/user/picture/"+String.valueOf(objectId)+"/thumb/"+pic;    
+  }
+
+  public void setThumbnailUrl(String thumbnailUrl) {
+    ListField photo = getListFieldWithType(THUMBNAIL_PHOTO_TYPE, getPhotos());
+    if (photo != null) {
+      photo.setValue(thumbnailUrl);
+    } else {
+      setPhotos(addListField(new ListFieldDb(THUMBNAIL_PHOTO_TYPE, thumbnailUrl), getPhotos()));
+    }
+  }
+
+  private <T extends ListField> T getListFieldWithType(String type, List<T> list) {
+    if (list != null) {
+      for (T url : list) {
+        if (type.equalsIgnoreCase(url.getType())) {
+          return url;
+        }
+      }
+    }
+
+    return null;
+  }
+
+  private <T extends ListField> List<T> addListField(T field, List<T> list) {
+    if (list == null) {
+      list = Lists.newArrayList();
+    }
+    list.add(field);
+    return list;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+  
+  @PrePersist
+  public void populateDbFields() {
+    drinkerDb = drinker.toString();
+    genderDb = gender.toString();
+    networkPresenceDb = networkPresence.toString();
+    smokerDb = smoker.toString();
+
+    List<String> lookingFor = Lists.newArrayList();
+    for (Enum<LookingFor> np : this.lookingFor) {
+      lookingFor.add(np.toString());
+    }
+    Map<String, List<String>> toSave = new HashMap<String, List<String>>();
+    toSave.put(LOOKING_FOR_PROPERTY, lookingFor);
+    toSave.put(ACTIVITIES_PROPERTY, this.activities);
+    toSave.put(BOOKS_PROPERTY, this.books);
+    toSave.put(CARS_PROPERTY, this.cars);
+    toSave.put(FOOD_PROPERTY, this.food);
+    toSave.put(HEROES_PROPERTY, this.heroes);
+    toSave.put(INTERESTS_PROPERTY, this.interests);
+    toSave.put(LANGUAGES_PROPERTY, this.languagesSpoken);
+    toSave.put(MOVIES_PROPERTY, this.movies);
+    toSave.put(MUSIC_PROPERTY, this.music);
+    toSave.put(QUOTES_PROPERTY, this.quotes);
+    toSave.put(SPORTS_PROPERTY, this.sports);
+    toSave.put(TAGS_PROPERTY, this.tags);
+    toSave.put(TURNOFFS_PROPERTY, this.turnOffs);
+    toSave.put(TURNONS_PROPERTY, this.turnOns);
+    toSave.put(TVSHOWS_PROPERTY, this.tvShows);
+
+    for (Entry<String, List<String>> e : toSave.entrySet()) {
+      // add new entries
+      for (String v : e.getValue()) {
+        boolean present = false;
+        for (PersonPropertyDb pp : properties) {
+          if (e.getKey().equals(pp.getType()) && v.equals(pp.getValue())) {
+            present = true;
+            break;
+          }
+        }
+        if (!present) {
+          PersonPropertyDb pp = new PersonPropertyDb();
+          pp.setType(e.getKey());
+          pp.setValue(v);
+        }
+      }
+      // remove missing entries
+      List<PersonPropertyDb> toRemove = Lists.newArrayList();
+      for (PersonPropertyDb pp : properties) {
+        if (e.getKey().equals(pp.getType())) {
+          boolean present = false;
+          for (String v : e.getValue()) {
+            if (pp.getValue().equals(v)) {
+              present = true;
+              break;
+            }
+          }
+          if (!present) {
+            toRemove.add(pp);
+          }
+        }
+      }
+      properties.removeAll(toRemove);
+    }
+  }
+
+  @PostLoad
+  public void loadTransientFields() {
+    // no loading of transient fields
+    
+    // drinkerDb = drinker.toString();
+    // genderDb = gender.toString();
+    // networkPresenceDb = networkPresence.toString();
+    // smokerDb = smoker.toString();
+    // 
+    // drinker = new EnumDb<Drinker>(Drinker.valueOf(drinkerDb));
+    // gender = Gender.valueOf(genderDb);
+    // networkPresence = new EnumDb<NetworkPresence>(NetworkPresence.valueOf(networkPresenceDb));
+    // smoker = new EnumDb<Smoker>(Smoker.valueOf(smokerDb));
+    // 
+    // List<String> lookingFor = Lists.newArrayList();
+    // this.activities = Lists.newArrayList();
+    // this.books = Lists.newArrayList();
+    // this.cars = Lists.newArrayList();
+    // this.food = Lists.newArrayList();
+    // this.heroes = Lists.newArrayList();
+    // this.interests = Lists.newArrayList();
+    // this.languagesSpoken = Lists.newArrayList();
+    // this.movies = Lists.newArrayList();
+    // this.music = Lists.newArrayList();
+    // this.quotes = Lists.newArrayList();
+    // this.sports = Lists.newArrayList();
+    // this.tags = Lists.newArrayList();
+    // this.turnOffs = Lists.newArrayList();
+    // this.turnOns = Lists.newArrayList();
+    // this.tvShows = Lists.newArrayList();
+    // 
+    // Map<String, List<String>> toSave = Maps.newHashMap();
+    // 
+    // toSave.put(LOOKING_FOR_PROPERTY, lookingFor);
+    // toSave.put(ACTIVITIES_PROPERTY, this.activities);
+    // toSave.put(BOOKS_PROPERTY, this.books);
+    // toSave.put(CARS_PROPERTY, this.cars);
+    // toSave.put(FOOD_PROPERTY, this.food);
+    // toSave.put(HEROES_PROPERTY, this.heroes);
+    // toSave.put(INTERESTS_PROPERTY, this.interests);
+    // toSave.put(LANGUAGES_PROPERTY, this.languagesSpoken);
+    // toSave.put(MOVIES_PROPERTY, this.movies);
+    // toSave.put(MUSIC_PROPERTY, this.music);
+    // toSave.put(QUOTES_PROPERTY, this.quotes);
+    // toSave.put(SPORTS_PROPERTY, this.sports);
+    // toSave.put(TAGS_PROPERTY, this.tags);
+    // toSave.put(TURNOFFS_PROPERTY, this.turnOffs);
+    // toSave.put(TURNONS_PROPERTY, this.turnOns);
+    // toSave.put(TVSHOWS_PROPERTY, this.tvShows);
+    // 
+    // for (PersonPropertyDb pp : properties) {
+    //   List<String> l = toSave.get(pp.type);
+    //   if (l != null) {
+    //     l.add(pp.getValue());
+    //   }
+    // }
+    // 
+    // this.lookingFor = Lists.newArrayList();
+    // for (String lf : lookingFor) {
+    //   this.lookingFor.add(new EnumDb<LookingFor>(LookingFor.valueOf(lf)));
+    // }
+
+  }
+
+  /*
+   * (non-Javadoc)
+   *
+   * @see org.apache.shindig.social.opensocial.model.Person#getDisplayName()
+   */
+  public String getDisplayName() {
+    return displayName;
+  }
+
+  /*
+   * (non-Javadoc)
+   *
+   * @see org.apache.shindig.social.opensocial.model.Person#setDisplayName(java.lang.String)
+   */
+  public void setDisplayName(String displayName) {
+    this.displayName = displayName;
+  }
+
+  public static FilterCapability getFilterCapability() {
+    return FILTER_CAPABILITY;
+
+  }
+  /**
+   * @return the applictions
+   */
+  public List<AppDb> getApplictions() {
+    return applictions;
+  }
+
+  /**
+   * @param applictions the applictions to set
+   */
+  public void setApplictions(List<AppDb> applictions) {
+    this.applictions = applictions;
+  }
+
+  /** {@inheritDoc} */
+  public Map<String, ? extends Object> getAppData()
+  {
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public void setAppData( Map<String, ? extends Object> appData )
+  {
+  }
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/WidgetDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/WidgetDb.java
new file mode 100644
index 0000000..ae30477
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/WidgetDb.java
@@ -0,0 +1,517 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.CascadeType.ALL;
+import static javax.persistence.CascadeType.MERGE;
+import static javax.persistence.CascadeType.PERSIST;
+import static javax.persistence.CascadeType.REFRESH;
+import static javax.persistence.GenerationType.IDENTITY;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
+import org.apache.shindig.protocol.model.Enum;
+import org.apache.shindig.protocol.model.FilterOperation;
+import org.apache.shindig.social.opensocial.model.Account;
+import org.apache.shindig.social.opensocial.model.Address;
+import org.apache.shindig.social.opensocial.model.BodyType;
+import org.apache.shindig.social.opensocial.model.Drinker;
+import org.apache.shindig.social.opensocial.model.ListField;
+import org.apache.shindig.social.opensocial.model.LookingFor;
+import org.apache.shindig.social.opensocial.model.Name;
+import org.apache.shindig.social.opensocial.model.NetworkPresence;
+import org.apache.shindig.social.opensocial.model.Organization;
+import org.apache.shindig.social.opensocial.model.Person;
+import org.apache.shindig.social.opensocial.model.App;
+import org.apache.shindig.social.opensocial.model.Smoker;
+import org.apache.shindig.social.opensocial.model.Url;
+
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.JoinTable;
+import javax.persistence.ManyToMany;
+import javax.persistence.ManyToOne;
+import javax.persistence.NamedQueries;
+import javax.persistence.NamedQuery;
+import javax.persistence.OneToMany;
+import javax.persistence.PostLoad;
+import javax.persistence.PrePersist;
+import javax.persistence.Table;
+import javax.persistence.Temporal;
+import javax.persistence.TemporalType;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+
+import com.google.inject.name.Named;
+import com.google.inject.Inject;
+
+
+/**
+ * Default Implementation of the Person object in the org.apache.shindig.graaasp.jpa.
+ */
+@Entity
+@Table(name = "widgets")
+@NamedQueries(value = {
+    @NamedQuery(name = WidgetDb.FINDBY_WIDGETID,
+        query = "select w from WidgetDb w where w.id = :id "),
+    @NamedQuery(name = WidgetDb.FINDBY_LIKE_WIDGETID,
+        query = "select w from WidgetDb w where w.id like :id") })
+public class WidgetDb implements App, DbObject {
+
+  public static final String GRAASP_URL = System.getProperty("shindig.container_url");
+  
+  public static final String FINDBY_WIDGETID = "q.widget.findbywidgetid";
+
+  public static final String PARAM_WIDGETID = "id";
+
+  public static final String FINDBY_LIKE_WIDGETID = "q.widget.findbylikewidgetid";
+
+  private static final String INTERESTS_PROPERTY = "interest";
+
+  private static final Map<String, FilterSpecification> FILTER_COLUMNS =
+    new HashMap<String, FilterSpecification>();
+
+  private static final FilterOperation[] ALL_FILTEROPTIONS = new FilterOperation[] {
+      FilterOperation.equals, FilterOperation.contains, FilterOperation.present,
+      FilterOperation.startsWith };
+  private static final FilterOperation[] NUMERIC_FILTEROPTIONS = new FilterOperation[] {
+      FilterOperation.equals, FilterOperation.present };
+  @SuppressWarnings("unused")
+  private static final FilterOperation[] EQUALS_FILTEROPTIONS =
+    new FilterOperation[] { FilterOperation.equals };
+
+  static {
+    FILTER_COLUMNS.put("displayName", new FilterSpecification("displayName", ALL_FILTEROPTIONS));
+
+    // the following are special operations which are accepted, but work differently
+    FILTER_COLUMNS.put("topFriends", new FilterSpecification());
+    FILTER_COLUMNS.put("hasApp", new FilterSpecification());
+  }
+
+  private static final FilterCapability FILTER_CAPABILITY = new FilterCapability() {
+    /**
+     * {@inheritDoc}
+     */
+    public String findFilterableProperty(String fieldName, FilterOperation filterOperation) {
+      FilterSpecification spec = FILTER_COLUMNS.get(fieldName);
+      if (spec != null) {
+        return spec.translateProperty(filterOperation);
+      }
+      return null;
+    }
+
+  };
+
+  public static final String JPQL_FINDALLPERSON = null;
+
+  // TODO The commented out query supports sorting by friend.score but needs a join with FriendDb which returns duplicates.
+  // Using 'group by' to avoid duplicates doesn't work in HSQLDB or Derby - causes a "Not in aggregate function or group by clause" jdbc exception.
+  // public static final String JPQL_FINDPERSON_BY_FRIENDS = "select p from PersonDb p join FriendDb f on p.objectId = f.friend.objectId where p.objectId in (select f.friend.objectId from PersonDb p, FriendDb f where p.objectId = f.person.objectId and ";
+  public static final String JPQL_FINDPERSON_BY_FRIENDS = "select p from PersonDb p where p.objectId in (select f.friend.objectId from PersonDb p, FriendDb f where p.objectId = f.person.objectId and ";
+
+  public static final Object JPQL_FINDPERSON_BY_GROUP = null;
+
+  public static final Object JPQL_FINDWIDGET = "select w from WidgetDb w where ";
+  public static final Object JPQL_FINDWIDGETS = "select w from WidgetDb w where ";
+
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "id")
+  private long objectId;
+  
+  /**
+   * The internal parentId and parentType used for references to the parent of a widget.
+   */
+  @Basic
+  @Column(name = "parent_id", length = 255)
+  private String parentId;
+  
+  @Basic
+  @Column(name = "parent_type", length = 255)
+  protected String parentType;
+
+  /**
+   * An optimistic locking field.
+   */
+
+  @Basic
+  @Column(name = "entity", length = 255)
+  protected String appUrl;
+  
+  @Basic
+  @Column(name = "format_settings_type", length = 255)
+  protected String appType;
+
+  @Transient
+  protected String token;
+
+  @Transient
+  protected String author;
+  
+  @Transient
+  protected String authorEmail;
+
+  @Basic
+  @Column(name = "name", length = 255)
+  private String displayName;
+
+  @Basic
+  @Column(name = "name", length = 255, insertable = false, updatable = false)
+  private String name;
+  
+  @Basic
+  @Column(name = "picture")
+  protected String picture;
+  
+  
+  /**
+   *
+   */
+  @Transient
+  protected Integer height;
+
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "description", length = 255)
+  protected String description;
+
+
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "id", length = 255, insertable = false, updatable = false)
+  protected String id;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<ListField> ims;
+
+
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "updated_at")
+  @Temporal(TemporalType.TIMESTAMP)
+  protected Date updated;
+
+  /**
+   *
+   */
+  @Transient
+  protected String screenshotUrl;
+  
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "external_thumbnail", length = 255)
+  protected String thumbnailUrl;
+
+
+  /**
+   *
+   */
+  @Transient
+  protected Long utcOffset;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> tags;
+
+  // Note: Not in the opensocial js person object directly
+  @Transient
+  private boolean isOwner = false;
+
+  public WidgetDb() {
+  }
+
+  public WidgetDb(String id, String displayName) {
+    this.id = id;
+    this.displayName = displayName;
+  }
+
+  public String getAppType() {
+	  return appType;
+  }
+
+  public void setAppType(String appType) {
+	  this.appType = appType;
+  }
+	  
+  public String getAppUrl() {
+    return appUrl;
+  }
+
+  public void setAppUrl(String appUrl) {
+    this.appUrl = appUrl;
+  }
+
+  public String getToken() {
+    return token;
+  }
+
+  public void setToken(String token) {
+    this.token = token;
+  }
+
+  public String getAuthor() {
+    return author;
+  }
+
+  public void setAuthor(String author) {
+    this.author = author;
+  }
+
+  public Integer getHeight() {
+    return height;
+  }
+
+  public void setHeight(Integer height) {
+    this.height = height;
+  }
+
+  public String getScreenshotUrl() {
+    return screenshotUrl;
+  }
+
+  public void setScreenshotUrl(String screenshotUrl) {
+    this.screenshotUrl = screenshotUrl;
+  }
+  
+  public String getProfileUrl() {
+    return GRAASP_URL+"/#item=widget_"+String.valueOf(objectId);     
+  }
+
+  public void setProfileUrl(String profileUrl) {
+
+  }
+
+  public String getThumbnailUrl() {
+    String pic = picture;
+    if (pic == null || pic.equals("")) {
+      return GRAASP_URL+"/images/pics/widget_thumb.png";
+    }
+    
+    return GRAASP_URL+"/widget/picture/"+String.valueOf(objectId)+"/thumb/"+pic;        
+  }
+
+  public void setThumbnailUrl(String thumbnailUrl) {
+    this.thumbnailUrl = thumbnailUrl;
+  }
+
+  public String getAuthorEmail() {
+    return authorEmail;
+  }
+
+  public void setAuthorEmail(String authorEmail) {
+    this.authorEmail = authorEmail;
+  }                               
+
+  public List<String> getTags() {
+    return tags;
+  }
+
+  public void setTags(List<String> tags) {
+    this.tags = tags;
+  }
+
+  public String getParentId() {
+    return this.parentId;
+  }
+
+  public void setParentId(String parentId) {
+    this.parentId = parentId;
+  }
+  
+  public String getParentType() {
+	  if(this.parentType.equals("User")){
+		  return "@person";
+	  }else{
+		  return "@space";
+	  }
+  }
+
+  public void setParentType(String parentType) {
+    this.parentType = parentType;
+  }
+  
+  public String getName() {
+    return this.name;
+  }
+
+  public void setName(String name) {
+    this.name = name;
+  }
+
+  
+  public String getId() {
+    return id;
+  }
+
+  public void setId(String id) {
+    this.id = id;
+  }
+
+  public List<ListField> getIms() {
+    return ims;
+  }
+
+  public void setIms(List<ListField> ims) {
+    this.ims = ims;
+  }
+
+  public Date getUpdated() {
+    if (updated == null) {
+      return null;
+    }
+    return new Date(updated.getTime());
+  }
+
+  public void setUpdated(Date updated) {
+    if (updated == null) {
+      this.updated = null;
+    } else {
+      this.updated = new Date(updated.getTime());
+    }
+  }
+
+
+  public String getDescription() {
+    return description;
+  }
+
+  public void setDescription(String description) {
+    this.description = description;
+  }
+  
+  public Long getUtcOffset() {
+    return utcOffset;
+  }
+
+  public void setUtcOffset(Long utcOffset) {
+    this.utcOffset = utcOffset;
+  }
+
+  public boolean getIsOwner() {
+    return isOwner;
+  }
+
+  public void setIsOwner(boolean isOwner) {
+    this.isOwner = isOwner;
+  }
+
+  // Proxied fields
+
+
+
+  private <T extends ListField> T getListFieldWithType(String type, List<T> list) {
+    if (list != null) {
+      for (T url : list) {
+        if (type.equalsIgnoreCase(url.getType())) {
+          return url;
+        }
+      }
+    }
+
+    return null;
+  }
+
+  private <T extends ListField> List<T> addListField(T field, List<T> list) {
+    if (list == null) {
+      list = Lists.newArrayList();
+    }
+    list.add(field);
+    return list;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return Long.parseLong(id);
+  }
+
+  @PrePersist
+  public void populateDbFields() {
+
+
+  }
+
+  @PostLoad
+  public void loadTransientFields() {
+
+
+  }
+
+  /*
+   * (non-Javadoc)
+   *
+   * @see org.apache.shindig.social.opensocial.model.Person#getDisplayName()
+   */
+  public String getDisplayName() {
+    return displayName;
+  }
+
+  /*
+   * (non-Javadoc)
+   *
+   * @see org.apache.shindig.social.opensocial.model.Person#setDisplayName(java.lang.String)
+   */
+  public void setDisplayName(String displayName) {
+    this.displayName = displayName;
+  }
+
+  public static FilterCapability getFilterCapability() {
+    return FILTER_CAPABILITY;
+
+  }
+
+  /** {@inheritDoc} */
+  public Map<String, ? extends Object> getAppData()
+  {
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public void setAppData( Map<String, ? extends Object> appData )
+  {
+  }
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Address.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Address.java
index e243872..9ed9d88 100644
--- a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Address.java
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Address.java
@@ -21,7 +21,7 @@ import java.util.EnumSet;
 import java.util.Map;
 
 import org.apache.shindig.protocol.model.Exportablebean;
-import org.apache.shindig.social.core.model.AddressImpl;
+import org.apache.shindig.social.core.model.PersonAddressDb;
 
 import com.google.common.base.Functions;
 import com.google.common.collect.Maps;
@@ -33,7 +33,7 @@ import com.google.inject.ImplementedBy;
  * http://www.opensocial.org/Technical-Resources/opensocial-spec-v081/opensocial-reference#opensocial.Address</a>.
  */
 
-@ImplementedBy(AddressImpl.class)
+@ImplementedBy(PersonAddressDb.class)
 @Exportablebean
 public interface Address {
 
@@ -243,4 +243,6 @@ public interface Address {
    * @param primary set the Primary status of this Address.
    */
   void setPrimary(Boolean primary);
+  
+  void setPerson(Person person);
 }
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/App.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/App.java
new file mode 100644
index 0000000..0540b1f
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/App.java
@@ -0,0 +1,474 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.opensocial.model;
+
+import org.apache.shindig.protocol.model.Enum;
+import org.apache.shindig.protocol.model.Exportablebean;
+//import org.apache.shindig.social.core.model.AppImpl;
+
+import com.google.common.base.Functions;
+import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Maps;
+import com.google.inject.ImplementedBy;
+
+import java.util.Date;
+import java.util.EnumSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+/**
+ * see <a href="http://www.opensocial.org/Technical-Resources/opensocial-spec-v081/opensocial-reference#opensocial.App.Field">
+ * http://www.opensocial.org/Technical-Resources/opensocial-spec-v081/opensocial-reference#opensocial.App.Field</a>
+ * for all field meanings. All fields are represented in the js api at this time except for lastUpdated.
+ * This field is currently only in the RESTful spec.
+ *
+ */
+//@ImplementedBy(AppImpl.class)
+@Exportablebean
+public interface App {
+  /**
+   * The type of a profile url when represented as a list field.
+   */
+  String PROFILE_URL_TYPE = "profile";
+
+  /**
+   * The type of thumbnail photo types when represented as list fields.
+   */
+  String THUMBNAIL_PHOTO_TYPE = "thumbnail";
+
+  /**
+   * The display name for the application.
+   * @return the display name
+   */
+  String getDisplayName();
+
+  /**
+   * Set the display name.
+   * @param displayName the new display name.
+   */
+  void setDisplayName(String displayName);
+
+  /**
+   * The fields that represent the application object in json form.
+   */
+  public static enum Field {
+    /** the json field for appData. */
+    APP_DATA("appData"),
+    /** the json field for appType. */
+    APP_TYPE("appType"),
+    /** the json field for appUrl. */
+    APP_URL("appUrl"),
+    /** the json field for author. */
+    AUTHOR("author"),
+    /** the json field for authorEmail. */
+    AUTHOR_EMAIL("authorEmail"),
+    /** the json field for parentId. */
+    PARENT_ID("parentId"),
+    /** the json field for parentType. */
+    PARENT_TYPE("parentType"),
+    /** the json field for description. */
+    DESCRIPTION("description"),
+    /** the json field for display name. */
+    DISPLAY_NAME("displayName"), /** Needed to support the RESTful api. */
+    /** the json field for height. */
+    HEIGHT("height"),
+    /** the json field for id. */
+    ID("id"),
+    /** the json field for IM accounts. */
+    IMS("ims"),
+    /** the json field for name. */
+    NAME("name"),
+    /** the json field for screenshotUrl. */
+    SCREENSHOT_URL("screenshotUrl"),
+    /** the json field for tags. */
+    TAGS("tags"),
+    /** the json field for thumbnailUrl. */
+    THUMBNAIL_URL("thumbnailUrl"),
+    /** the json field for utcOffset. */
+    UTC_OFFSET("utcOffset");
+
+    /**
+     * a Map to convert json string to Field representations.
+     */
+
+    private static final Map<String,Field> LOOKUP = Maps.uniqueIndex(EnumSet.allOf(Field.class), 
+        Functions.toStringFunction());
+
+    /**
+     * The json field that the instance represents.
+     */
+    private final String urlString;
+
+    /**
+     * The set of all fields.
+     */
+    public static final Set<String> ALL_FIELDS = LOOKUP.keySet();
+
+    /**
+     * The set of default fields returned fields.
+     */
+    public static final Set<String> DEFAULT_FIELDS = ImmutableSet.of(
+        ID.toString(),
+        NAME.toString(),           
+        APP_URL.toString(), 
+		PARENT_ID.toString(),
+		PARENT_TYPE.toString(),
+        THUMBNAIL_URL.toString());
+
+    /**
+     * create a field base on the a json element.
+     *
+     * @param urlString the name of the element
+     */
+    private Field(String urlString) {
+      this.urlString = urlString;
+    }
+
+    /**
+     * emit the field as a json element.
+     *
+     * @return the field name
+     */
+    @Override
+    public String toString() {
+      return this.urlString;
+    }
+
+    public static Field getField(String jsonString) {
+      return LOOKUP.get(jsonString);
+    }
+
+    /**
+     * Converts from a url string (usually passed in the fields= parameter) into the
+     * corresponding field enum.
+     * @param urlString The string to translate.
+     * @return The corresponding application field.
+     */
+    public static App.Field fromUrlString(String urlString) {
+      return LOOKUP.get(urlString);
+    }
+  }
+
+  /**
+   * Get app data for the application.
+   * 
+   * @return the app data, possibly a subset.
+   */
+  Map<String, ?> getAppData();
+  
+  /**
+   * Sets app data for the application.
+   * 
+   * @param appData the app data, possibly a subset 
+   */
+  void setAppData(Map<String, ?> appData);  
+
+
+	/**
+	 * Get addresses associated with the application, specified as an List of Address objects. Container
+	 * support for this field is OPTIONAL.
+	 *
+	 * @return appUrl
+	 */
+	String getAppType();
+
+	/**
+	 * Set addresses associated with the application, specified as an List of Address objects. Container
+	 * support for this field is OPTIONAL.
+	 *
+	 * @param appUrl appUrl objects
+	 */
+	void setAppType(String appType); 
+	
+	/**
+	 * Get addresses associated with the application, specified as an List of Address objects. Container
+	 * support for this field is OPTIONAL.
+	 *
+	 * @return appUrl
+	 */
+	String getAppUrl();
+
+	/**
+	 * Set addresses associated with the application, specified as an List of Address objects. Container
+	 * support for this field is OPTIONAL.
+	 *
+	 * @param appUrl appUrl objects
+	 */
+	void setAppUrl(String appUrl); 
+	
+	/**
+	 * Get security token for an app
+	 *
+	 * @return token
+	 */
+  String getToken();
+
+	/**
+	 * Set security token for an app
+	 *
+	 * @param token security token
+	 */
+  void setToken(String token);
+  
+	/**
+	 * Get addresses associated with the application, specified as an List of Address objects. Container
+	 * support for this field is OPTIONAL.
+	 *
+	 * @return author
+	 */
+	String getAuthor();
+
+	/**
+	 * Set addresses associated with the application, specified as an List of Address objects. Container
+	 * support for this field is OPTIONAL.
+	 *
+	 * @param author author objects
+	 */
+	void setAuthor(String author);	
+
+	/**
+	 * Get addresses associated with the application, specified as an List of Address objects. Container
+	 * support for this field is OPTIONAL.
+	 *
+	 * @return authorEmail
+	 */
+	String getAuthorEmail();
+
+	/**
+	 * Set addresses associated with the application, specified as an List of Address objects. Container
+	 * support for this field is OPTIONAL.
+	 *
+	 * @param authorEmail authorEmail objects
+	 */
+	void setAuthorEmail(String authorEmail);
+
+  /**
+   * Set A parent ID for a application/application to which this application belongs. Container support for this
+   * field is REQUIRED.
+   * @return the parentId
+   */
+  String getParentId();
+
+  /**
+   * Set A parent ID for a application/application to which this application belongs. Container support for this
+   * field is REQUIRED.
+   *
+   * @param parentId of element to which application belongs
+   */
+  void setParentId(String parentId);
+
+	/**
+	 * Set A parent TYPE to @application or @application where this application belongs. Container support for this
+	 * field is REQUIRED.
+	 * @return the parentType
+	 */
+	String getParentType();
+
+	/**
+	 * Set A parent TYPE to @application or @application where this application belongs. Container support for this
+	 * field is REQUIRED.
+	 *
+	 * @param parentType of element to which application belongs
+	 */
+	void setParentType(String parentType);  
+
+	/**
+	 * Get string description of a application, specified as a string. Container support for this field is
+	 * OPTIONAL.
+	 *
+	 * @return the application's description
+	 */
+	String getDescription();
+
+	/**
+	 * Set string description of a application, specified as a string. Container support for this field is
+	 * OPTIONAL.
+	 *
+	 * @param description the application's description 
+	 */
+	void setDescription(String description); 
+  
+  /**
+   * Get the application's Emails associated with the application.
+   * Container support for this field is OPTIONAL.
+   *
+   * @return a list of the application's emails
+   */
+  Integer getHeight();
+
+  /**
+   * Set the application's Emails associated with the application.
+   * Container support for this field is OPTIONAL.
+   *
+   * @param height a list of the application's emails
+   */
+  void setHeight(Integer height);
+
+  /**
+   * Get A string ID that can be permanently associated with this application. Container support for this
+   * field is REQUIRED.
+   *
+   * @return the permanent ID of the application
+   */
+  String getId();
+
+  /**
+   * Set A string ID that can be permanently associated with this application. Container support for this
+   * field is REQUIRED.
+   *
+   * @param id the permanent ID of the application
+   */
+  void setId(String id);
+    
+  /**
+   * Get a list of Instant messaging address for this App. No official canonicalization rules
+   * exist for all instant messaging addresses, but Service Providers SHOULD remove all whiteapplication
+   * and convert the address to lowercase, if this is appropriate for the service this IM address is
+   * used for. Instead of the standard Canonical Values for type, this field defines the following
+   * Canonical Values to represent currently popular IM services: aim, gtalk, icq, xmpp, msn, skype,
+   * qq, and yahoo.
+   *
+   * @return A list of IM addresses
+   */
+  List<ListField> getIms();
+
+  /**
+   * Set a list of Instant messaging address for this App. No official canonicalization rules
+   * exist for all instant messaging addresses, but Service Providers SHOULD remove all whiteapplication
+   * and convert the address to lowercase, if this is appropriate for the service this IM address is
+   * used for. Instead of the standard Canonical Values for type, this field defines the following
+   * Canonical Values to represent currently popular IM services: aim, gtalk, icq, xmpp, msn, skype,
+   * qq, and yahoo.
+   *
+   * @param ims a list ListFields representing IM addresses.
+   */
+  void setIms(List<ListField> ims);  
+
+	/**
+	 * Get the application's name Container support for this field is REQUIRED.
+	 *
+	 * @return the application's name
+	 */
+	String getName();
+
+	/**
+	 * Set the application's name Container support for this field is REQUIRED.
+	 *
+	 * @param name the application's name
+	 */
+	void setName(String name);
+
+	/**
+	 * Get the Phone numbers associated with the application.
+	 *
+	 * @return the Phone numbers associated with the application
+	 */
+  String getScreenshotUrl();
+
+	/**
+	 * Set the Phone numbers associated with the application.
+	 *
+	 * @param phoneNumbers the Phone numbers associated with the application
+	 */
+	void setScreenshotUrl(String screenshotUrl);
+  
+	/**
+   * Get arbitrary tags about the person. Container support for this field is OPTIONAL.
+   *
+   * @return arbitrary tags about the person.
+   */
+  List<String> getTags();
+
+  /**
+   * Set arbitrary tags about the person. Container support for this field is OPTIONAL.
+   *
+   * @param tags arbitrary tags about the person.
+   */
+  void setTags(List<String> tags);
+
+  /**
+   * Get the application's profile url. Container support for this field is OPTIONAL.
+   *
+   * @return the application's status, headline or shoutout
+   */
+  String getProfileUrl();
+
+  /**
+   * Set the application's profile url. Container support for this field is OPTIONAL.
+   *
+   * @param status the application's status, headline or shoutout
+   */
+  void setProfileUrl(String profileUrl);
+
+  /**
+   * Get the application's status, headline or shoutout. Container support for this field is OPTIONAL.
+   *
+   * @return the application's status, headline or shoutout
+   */
+  String getThumbnailUrl();
+
+  /**
+   * Set the application's status, headline or shoutout. Container support for this field is OPTIONAL.
+   *
+   * @param status the application's status, headline or shoutout
+   */
+  void setThumbnailUrl(String thumbnailUrl);
+
+  /**
+   * The time this application was last updated.
+   *
+   * @return the last update time
+   */
+  Date getUpdated();
+
+  /**
+   * Set the time this record was last updated.
+   *
+   * @param updated the last update time
+   */
+  void setUpdated(Date updated);
+
+  /**
+   * Get the App's time zone, specified as the difference in minutes between Greenwich Mean Time
+   * (GMT) and the application's local time. Container support for this field is OPTIONAL.
+   *
+   * @return the App's time zone
+   */
+  Long getUtcOffset();
+
+  /**
+   * Set the App's time zone, specified as the difference in minutes between Greenwich Mean Time
+   * (GMT) and the application's local time. Container support for this field is OPTIONAL.
+   *
+   * @param utcOffset the App's time zone
+   */
+  void setUtcOffset(Long utcOffset);
+
+  /**
+   * @return true if this application object represents the owner of the current page.
+   */
+  boolean getIsOwner();
+
+  /**
+   * Set the owner flag.
+   * @param isOwner the isOwnerflag
+   */
+  void setIsOwner(boolean isOwner);
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Attachment.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Attachment.java
new file mode 100644
index 0000000..bc11111
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Attachment.java
@@ -0,0 +1,132 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.opensocial.model;
+
+import java.util.EnumSet;
+import java.util.Map;
+
+import org.apache.shindig.protocol.model.Exportablebean;
+import org.apache.shindig.social.core.model.AttachmentDb;
+
+import com.google.common.base.Functions;
+import com.google.common.collect.Maps;
+import com.google.inject.ImplementedBy;
+
+/**
+ * Base interface for all address objects
+ * see <a href="http://www.opensocial.org/Technical-Resources/opensocial-spec-v081/opensocial-reference#opensocial.Attachment">
+ * http://www.opensocial.org/Technical-Resources/opensocial-spec-v081/opensocial-reference#opensocial.Attachment</a>.
+ */
+
+@ImplementedBy(AttachmentDb.class)
+@Exportablebean
+public interface Attachment {
+
+  /**
+   * The fields that represent the address object in json form.
+   */
+  public static enum Field {
+    /** the field name for country. */
+    SIZE("size"),
+    /** the field name for country. */
+    FILENAME("filename"),
+    /** the field name for latitude. */
+    CONTENT_TYPE("content_type");
+
+    private static final Map<String, Field> LOOKUP = Maps.uniqueIndex(EnumSet.allOf(Field.class), 
+        Functions.toStringFunction());
+
+    /**
+     * The json field that the instance represents.
+     */
+    private final String jsonString;
+
+    /**
+     * create a field base on the a json element.
+     *
+     * @param jsonString the name of the element
+     */
+    private Field(String jsonString) {
+      this.jsonString = jsonString;
+    }
+
+    /**
+     * emit the field as a json element.
+     *
+     * @return the field name
+     */
+    @Override
+    public String toString() {
+      return this.jsonString;
+    }
+
+    public static Field getField(String jsonString) {
+      return LOOKUP.get(jsonString);
+    }
+  }
+
+  /**
+   * Get the country.
+   *
+   * @return the country
+   */
+  String getUrl();
+
+  /**
+   * Get the country.
+   *
+   * @return the country
+   */
+  String getFilename();
+
+  /**
+   * Set the country.
+   *
+   * @param country the country
+   */
+  void setFilename(String filename);
+
+  /**
+   * Get the latitude.
+   *
+   * @return latitude
+   */
+  String getSize();
+
+  /**
+   * Set the latitude.
+   *
+   * @param latitude latitude
+   */
+  void setSize(String size);
+
+  /**
+   * Get the locality.
+   *
+   * @return the locality
+   */
+  String getContentType();
+
+  /**
+   * Set the locality.
+   *
+   * @param locality the locality
+   */
+  void setContentType(String contentType);
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Competence.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Competence.java
new file mode 100644
index 0000000..807d3e4
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Competence.java
@@ -0,0 +1,157 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.opensocial.model;
+
+import org.apache.shindig.protocol.model.Enum;
+import org.apache.shindig.protocol.model.Exportablebean;
+import org.apache.shindig.social.core.model.CompetenceDb;
+
+
+import com.google.common.base.Functions;
+import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Maps;
+import com.google.inject.ImplementedBy;
+
+import java.util.Date;
+import java.util.EnumSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+/**
+ * see <a href="http://www.opensocial.org/Technical-Resources/opensocial-spec-v081/opensocial-reference#opensocial.Space.Field">
+ * http://www.opensocial.org/Technical-Resources/opensocial-spec-v081/opensocial-reference#opensocial.Space.Field</a>
+ * for all field meanings. All fields are represented in the js api at this time except for lastUpdated.
+ * This field is currently only in the RESTful spec.
+ *
+ */
+@ImplementedBy(CompetenceDb.class)
+@Exportablebean
+public interface Competence {
+  /**
+   * The type of a profile url when represented as a list field.
+   */
+  String PROFILE_URL_TYPE = "profile";
+
+  /**
+   * The type of thumbnail photo types when represented as list fields.
+   */
+  String THUMBNAIL_PHOTO_TYPE = "thumbnail";
+
+  /**
+   * The fields that represent the space object in json form.
+   */
+  public static enum Field {
+    /** the json field for topic. */
+    TOPIC("topic"),
+    /** the json field for value. */
+    VALUE("value");
+
+    /**
+     * a Map to convert json string to Field representations.
+     */
+
+    private static final Map<String,Field> LOOKUP = Maps.uniqueIndex(EnumSet.allOf(Field.class), 
+        Functions.toStringFunction());
+
+    /**
+     * The json field that the instance represents.
+     */
+    private final String urlString;
+
+    /**
+     * The set of all fields.
+     */
+    public static final Set<String> ALL_FIELDS = LOOKUP.keySet();
+
+    /**
+     * The set of default fields returned fields.
+     */
+    public static final Set<String> DEFAULT_FIELDS = ImmutableSet.of(
+        TOPIC.toString(),           
+        VALUE.toString());
+
+    /**
+     * create a field base on the a json element.
+     *
+     * @param urlString the name of the element
+     */
+    private Field(String urlString) {
+      this.urlString = urlString;
+    }
+
+    /**
+     * emit the field as a json element.
+     *
+     * @return the field name
+     */
+    @Override
+    public String toString() {
+      return this.urlString;
+    }
+
+    public static Field getField(String jsonString) {
+      return LOOKUP.get(jsonString);
+    }
+
+    /**
+     * Converts from a url string (usually passed in the fields= parameter) into the
+     * corresponding field enum.
+     * @param urlString The string to translate.
+     * @return The corresponding space field.
+     */
+    public static Competence.Field fromUrlString(String urlString) {
+      return LOOKUP.get(urlString);
+    }
+  }
+
+  /**
+   * Get topic associated with the competence. Container
+   * support for this field is OPTIONAL.
+   *
+   * @return a Topic string
+   */
+  String getTopic();
+
+  /**
+   * Set topic associated with the competence. Container
+   * support for this field is OPTIONAL.
+   *
+   * @param topic for a competence
+   */
+  void setTopic(String topic);
+
+
+  /**
+   * Get value associated with the competence. Container
+   * support for this field is OPTIONAL.
+   *
+   * @return a Value string
+   */
+  String getValue();
+
+  /**
+   * Set value associated with the competence. Container
+   * support for this field is OPTIONAL.
+   *
+   * @param value for a competence
+   */
+  void setValue(String value);
+  
+  void setPerson(Person person);
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Document.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Document.java
new file mode 100644
index 0000000..a1a0873
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Document.java
@@ -0,0 +1,460 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.opensocial.model;
+
+import org.apache.shindig.protocol.model.Enum;
+import org.apache.shindig.protocol.model.Exportablebean;
+//import org.apache.shindig.social.core.model.DocumentImpl;
+
+import com.google.common.base.Functions;
+import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Maps;
+import com.google.inject.ImplementedBy;
+
+import java.util.Date;
+import java.util.EnumSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+/**
+ * see <a href="http://www.opensocial.org/Technical-Resources/opensocial-spec-v081/opensocial-reference#opensocial.Document.Field">
+ * http://www.opensocial.org/Technical-Resources/opensocial-spec-v081/opensocial-reference#opensocial.Document.Field</a>
+ * for all field meanings. All fields are represented in the js api at this time except for lastUpdated.
+ * This field is currently only in the RESTful spec.
+ *
+ */
+//@ImplementedBy(DocumentImpl.class)
+@Exportablebean
+public interface Document {
+  /**
+   * The type of a profile url when represented as a list field.
+   */
+  String PROFILE_URL_TYPE = "profile";
+
+  /**
+   * The type of thumbnail photo types when represented as list fields.
+   */
+  String THUMBNAIL_PHOTO_TYPE = "thumbnail";
+
+  /**
+   * The display name for the document.
+   * @return the display name
+   */
+  String getDisplayName();
+
+  /**
+   * Set the display name.
+   * @param displayName the new display name.
+   */
+  void setDisplayName(String displayName);
+
+  /**
+   * The fields that represent the document object in json form.
+   */
+  public static enum Field {
+    /** the json field for appData. */
+    APP_DATA("appData"),                
+    /** the json field for documentType. */
+    DOCUMENT_TYPE("documentType"),
+    /** the json field for documentEntity. */
+    DOCUMENT_ENTITY("documentEntity"),
+    /** the json field for author. */
+    AUTHOR("author"),
+    /** the json field for authorEmail. */
+    AUTHOR_EMAIL("authorEmail"),
+    /** the json field for parentId. */
+    PARENT_ID("parentId"),
+    /** the json field for parentType. */
+    PARENT_TYPE("parentType"),
+    /** the json field for description. */
+    DESCRIPTION("description"),
+    /** the json field for display name. */
+    DISPLAY_NAME("displayName"), /** Needed to support the RESTful api. */
+    /** the json field for height. */
+    HEIGHT("height"),
+    /** the json field for id. */
+    ID("id"),
+    /** the json field for IM accounts. */
+    IMS("ims"),
+    /** the json field for name. */
+    NAME("name"),
+    /** the json field for screenshotUrl. */
+    SCREENSHOT_URL("screenshotUrl"),
+    /** the json field for tags. */
+    TAGS("tags"),
+    /** the json field for thumbnailUrl. */
+    THUMBNAIL_URL("thumbnailUrl"),
+    /** the json field for utcOffset. */
+    UTC_OFFSET("utcOffset");
+
+    /**
+     * a Map to convert json string to Field representations.
+     */
+
+    private static final Map<String,Field> LOOKUP = Maps.uniqueIndex(EnumSet.allOf(Field.class), 
+        Functions.toStringFunction());
+
+    /**
+     * The json field that the instance represents.
+     */
+    private final String urlString;
+
+    /**
+     * The set of all fields.
+     */
+    public static final Set<String> ALL_FIELDS = LOOKUP.keySet();
+
+    /**
+     * The set of default fields returned fields.
+     */
+    public static final Set<String> DEFAULT_FIELDS = ImmutableSet.of(
+        ID.toString(),
+        NAME.toString(),           
+        DOCUMENT_ENTITY.toString(), 
+		PARENT_ID.toString(),
+		PARENT_TYPE.toString(),
+        THUMBNAIL_URL.toString());
+
+    /**
+     * create a field base on the a json element.
+     *
+     * @param urlString the name of the element
+     */
+    private Field(String urlString) {
+      this.urlString = urlString;
+    }
+
+    /**
+     * emit the field as a json element.
+     *
+     * @return the field name
+     */
+    @Override
+    public String toString() {
+      return this.urlString;
+    }
+
+    public static Field getField(String jsonString) {
+      return LOOKUP.get(jsonString);
+    }
+
+    /**
+     * Converts from a url string (usually passed in the fields= parameter) into the
+     * corresponding field enum.
+     * @param urlString The string to translate.
+     * @return The corresponding document field.
+     */
+    public static Document.Field fromUrlString(String urlString) {
+      return LOOKUP.get(urlString);
+    }
+  }
+
+  /**
+   * Get app data for the document.
+   * 
+   * @return the app data, possibly a subset.
+   */
+  Map<String, ?> getAppData();
+  
+  /**
+   * Sets app data for the document.
+   * 
+   * @param appData the app data, possibly a subset 
+   */
+  void setAppData(Map<String, ?> appData);  
+
+
+	/**
+	 * Get addresses associated with the document, specified as an List of Address objects. Container
+	 * support for this field is OPTIONAL.
+	 *
+	 * @return documentEntity
+	 */
+	String getDocumentType();
+
+	/**
+	 * Set addresses associated with the document, specified as an List of Address objects. Container
+	 * support for this field is OPTIONAL.
+	 *
+	 * @param documentEntity documentEntity objects
+	 */
+	void setDocumentType(String documentType); 
+	
+	/**
+	 * Get addresses associated with the document, specified as an List of Address objects. Container
+	 * support for this field is OPTIONAL.
+	 *
+	 * @return documentEntity
+	 */
+	String getDocumentEntity();
+
+	/**
+	 * Set addresses associated with the document, specified as an List of Address objects. Container
+	 * support for this field is OPTIONAL.
+	 *
+	 * @param documentEntity documentEntity objects
+	 */
+	void setDocumentEntity(String documentEntity); 
+	
+	/**
+	 * Get addresses associated with the document, specified as an List of Address objects. Container
+	 * support for this field is OPTIONAL.
+	 *
+	 * @return author
+	 */
+	String getAuthor();
+
+	/**
+	 * Set addresses associated with the document, specified as an List of Address objects. Container
+	 * support for this field is OPTIONAL.
+	 *
+	 * @param author author objects
+	 */
+	void setAuthor(String author);	
+
+	/**
+	 * Get addresses associated with the document, specified as an List of Address objects. Container
+	 * support for this field is OPTIONAL.
+	 *
+	 * @return authorEmail
+	 */
+	String getAuthorEmail();
+
+	/**
+	 * Set addresses associated with the document, specified as an List of Address objects. Container
+	 * support for this field is OPTIONAL.
+	 *
+	 * @param authorEmail authorEmail objects
+	 */
+	void setAuthorEmail(String authorEmail);
+
+  /**
+   * Set A parent ID for a document/document to which this document belongs. Container support for this
+   * field is REQUIRED.
+   * @return the parentId
+   */
+  String getParentId();
+
+  /**
+   * Set A parent ID for a document/document to which this document belongs. Container support for this
+   * field is REQUIRED.
+   *
+   * @param parentId of element to which document belongs
+   */
+  void setParentId(String parentId);
+
+	/**
+	 * Set A parent TYPE to @document or @document where this document belongs. Container support for this
+	 * field is REQUIRED.
+	 * @return the parentType
+	 */
+	String getParentType();
+
+	/**
+	 * Set A parent TYPE to @document or @document where this document belongs. Container support for this
+	 * field is REQUIRED.
+	 *
+	 * @param parentType of element to which document belongs
+	 */
+	void setParentType(String parentType);  
+
+	/**
+	 * Get string description of a document, specified as a string. Container support for this field is
+	 * OPTIONAL.
+	 *
+	 * @return the document's description
+	 */
+	String getDescription();
+
+	/**
+	 * Set string description of a document, specified as a string. Container support for this field is
+	 * OPTIONAL.
+	 *
+	 * @param description the document's description 
+	 */
+	void setDescription(String description); 
+  
+  /**
+   * Get the document's Emails associated with the document.
+   * Container support for this field is OPTIONAL.
+   *
+   * @return a list of the document's emails
+   */
+  Integer getHeight();
+
+  /**
+   * Set the document's Emails associated with the document.
+   * Container support for this field is OPTIONAL.
+   *
+   * @param height a list of the document's emails
+   */
+  void setHeight(Integer height);
+
+  /**
+   * Get A string ID that can be permanently associated with this document. Container support for this
+   * field is REQUIRED.
+   *
+   * @return the permanent ID of the document
+   */
+  String getId();
+
+  /**
+   * Set A string ID that can be permanently associated with this document. Container support for this
+   * field is REQUIRED.
+   *
+   * @param id the permanent ID of the document
+   */
+  void setId(String id);
+    
+  /**
+   * Get a list of Instant messaging address for this Document. No official canonicalization rules
+   * exist for all instant messaging addresses, but Service Providers SHOULD remove all whitespace
+   * and convert the address to lowercase, if this is appropriate for the service this IM address is
+   * used for. Instead of the standard Canonical Values for type, this field defines the following
+   * Canonical Values to represent currently popular IM services: aim, gtalk, icq, xmpp, msn, skype,
+   * qq, and yahoo.
+   *
+   * @return A list of IM addresses
+   */
+  List<ListField> getIms();
+
+  /**
+   * Set a list of Instant messaging address for this Document. No official canonicalization rules
+   * exist for all instant messaging addresses, but Service Providers SHOULD remove all whitedocument
+   * and convert the address to lowercase, if this is appropriate for the service this IM address is
+   * used for. Instead of the standard Canonical Values for type, this field defines the following
+   * Canonical Values to represent currently popular IM services: aim, gtalk, icq, xmpp, msn, skype,
+   * qq, and yahoo.
+   *
+   * @param ims a list ListFields representing IM addresses.
+   */
+  void setIms(List<ListField> ims);  
+
+	/**
+	 * Get the document's name Container support for this field is REQUIRED.
+	 *
+	 * @return the document's name
+	 */
+	String getName();
+
+	/**
+	 * Set the document's name Container support for this field is REQUIRED.
+	 *
+	 * @param name the document's name
+	 */
+	void setName(String name);
+
+	/**
+	 * Get the Phone numbers associated with the document.
+	 *
+	 * @return the Phone numbers associated with the document
+	 */
+  String getScreenshotUrl();
+
+	/**
+	 * Set the Phone numbers associated with the document.
+	 *
+	 * @param phoneNumbers the Phone numbers associated with the document
+	 */
+	void setScreenshotUrl(String screenshotUrl);
+  
+	/**
+   * Get arbitrary tags about the person. Container support for this field is OPTIONAL.
+   *
+   * @return arbitrary tags about the person.
+   */
+  List<String> getTags();
+
+  /**
+   * Set arbitrary tags about the person. Container support for this field is OPTIONAL.
+   *
+   * @param tags arbitrary tags about the person.
+   */
+  void setTags(List<String> tags);
+
+  /**
+   * Get the document's profile url. Container support for this field is OPTIONAL.
+   *
+   * @return the application's status, headline or shoutout
+   */
+  String getProfileUrl();
+
+  /**
+   * Set the document's profile url. Container support for this field is OPTIONAL.
+   *
+   * @param status the application's status, headline or shoutout
+   */
+  void setProfileUrl(String profileUrl);
+
+  /**
+   * Get the document's status, headline or shoutout. Container support for this field is OPTIONAL.
+   *
+   * @return the document's status, headline or shoutout
+   */
+  String getThumbnailUrl();
+
+  /**
+   * Set the document's status, headline or shoutout. Container support for this field is OPTIONAL.
+   *
+   * @param status the document's status, headline or shoutout
+   */
+  void setThumbnailUrl(String thumbnailUrl);
+
+  /**
+   * The time this document was last updated.
+   *
+   * @return the last update time
+   */
+  Date getUpdated();
+
+  /**
+   * Set the time this record was last updated.
+   *
+   * @param updated the last update time
+   */
+  void setUpdated(Date updated);
+
+  /**
+   * Get the Document's time zone, specified as the difference in minutes between Greenwich Mean Time
+   * (GMT) and the document's local time. Container support for this field is OPTIONAL.
+   *
+   * @return the Document's time zone
+   */
+  Long getUtcOffset();
+
+  /**
+   * Set the Document's time zone, specified as the difference in minutes between Greenwich Mean Time
+   * (GMT) and the document's local time. Container support for this field is OPTIONAL.
+   *
+   * @param utcOffset the Document's time zone
+   */
+  void setUtcOffset(Long utcOffset);
+
+  /**
+   * @return true if this document object represents the owner of the current page.
+   */
+  boolean getIsOwner();
+
+  /**
+   * Set the owner flag.
+   * @param isOwner the isOwnerflag
+   */
+  void setIsOwner(boolean isOwner);
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/ListField.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/ListField.java
index cd25160..151a8b0 100644
--- a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/ListField.java
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/ListField.java
@@ -18,7 +18,7 @@
 package org.apache.shindig.social.opensocial.model;
 
 import org.apache.shindig.protocol.model.Exportablebean;
-import org.apache.shindig.social.core.model.ListFieldImpl;
+import org.apache.shindig.social.core.model.EmailDb;
 
 import com.google.inject.ImplementedBy;
 
@@ -32,7 +32,7 @@ import com.google.inject.ImplementedBy;
  * Introduced in v0.8.1
  * </p>
  */
-@ImplementedBy(ListFieldImpl.class)
+@ImplementedBy(EmailDb.class)
 @Exportablebean
 public interface ListField {
 
@@ -118,4 +118,6 @@ public interface ListField {
    * @param primary set to true if a primary or preferred value
    */
   void setPrimary(Boolean primary);
+  
+  void setPerson(Person person);
 }
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Name.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Name.java
index e402cff..f1730e9 100644
--- a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Name.java
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Name.java
@@ -18,7 +18,7 @@
 package org.apache.shindig.social.opensocial.model;
 
 import org.apache.shindig.protocol.model.Exportablebean;
-import org.apache.shindig.social.core.model.NameImpl;
+import org.apache.shindig.social.core.model.NameDb;
 
 import com.google.inject.ImplementedBy;
 
@@ -29,7 +29,7 @@ import com.google.inject.ImplementedBy;
  * http://www.opensocial.org/Technical-Resources/opensocial-spec-v081/opensocial-reference#opensocial.Name</a>
  */
 
-@ImplementedBy(NameImpl.class)
+@ImplementedBy(NameDb.class)
 @Exportablebean
 public interface Name {
 
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Person.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Person.java
index ad08df8..b3be246 100644
--- a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Person.java
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Person.java
@@ -19,7 +19,7 @@ package org.apache.shindig.social.opensocial.model;
 
 import org.apache.shindig.protocol.model.Enum;
 import org.apache.shindig.protocol.model.Exportablebean;
-import org.apache.shindig.social.core.model.PersonImpl;
+import org.apache.shindig.social.core.model.UserDb;
 
 import com.google.common.base.Functions;
 import com.google.common.collect.ImmutableSet;
@@ -39,7 +39,7 @@ import java.util.Set;
  * This field is currently only in the RESTful spec.
  *
  */
-@ImplementedBy(PersonImpl.class)
+@ImplementedBy(UserDb.class)
 @Exportablebean
 public interface Person {
   /**
@@ -1217,4 +1217,20 @@ public interface Person {
    * @param thumbnailUrl the person's photo thumbnail URL
    */
   void setThumbnailUrl(String thumbnailUrl);
+  
+  /**
+   * Get addresses associated with the person, specified as an List of Address objects. Container
+   * support for this field is OPTIONAL.
+   *
+   * @return a List of address objects
+   */
+  List<Competence> getCompetences();
+
+  /**
+   * Set addresses associated with the person, specified as an List of Address objects. Container
+   * support for this field is OPTIONAL.
+   *
+   * @param addresses a list of address objects
+   */
+  void setCompetences(List<Competence> competences);
 }
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Recommender.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Recommender.java
new file mode 100644
index 0000000..9147461
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Recommender.java
@@ -0,0 +1,82 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.opensocial.model;
+
+import org.apache.shindig.protocol.model.Enum;
+import org.apache.shindig.protocol.model.Exportablebean;
+import org.apache.shindig.protocol.RestfulCollection;
+
+import com.google.common.base.Functions;
+import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Maps;
+import com.google.inject.ImplementedBy;
+
+import org.apache.shindig.social.opensocial.model.Space;
+import org.apache.shindig.social.opensocial.model.Document;
+import org.apache.shindig.social.opensocial.model.App;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import java.util.Date;
+import java.util.EnumSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+/**
+ * see <a href="http://www.opensocial.org/Technical-Resources/opensocial-spec-v081/opensocial-reference#opensocial.RecommenderItem.Field">
+ * http://www.opensocial.org/Technical-Resources/opensocial-spec-v081/opensocial-reference#opensocial.RecommenderItem.Field</a>
+ * for all field meanings. All fields are represented in the js api at this time except for lastUpdated.
+ * This field is currently only in the RESTful spec.
+ *
+ */
+ /**
+  * Data structure representing a recommender
+  */
+ public class Recommender {
+
+   private RestfulCollection<Document>  documents;
+   private RestfulCollection<App>  apps;
+   private RestfulCollection<Space>  spaces;
+   private RestfulCollection<Person>  people;
+
+   public Recommender(RestfulCollection<Document> documents, RestfulCollection<App> apps, 
+		   RestfulCollection<Space> spaces, RestfulCollection<Person> people) {
+     this.documents = documents;
+     this.apps = apps;
+     this.spaces = spaces;
+     this.people = people;
+   }
+
+   public RestfulCollection<Document> getDocuments() {
+     return this.documents;
+   }
+
+   public RestfulCollection<Space> getSpaces() {
+     return this.spaces;
+   }
+
+   public RestfulCollection<App> getApps() {
+     return this.apps;
+   }
+
+   public RestfulCollection<Person> getPeople() {
+     return this.people;
+   }
+
+
+ }
\ No newline at end of file
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Space.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Space.java
new file mode 100644
index 0000000..0cb0335
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/model/Space.java
@@ -0,0 +1,515 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.opensocial.model;
+
+import org.apache.shindig.protocol.model.Enum;
+import org.apache.shindig.protocol.model.Exportablebean;
+import org.apache.shindig.social.core.model.SpaceDb;
+//import org.apache.shindig.social.core.model.SpaceImpl;
+
+import com.google.common.base.Functions;
+import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Maps;
+import com.google.inject.ImplementedBy;
+
+import java.util.Date;
+import java.util.EnumSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+/**
+ * see <a href="http://www.opensocial.org/Technical-Resources/opensocial-spec-v081/opensocial-reference#opensocial.Space.Field">
+ * http://www.opensocial.org/Technical-Resources/opensocial-spec-v081/opensocial-reference#opensocial.Space.Field</a>
+ * for all field meanings. All fields are represented in the js api at this time except for lastUpdated.
+ * This field is currently only in the RESTful spec.
+ *
+ */
+@ImplementedBy(SpaceDb.class)
+@Exportablebean
+public interface Space {
+  /**
+   * The type of a profile url when represented as a list field.
+   */
+  String PROFILE_URL_TYPE = "profile";
+
+  /**
+   * The type of thumbnail photo types when represented as list fields.
+   */
+  String THUMBNAIL_PHOTO_TYPE = "thumbnail";
+
+  /**
+   * The display name for the space.
+   * @return the display name
+   */
+  String getDisplayName();
+
+  /**
+   * Set the display name.
+   * @param displayName the new display name.
+   */
+  void setDisplayName(String displayName);
+
+  /**
+   * The fields that represent the space object in json form.
+   */
+  public static enum Field {
+    /** the json field for addresses. */
+    ADDRESSES("addresses"),
+    /** the json field for appData. */
+    APP_DATA("appData"),
+    /** the json field for parentId. */
+    PARENT_ID("parentId"),
+    /** the json field for parentType. */
+    PARENT_TYPE("parentType"),
+    /** the json field for description. */
+    DESCRIPTION("description"),
+    /** the json field for display name. */
+    DISPLAY_NAME("displayName"), /** Needed to support the RESTful api. */
+    /** the json field for emails. */
+    EMAILS("emails"),
+    /** the json field for hasApp. */
+    HAS_APP("hasApp"),
+    /** the json field for id. */
+    ID("id"),
+    /** the json field for images. */
+    IMAGES("images"),
+    /** the json field for IM accounts. */
+    IMS("ims"),
+    /** the json field for interests. */
+    INTERESTS("interests"),
+    /** the json field for location. */
+    LOCATION("location"),
+    /** the json field for name. */
+    NAME("name"),
+    /** the json field for phoneNumbers. */
+    PHONE_NUMBERS("phoneNumbers"),
+    /** the json field for status. */
+    STATUS("status"),
+    /** the json field for thumbnailUrl. */
+    THUMBNAIL_URL("thumbnailUrl"),
+    /** the json field for urls. */
+    URLS("urls"),
+    /** the json field for utcOffset. */
+    UTC_OFFSET("utcOffset");
+
+    /**
+     * a Map to convert json string to Field representations.
+     */
+
+    private static final Map<String,Field> LOOKUP = Maps.uniqueIndex(EnumSet.allOf(Field.class), 
+        Functions.toStringFunction());
+
+    /**
+     * The json field that the instance represents.
+     */
+    private final String urlString;
+
+    /**
+     * The set of all fields.
+     */
+    public static final Set<String> ALL_FIELDS = LOOKUP.keySet();
+
+    /**
+     * The set of default fields returned fields.
+     */
+    public static final Set<String> DEFAULT_FIELDS = ImmutableSet.of(
+        ID.toString(),
+        NAME.toString(),           
+        DESCRIPTION.toString(), 
+		PARENT_ID.toString(),
+		PARENT_TYPE.toString(),
+        THUMBNAIL_URL.toString());
+
+    /**
+     * create a field base on the a json element.
+     *
+     * @param urlString the name of the element
+     */
+    private Field(String urlString) {
+      this.urlString = urlString;
+    }
+
+    /**
+     * emit the field as a json element.
+     *
+     * @return the field name
+     */
+    @Override
+    public String toString() {
+      return this.urlString;
+    }
+
+    public static Field getField(String jsonString) {
+      return LOOKUP.get(jsonString);
+    }
+
+    /**
+     * Converts from a url string (usually passed in the fields= parameter) into the
+     * corresponding field enum.
+     * @param urlString The string to translate.
+     * @return The corresponding space field.
+     */
+    public static Space.Field fromUrlString(String urlString) {
+      return LOOKUP.get(urlString);
+    }
+  }
+
+  /**
+   * Get addresses associated with the space, specified as an List of Address objects. Container
+   * support for this field is OPTIONAL.
+   *
+   * @return a List of address objects
+   */
+  List<Address> getAddresses();
+
+  /**
+   * Set addresses associated with the space, specified as an List of Address objects. Container
+   * support for this field is OPTIONAL.
+   *
+   * @param addresses a list of address objects
+   */
+  void setAddresses(List<Address> addresses);
+
+
+  /**
+   * Get app data for the space.
+   * 
+   * @return the app data, possibly a subset.
+   */
+  Map<String, ?> getAppData();
+  
+  /**
+   * Sets app data for the space.
+   * 
+   * @param appData the app data, possibly a subset 
+   */
+  void setAppData(Map<String, ?> appData);
+
+  /**
+   * Set A parent ID for a space/space to which this space belongs. Container support for this
+   * field is REQUIRED.
+   * @return the parentId
+   */
+  String getParentId();
+
+  /**
+   * Set A parent ID for a space/space to which this space belongs. Container support for this
+   * field is REQUIRED.
+   *
+   * @param parentId of element to which space belongs
+   */
+  void setParentId(String parentId);
+
+	/**
+	 * Set A parent TYPE to @space or @space where this space belongs. Container support for this
+	 * field is REQUIRED.
+	 * @return the parentType
+	 */
+	String getParentType();
+
+	/**
+	 * Set A parent TYPE to @space or @space where this space belongs. Container support for this
+	 * field is REQUIRED.
+	 *
+	 * @param parentType of element to which space belongs
+	 */
+	void setParentType(String parentType);  
+
+	/**
+	 * Get string description of a space, specified as a string. Container support for this field is
+	 * OPTIONAL.
+	 *
+	 * @return the space's description
+	 */
+	String getDescription();
+
+	/**
+	 * Set string description of a space, specified as a string. Container support for this field is
+	 * OPTIONAL.
+	 *
+	 * @param description the space's description 
+	 */
+	void setDescription(String description); 
+  
+  /**
+   * Get the space's Emails associated with the space.
+   * Container support for this field is OPTIONAL.
+   *
+   * @return a list of the space's emails
+   */
+  List<ListField> getEmails();
+
+  /**
+   * Set the space's Emails associated with the space.
+   * Container support for this field is OPTIONAL.
+   *
+   * @param emails a list of the space's emails
+   */
+  void setEmails(List<ListField> emails);
+
+  /**
+   * Get if the space has used the current app. Container support for this field is OPTIONAL.
+   * Has app needs to take account of the parent of the application that is performing the
+   * query on this space object.
+   * @return true the current app has been used
+   */
+  Boolean getHasApp();
+
+  /**
+   * Set if the space has used the current app. Container support for this field is OPTIONAL.
+   *
+   * @param hasApp set true the current app has been used
+   */
+  void setHasApp(Boolean hasApp);
+
+  /**
+   * Get A string ID that can be permanently associated with this space. Container support for this
+   * field is REQUIRED.
+   *
+   * @return the permanent ID of the space
+   */
+  String getId();
+
+  /**
+   * Set A string ID that can be permanently associated with this space. Container support for this
+   * field is REQUIRED.
+   *
+   * @param id the permanent ID of the space
+   */
+  void setId(String id);
+    
+	/**
+	 * URL of an image for this space. The value SHOULD be a canonicalized URL, and MUST point to an
+	 * actual image file (e.g. a GIF, JPEG, or PNG image file) rather than to a web page containing an
+	 * image. Service Providers MAY return the same image at different sizes, though it is recognized
+	 * that no standard for describing images of various sizes currently exists. Note that this field
+	 * SHOULD NOT be used to send down arbitrary photos taken by this space, but specifically profile
+	 * photos of the contact suitable for display when describing the contact.
+	 *
+	 * @return a list of Images
+	 */
+	List<ListField> getImages();
+
+	/**
+	 * Set a list of Images for the space.
+	 * @see Space#getImages()
+	 *
+	 * @param images a list of images.
+	 */
+	void setImages(List<ListField> images); 
+
+  /**
+   * Get a list of Instant messaging address for this Space. No official canonicalization rules
+   * exist for all instant messaging addresses, but Service Providers SHOULD remove all whitespace
+   * and convert the address to lowercase, if this is appropriate for the service this IM address is
+   * used for. Instead of the standard Canonical Values for type, this field defines the following
+   * Canonical Values to represent currently popular IM services: aim, gtalk, icq, xmpp, msn, skype,
+   * qq, and yahoo.
+   *
+   * @return A list of IM addresses
+   */
+  List<ListField> getIms();
+
+  /**
+   * Set a list of Instant messaging address for this Space. No official canonicalization rules
+   * exist for all instant messaging addresses, but Service Providers SHOULD remove all whitespace
+   * and convert the address to lowercase, if this is appropriate for the service this IM address is
+   * used for. Instead of the standard Canonical Values for type, this field defines the following
+   * Canonical Values to represent currently popular IM services: aim, gtalk, icq, xmpp, msn, skype,
+   * qq, and yahoo.
+   *
+   * @param ims a list ListFields representing IM addresses.
+   */
+  void setIms(List<ListField> ims);  
+
+  /**
+   * Get the space's interests, hobbies or passions, specified as an List of strings. Container
+   * support for this field is OPTIONAL.
+   *
+   * @return the space's interests, hobbies or passions
+   */
+  List<String> getInterests();
+
+  /**
+   * Set the space's interests, hobbies or passions, specified as an List of strings. Container
+   * support for this field is OPTIONAL.
+   *
+   * @param interests the space's interests, hobbies or passions
+   */
+  void setInterests(List<String> interests);
+
+  /**
+   * Get the Space's favorite jobs, or job interests and skills, specified as a string. Container
+   * support for this field is OPTIONAL
+   *
+   * @return the Space's favorite jobs, or job interests and skills
+   */
+  String getLocation();
+
+  /**
+   * Set the Space's favorite jobs, or job interests and skills, specified as a string. Container
+   * support for this field is OPTIONAL
+   *
+   * @param location the Space's favorite jobs, or job interests and skills
+   */
+  void setLocation(String location);  
+
+	/**
+	 * Get the space's name Container support for this field is REQUIRED.
+	 *
+	 * @return the space's name
+	 */
+	String getName();
+
+	/**
+	 * Set the space's name Container support for this field is REQUIRED.
+	 *
+	 * @param name the space's name
+	 */
+	void setName(String name);
+
+	/**
+	 * Get the Phone numbers associated with the space.
+	 *
+	 * @return the Phone numbers associated with the space
+	 */
+	List<ListField> getPhoneNumbers();
+
+	/**
+	 * Set the Phone numbers associated with the space.
+	 *
+	 * @param phoneNumbers the Phone numbers associated with the space
+	 */
+	void setPhoneNumbers(List<ListField> phoneNumbers);
+
+	/**
+	 * Get the space's status, headline or shoutout. Container support for this field is OPTIONAL.
+	 *
+	 * @return the space's status, headline or shoutout
+	 */
+	String getStatus();
+
+	/**
+	 * Set the space's status, headline or shoutout. Container support for this field is OPTIONAL.
+	 *
+	 * @param status the space's status, headline or shoutout
+	 */
+	void setStatus(String status);
+
+  /**
+   * The time this space was last updated.
+   *
+   * @return the last update time
+   */
+  Date getUpdated();
+
+  /**
+   * Set the time this record was last updated.
+   *
+   * @param updated the last update time
+   */
+  void setUpdated(Date updated);
+
+  /**
+   * Get the Space's time zone, specified as the difference in minutes between Greenwich Mean Time
+   * (GMT) and the space's local time. Container support for this field is OPTIONAL.
+   *
+   * @return the Space's time zone
+   */
+  Long getUtcOffset();
+
+  /**
+   * Set the Space's time zone, specified as the difference in minutes between Greenwich Mean Time
+   * (GMT) and the space's local time. Container support for this field is OPTIONAL.
+   *
+   * @param utcOffset the Space's time zone
+   */
+  void setUtcOffset(Long utcOffset);
+
+  /**
+   * Get the URLs related to the space, their webpages, or feeds Container support for this field
+   * is OPTIONAL.
+   *
+   * @return the URLs related to the space, their webpages, or feeds
+   */
+  List<Url> getUrls();
+
+  /**
+   * Set the URLs related to the space, their webpages, or feeds Container support for this field
+   * is OPTIONAL.
+   *
+   * @param urls the URLs related to the space, their webpages, or feeds
+   */
+  void setUrls(List<Url> urls);
+
+  /**
+   * @return true if this space object represents the owner of the current page.
+   */
+  boolean getIsOwner();
+
+  /**
+   * Set the owner flag.
+   * @param isOwner the isOwnerflag
+   */
+  void setIsOwner(boolean isOwner);
+
+  // Proxied fields
+
+  /**
+   * Get the space's profile URL. This URL must be fully qualified. Relative URLs will not work in
+   * gadgets. This field MUST be stored in the urls list with a type of "profile".
+   *
+   * Container support for this field is OPTIONAL.
+   *
+   * @return the space's profile URL
+   */
+  String getProfileUrl();
+
+  /**
+   * Set the space's profile URL. This URL must be fully qualified. Relative URLs will not work in
+   * gadgets. This field MUST be stored in the urls list with a type of "profile".
+   *
+   * Container support for this field is OPTIONAL.
+   *
+   * @param profileUrl the space's profile URL
+   */
+  void setProfileUrl(String profileUrl);
+
+  /**
+   * Get the space's photo thumbnail URL, specified as a string. This URL must be fully qualified.
+   * Relative URLs will not work in gadgets.
+   * This field MUST be stored in the photos list with a type of "thumbnail".
+   *
+   * Container support for this field is OPTIONAL.
+   *
+   * @return the space's photo thumbnail URL
+   */
+  String getThumbnailUrl();
+
+  /**
+   * Set the space's photo thumbnail URL, specified as a string. This URL must be fully qualified.
+   * Relative URLs will not work in gadgets.
+   * This field MUST be stored in the photos list with a type of "thumbnail".
+   *
+   * Container support for this field is OPTIONAL.
+   *
+   * @param thumbnailUrl the space's photo thumbnail URL
+   */
+  void setThumbnailUrl(String thumbnailUrl);
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/AppDataHandler.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/AppDataHandler.java
index 9549801..4459a16 100644
--- a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/AppDataHandler.java
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/AppDataHandler.java
@@ -26,6 +26,7 @@ import org.apache.shindig.social.opensocial.spi.UserId;
 
 import java.util.Map;
 import java.util.Set;
+import java.util.HashSet;
 import java.util.concurrent.Future;
 
 import javax.servlet.http.HttpServletResponse;
@@ -62,9 +63,11 @@ public class AppDataHandler {
 
     HandlerPreconditions.requireNotEmpty(userIds, "No userId specified");
     HandlerPreconditions.requireSingular(userIds, "Multiple userIds not supported");
+    
+    Set<String> fields = new HashSet(request.getListParameter("keys"));
 
     return service.deletePersonData(userIds.iterator().next(), request.getGroup(),
-        request.getAppId(), request.getFields(), request.getToken());
+        request.getAppId(), fields, request.getToken());
   }
 
   /**
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/AppHandler.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/AppHandler.java
new file mode 100644
index 0000000..ce11b75
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/AppHandler.java
@@ -0,0 +1,114 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.opensocial.service;
+
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.Future;
+
+import org.apache.shindig.auth.SecurityToken;
+import org.apache.shindig.common.util.FutureUtil;
+import org.apache.shindig.config.ContainerConfig;
+import org.apache.shindig.protocol.HandlerPreconditions;
+import org.apache.shindig.protocol.Operation;
+import org.apache.shindig.protocol.ProtocolException;
+import org.apache.shindig.protocol.RequestItem;
+import org.apache.shindig.protocol.RestfulCollection;
+import org.apache.shindig.protocol.Service;
+import org.apache.shindig.social.opensocial.model.App;
+import org.apache.shindig.social.opensocial.spi.CollectionOptions;
+import org.apache.shindig.social.opensocial.spi.GroupId;
+import org.apache.shindig.social.opensocial.spi.AppId;
+import org.apache.shindig.social.opensocial.spi.AppService;
+import org.apache.shindig.social.opensocial.spi.UserId;
+import org.apache.shindig.social.opensocial.spi.Context;
+
+import com.google.common.base.Objects;
+import com.google.common.collect.ImmutableSet;
+import com.google.inject.Inject;
+
+/**
+ * RPC/REST handler for all /apps requests
+ */
+@Service(name = "apps", path = "/{contextId}+/{contextType}")
+public class AppHandler {
+  private final AppService appService;
+  private final ContainerConfig config;
+
+  @Inject
+  public AppHandler(AppService appService, ContainerConfig config) {
+    this.appService = appService;
+    this.config = config;
+  }
+
+  /**
+   * Allowed end-points /apps/{contextId}/{contextType} /apps/{AppId}+ 
+   *
+   * examples: /apps/john.doe/@person /apps/tex.group/@space /apps/mywidget
+   */
+  @Operation(httpMethods = "GET")
+  public Future<?> get(SocialRequestItem request) throws ProtocolException {
+    // get key file used for token encryption
+    String keyFile = config.getString("default", "gadgets.securityTokenKeyFile");
+
+    Set<String> fields = request.getFields(App.Field.DEFAULT_FIELDS);
+    Set<String> contextIds = request.getContextIds();
+    String contextType = request.getContextType();
+
+    // Preconditions
+    HandlerPreconditions.requireNotEmpty(contextIds, "No contextId is specified");
+    
+    CollectionOptions options = new CollectionOptions(request);
+    if(contextType == null){
+    	// when contextType is not specified, get list of apps specified by ids
+    	if(contextIds.size() == 1){
+        String contextId = contextIds.iterator().next();
+        if (contextId.equals("@self")) {
+          // get app id from the token
+          contextId = request.getToken().getAppId();
+        }
+    		return appService.getApp(new AppId(contextId), fields, request.getToken(), keyFile);
+    	}else{
+    	    ImmutableSet.Builder<AppId> ids = ImmutableSet.builder();
+    	    for (String id : contextIds) {
+    	    	ids.add(new AppId(id));
+    	    }
+    	    Set<AppId> AppIds = ids.build();
+    		
+    		return appService.getApps(AppIds, options, fields, request.getToken(), keyFile);
+    	}
+    }else{
+    	// contextType is specified, get a list of apps for this context
+    	if(contextIds.size() == 1){
+    		Context context = new Context(contextIds.iterator().next(),contextType);
+    		return appService.getAppsForContext(context, options, fields, request.getToken(), keyFile);
+    	}else{
+    		throw new IllegalArgumentException("Cannot fetch apps for multiple contexts");
+    	}
+    }
+    
+  }
+
+  @Operation(httpMethods = "GET", path="/@supportedFields")
+  public List<Object> supportedFields(RequestItem request) {
+    // TODO: Would be nice if name in config matched name of service.
+    String container = Objects.firstNonNull(request.getToken().getContainer(), "default");
+    return config.getList(container,
+        "${Cur['gadgets.features'].opensocial.supportedFields.app}");
+  }
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/ContextHandler.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/ContextHandler.java
new file mode 100644
index 0000000..1ae9614
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/ContextHandler.java
@@ -0,0 +1,81 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.opensocial.service;
+
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.Future;
+
+import org.apache.shindig.auth.SecurityToken;
+import org.apache.shindig.common.util.FutureUtil;
+import org.apache.shindig.common.util.ImmediateFuture;
+import org.apache.shindig.config.ContainerConfig;
+import org.apache.shindig.protocol.HandlerPreconditions;
+import org.apache.shindig.protocol.Operation;
+import org.apache.shindig.protocol.ProtocolException;
+import org.apache.shindig.protocol.RequestItem;
+import org.apache.shindig.protocol.RestfulCollection;
+import org.apache.shindig.protocol.Service;
+import org.apache.shindig.social.opensocial.spi.CollectionOptions;
+import org.apache.shindig.social.opensocial.spi.GroupId;
+import org.apache.shindig.social.opensocial.spi.Context;
+import org.apache.shindig.social.opensocial.spi.ContextService;
+import org.apache.shindig.social.opensocial.spi.UserId;
+import org.apache.shindig.social.opensocial.spi.Context;
+
+import com.google.common.base.Objects;
+import com.google.common.collect.ImmutableSet;
+import com.google.inject.Inject;
+
+/**
+ * RPC/REST handler for all /contexts requests
+ */
+@Service(name = "context", path = "")
+public class ContextHandler {
+  private final ContextService contextService;
+  private final ContainerConfig config;
+
+  @Inject
+  public ContextHandler(ContextService contextService, ContainerConfig config) {
+    this.contextService = contextService;
+    this.config = config;
+  }
+
+  /**
+   * Allowed end-points /context
+   *
+   * examples: /context
+   */
+  @Operation(httpMethods = "GET")
+  public Future<?> get(SocialRequestItem request) throws ProtocolException {
+    String containerUrl = System.getProperty("shindig.container_url");
+
+    String owner = request.getToken().getOwnerId();
+    String id = owner;
+    String type = "@person";
+    if (owner.startsWith("s_")) { // space
+      type = "@space";
+      id = owner.replaceFirst("s_","");
+    }
+
+    Context context = new Context(id,type);
+    context.setContainerUrl(containerUrl);
+    return ImmediateFuture.newInstance(context);
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/DocumentHandler.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/DocumentHandler.java
new file mode 100644
index 0000000..bcb4414
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/DocumentHandler.java
@@ -0,0 +1,255 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.opensocial.service;
+
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.Future;
+
+import org.apache.shindig.auth.SecurityToken;
+import org.apache.shindig.common.util.FutureUtil;
+import org.apache.shindig.config.ContainerConfig;
+import org.apache.shindig.protocol.HandlerPreconditions;
+import org.apache.shindig.protocol.Operation;
+import org.apache.shindig.protocol.ProtocolException;
+import org.apache.shindig.protocol.RequestItem;
+import org.apache.shindig.protocol.RestfulCollection;
+import org.apache.shindig.protocol.Service;
+import org.apache.shindig.social.opensocial.model.Document;
+import org.apache.shindig.social.opensocial.spi.CollectionOptions;
+import org.apache.shindig.social.opensocial.spi.GroupId;
+import org.apache.shindig.social.opensocial.spi.DocumentId;
+import org.apache.shindig.social.opensocial.spi.DocumentService;
+import org.apache.shindig.social.opensocial.spi.UserId;
+import org.apache.shindig.social.opensocial.spi.Context;
+import org.apache.shindig.common.util.ImmediateFuture;
+
+import com.google.common.base.Objects;
+import com.google.common.collect.ImmutableSet;
+import com.google.inject.Inject;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.http.HttpResponse;
+import org.apache.http.NameValuePair;
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.entity.UrlEncodedFormEntity;
+import org.apache.http.client.methods.*;
+import org.apache.http.impl.client.DefaultHttpClient;
+import org.apache.http.message.BasicNameValuePair;
+
+import java.nio.charset.Charset;
+import org.apache.http.entity.mime.MultipartEntity;
+import org.apache.http.entity.mime.content.StringBody;
+import org.apache.http.entity.mime.content.FileBody;
+import org.apache.http.entity.mime.content.ContentBody;
+
+import org.apache.commons.fileupload.FileItem;
+
+import org.json.JSONObject;
+import java.io.File;
+import java.io.*;
+
+
+/**
+ * RPC/REST handler for all /documents requests
+ */
+@Service(name = "documents", path = "/{contextId}+/{contextType}")
+public class DocumentHandler {
+  private final DocumentService documentService;
+  private final ContainerConfig config;
+  public static final String GRAASP_URL = System.getProperty("shindig.container_url");
+  private final String GRAASP_TOKEN = System.getProperty("graasp.token");
+
+  @Inject
+  public DocumentHandler(DocumentService documentService, ContainerConfig config) {
+    this.documentService = documentService;
+    this.config = config;
+  }
+
+  /**
+   * Allowed end-points /documents/{contextId}
+   *
+   * examples: /documents/1
+   */
+  @Operation(httpMethods="DELETE")
+  public Future<?> delete(SocialRequestItem request)
+      throws ProtocolException {
+
+    // Set<UserId> userIds = request.getUsers();
+    // Set<String> documentIds = ImmutableSet.copyOf(request.getListParameter("documentId"));
+    // 
+    // HandlerPreconditions.requireNotEmpty(userIds, "No userId specified");
+    // HandlerPreconditions.requireSingular(userIds, "Multiple userIds not supported");
+    // // Throws exceptions if userIds contains more than one element or zero elements
+    // return documentService.deleteActivities(Iterables.getOnlyElement(userIds), request.getGroup(),
+    //     request.getAppId(), documentIds, request.getToken());
+        
+    return ImmediateFuture.newInstance(null);
+  }
+
+  /**
+   * Allowed end-points /documents/{contextId}
+   *
+   * examples: /documents/1 - postBody is a document object
+   */
+  @Operation(httpMethods="PUT", bodyParam = "document")
+  public Future<?> update(SocialRequestItem request) throws ProtocolException {
+    // return create(request);
+    
+    return ImmediateFuture.newInstance(null);
+  }
+
+  /**
+   * Allowed end-points /documents/{contextId}
+   *
+   * examples: /documents/1 - postBody is a document object
+   */
+  @Operation(httpMethods="POST", bodyParam = "document")
+  public Future<?> create(SocialRequestItem request) throws ProtocolException {
+    
+		try {
+      String data = request.getParameter("document");
+      JSONObject test = new JSONObject(data);
+      data = test.toString();
+      String viewerId = request.getToken().getViewerId();
+    
+      // HandlerPreconditions.requireNotEmpty(viewerId, "No viewerId is specified");
+    
+      String output = "";
+  		HttpClient client = new DefaultHttpClient();
+  		HttpPost post = new HttpPost(GRAASP_URL+"/rest/documents?token="+GRAASP_TOKEN+"&user="+viewerId);
+      post.getParams().setParameter("http.protocol.expect-continue", false);
+
+      // POST /rest/documents/23 to Graasp
+		  MultipartEntity entity = new MultipartEntity();
+      entity.addPart("data", new StringBody(data,"application/json", Charset.forName("UTF-8")));
+      // send file body
+      if (request.getFormMimePart("file") != null) {
+        InputStream inputStream = request.getFormMimePart("file").getInputStream();
+        File file = new File(request.getFormMimePart("file").getName());
+  		  byte buf[]=new byte[1024];
+        int len;
+        OutputStream out=new FileOutputStream(file);
+        while((len=inputStream.read(buf))>0)
+          out.write(buf,0,len);
+        out.close();
+        inputStream.close();
+  		  ContentBody cbFile = new FileBody(file, request.getFormMimePart("file").getContentType());		  
+        entity.addPart("file", cbFile);
+      }
+      post.setEntity(entity);
+      
+      // return back the response
+  		HttpResponse response = client.execute(post);
+			BufferedReader rd = new BufferedReader(new InputStreamReader(
+					response.getEntity().getContent()));
+			String line = "";
+			while ((line = rd.readLine()) != null) {
+				output = line;
+			}          
+      if (request.getFormMimePart("file") != null) {
+        File file = new File(request.getFormMimePart("file").getName());
+        file.delete();
+      }
+      JSONObject jsonOutput = new JSONObject(output);
+      return ImmediateFuture.newInstance(jsonOutput);
+    } catch (Exception e) {
+      return ImmediateFuture.newInstance(e);
+    }
+  }
+
+  /**
+   * Allowed end-points /documents/{contextId}/{contextType} /documents/{documentId}+ 
+   *
+   * examples: /documents/john.doe/@person /documents/tex.group/@space /documents/mywidget
+   */
+  @Operation(httpMethods = "GET")
+  public Future<?> get(SocialRequestItem request) throws ProtocolException {
+    Set<String> fields = request.getFields(Document.Field.DEFAULT_FIELDS);
+    Set<String> contextIds = request.getContextIds();
+    String contextType = request.getContextType();
+    String viewerId = request.getToken().getViewerId();
+    String size = request.getParameter("size");
+
+    // Preconditions
+    HandlerPreconditions.requireNotEmpty(contextIds, "No contextId is specified");
+    
+    CollectionOptions options = new CollectionOptions(request);
+    if(contextType == null){
+    	// when contextType is not specified, get list of documents specified by ids
+    	if(contextIds.size() == 1){
+        // GET /rest/documents/23 from Graasp
+        String output = "";
+    		HttpClient client = new DefaultHttpClient();
+    		String url = GRAASP_URL+"/rest/documents/"+contextIds.iterator().next()+"?token="+GRAASP_TOKEN+"&user="+viewerId;
+    		if (size != null && !size.equals("")) {
+    		  url += "&size="+size;
+    		}
+    		HttpGet get = new HttpGet(url);
+        get.getParams().setParameter("http.protocol.expect-continue", false);
+    		try {
+      		HttpResponse response = client.execute(get);
+    			BufferedReader rd = new BufferedReader(new InputStreamReader(
+    					response.getEntity().getContent()));
+    			String line = "";
+    			while ((line = rd.readLine()) != null) {
+    				output = line;
+    			}          
+          JSONObject jsonOutput = new JSONObject(output);
+          return ImmediateFuture.newInstance(jsonOutput);
+        } catch (Exception e) {
+          return ImmediateFuture.newInstance(e);
+        }
+        
+        // return documentService.getDocument(new DocumentId(contextIds.iterator().next()), fields, request.getToken());
+    	}else{
+    	    ImmutableSet.Builder<DocumentId> ids = ImmutableSet.builder();
+    	    for (String id : contextIds) {
+    	    	ids.add(new DocumentId(id));
+    	    }
+    	    Set<DocumentId> documentIds = ids.build();
+    		
+    		return documentService.getDocuments(documentIds, options, fields, request.getToken());
+    	}
+    }else{
+    	// contextType is specified, get a list of documents for this context
+    	if(contextIds.size() == 1){
+    	  
+        Context context = new Context(contextIds.iterator().next(),contextType);
+        return documentService.getDocumentsForContext(context, options, fields, request.getToken());
+        
+    	}else{
+    		throw new IllegalArgumentException("Cannot fetch documents for multiple contexts");
+    	}
+    }
+    
+  }
+
+  @Operation(httpMethods = "GET", path="/@supportedFields")
+  public List<Object> supportedFields(RequestItem request) {
+    // TODO: Would be nice if name in config matched name of service.
+    String container = Objects.firstNonNull(request.getToken().getContainer(), "default");
+    return config.getList(container,
+        "${Cur['gadgets.features'].opensocial.supportedFields.document}");
+  }
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/PersonHandler.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/PersonHandler.java
index 460ae76..feb3f2e 100644
--- a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/PersonHandler.java
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/PersonHandler.java
@@ -18,10 +18,14 @@
 package org.apache.shindig.social.opensocial.service;
 
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.Future;
+import java.io.File;
+import org.apache.commons.lang.StringUtils;
 
 import org.apache.shindig.common.util.FutureUtil;
+import org.apache.shindig.common.util.ImmediateFuture;
 import org.apache.shindig.config.ContainerConfig;
 import org.apache.shindig.protocol.HandlerPreconditions;
 import org.apache.shindig.protocol.Operation;
@@ -34,9 +38,15 @@ import org.apache.shindig.social.opensocial.spi.CollectionOptions;
 import org.apache.shindig.social.opensocial.spi.GroupId;
 import org.apache.shindig.social.opensocial.spi.PersonService;
 import org.apache.shindig.social.opensocial.spi.UserId;
+import org.apache.shindig.social.opensocial.spi.Context;
+
+import org.apache.shindig.common.crypto.BasicBlobCrypter;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
 
 import com.google.common.base.Objects;
 import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Iterables;
 import com.google.inject.Inject;
 
 /**
@@ -74,6 +84,12 @@ public class PersonHandler {
     CollectionOptions options = new CollectionOptions(request);
 
     if (userIds.size() == 1) {
+      // hack to get all public users in the system
+      String uid = userIds.iterator().next().getUserId();
+      if ("@all".equals(uid)) {
+        return personService.getPeople(userIds, groupId, options, fields, request.getToken());
+      }
+      
       if (optionalPersonId.isEmpty()) {
         if (groupId.getType() == GroupId.Type.self) {
             // If a filter is set then we have to call getPeople(), otherwise use the simpler getPerson()
@@ -88,14 +104,22 @@ public class PersonHandler {
           return personService.getPeople(userIds, groupId, options, fields, request.getToken());
         }
       } else if (optionalPersonId.size() == 1) {
-        // TODO: Add some crazy concept to handle the userId?
-        Set<UserId> optionalUserIds = ImmutableSet.of(
-            new UserId(UserId.Type.userId, optionalPersonId.iterator().next()));
+        String param = optionalPersonId.iterator().next();
+        if (param.equals("@person") || param.equals("@space")) {
+          // TODO: hack - in this case optionalPersonId id is treated as contextType
+          Context context = new Context(userIds.iterator().next().getUserId().toString(),param);
+          
+      		return personService.getPeopleForContext(context, options, fields, request.getToken());
+        } else {
+          // TODO: Add some crazy concept to handle the userId?
+          Set<UserId> optionalUserIds = ImmutableSet.of(
+              new UserId(UserId.Type.userId, optionalPersonId.iterator().next()));
 
-        Future<RestfulCollection<Person>> people = personService.getPeople(
-            optionalUserIds, new GroupId(GroupId.Type.self, null),
-            options, fields, request.getToken());
-        return FutureUtil.getFirstFromCollection(people);
+          Future<RestfulCollection<Person>> people = personService.getPeople(
+              optionalUserIds, new GroupId(GroupId.Type.self, null),
+              options, fields, request.getToken());
+          return FutureUtil.getFirstFromCollection(people);
+        }
       } else {
         ImmutableSet.Builder<UserId> personIds = ImmutableSet.builder();
         for (String pid : optionalPersonId) {
@@ -110,6 +134,29 @@ public class PersonHandler {
     // Every other case is a collection response.
     return personService.getPeople(userIds, groupId, options, fields, request.getToken());
   }
+  
+  /**
+   * Allowed end-points /people/{userId}/{groupId}
+   *
+   * examples: /people/john.doe/@all /people/john.doe/@friends /people/john.doe/@self
+   */
+  @Operation(httpMethods = "PUT", bodyParam = "person")
+  public Future<?> update(SocialRequestItem request) throws ProtocolException {
+    Set<String> fields = request.getFields(Person.Field.DEFAULT_FIELDS);
+    Set<UserId> userIds = request.getUsers();
+    
+    // Enforce preconditions - exactly one user is specified
+    HandlerPreconditions.requireNotEmpty(userIds, "No userId specified");
+    HandlerPreconditions.requireSingular(userIds, "Multiple userIds not supported");
+    
+    UserId userId = userIds.iterator().next();
+    
+    // Update person and return it
+    return personService.updatePerson(Iterables.getOnlyElement(userIds), 
+        request.getTypedParameter("person", Person.class), 
+        fields, 
+        request.getToken());
+  }
 
   @Operation(httpMethods = "GET", path="/@supportedFields")
   public List<Object> supportedFields(RequestItem request) {
@@ -118,4 +165,28 @@ public class PersonHandler {
     return config.getList(container,
         "${Cur['gadgets.features'].opensocial.supportedFields.person}");
   }
+
+  // encrypts a passed parameter string (to have ecrypted security token for graasp)
+  // example: /crypted_security_token?tokens=1:2:4,11:22:44
+  @Operation(httpMethods = "GET", path="/crypted_security_token")
+  public Future<?> cryptedSecurityToken(RequestItem request) throws Exception {
+    // get key file used for token encryption
+    String keyFile = config.getString("default", "gadgets.securityTokenKeyFile");
+    BasicBlobCrypter crypter = new BasicBlobCrypter(new File(keyFile));
+    // get a list of tokens from request params
+    List<String> tokens = request.getListParameter("tokens");
+    List<String> output = Lists.newArrayList();
+
+    for (String t : tokens) {
+      Map<String, String> str = Maps.newHashMap();
+      String[] s = StringUtils.split(t, ':');
+      str.put("o", s[0]); // owner
+      str.put("v", s[1]); // viewer
+      str.put("g", s[2]); // appId = appUrl
+
+      output.add("default:" + crypter.wrap(str)); // security token requires "default:" before
+    }
+
+    return ImmediateFuture.newInstance(output);
+  }
 }
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/RecommenderHandler.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/RecommenderHandler.java
new file mode 100644
index 0000000..16aa5d0
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/RecommenderHandler.java
@@ -0,0 +1,93 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.opensocial.service;
+
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.Future;
+
+import org.apache.shindig.auth.SecurityToken;
+import org.apache.shindig.common.util.FutureUtil;
+import org.apache.shindig.config.ContainerConfig;
+import org.apache.shindig.protocol.HandlerPreconditions;
+import org.apache.shindig.protocol.Operation;
+import org.apache.shindig.protocol.ProtocolException;
+import org.apache.shindig.protocol.RequestItem;
+import org.apache.shindig.protocol.RestfulCollection;
+import org.apache.shindig.protocol.Service;
+import org.apache.shindig.social.opensocial.model.Recommender;
+import org.apache.shindig.social.opensocial.model.Space;
+import org.apache.shindig.social.opensocial.spi.CollectionOptions;
+import org.apache.shindig.social.opensocial.spi.GroupId;
+import org.apache.shindig.social.opensocial.spi.SpaceId;
+import org.apache.shindig.social.opensocial.spi.RecommenderService;
+import org.apache.shindig.social.opensocial.spi.UserId;
+import org.apache.shindig.social.opensocial.spi.Context;
+
+import com.google.common.base.Objects;
+import com.google.common.collect.ImmutableSet;
+import com.google.inject.Inject;
+
+/**
+ * RPC/REST handler for all /spaces requests
+ */
+@Service(name = "recommender", path = "/{contextId}/{contextType}")
+public class RecommenderHandler {
+  private final RecommenderService recommenderService;
+  private final ContainerConfig config;
+
+  @Inject
+  public RecommenderHandler(RecommenderService recommenderService, ContainerConfig config) {
+    this.recommenderService = recommenderService;
+    this.config = config;
+  }
+
+  /**
+   * Allowed end-points /recommender/{contextId}/{contextType} /recommender/{spaceId} 
+   *
+   * examples: /recommender/john.doe/@person /recommender/tex.group/@space /recommender/tex.group
+   */
+  @Operation(httpMethods = "GET")
+  public Future<?> get(SocialRequestItem request) throws ProtocolException {
+    Set<String> contextIds = request.getContextIds();
+    String contextType = request.getContextType();
+
+    // Preconditions
+    HandlerPreconditions.requireNotEmpty(contextIds, "No contextId is specified");
+    
+    CollectionOptions options = new CollectionOptions(request);
+    if(contextType == null){
+    	// when contextType is not specified, throw an exception
+    	throw new IllegalArgumentException("No contextType is specified");
+    }else{
+    	// contextType is specified, get a list of spaces for this context
+     		Context context = new Context(contextIds.iterator().next(),contextType);
+     		Future<Recommender> r = recommenderService.getRecommendationsForContext(context, options, request.getToken()); 
+    		return r;
+    }
+    
+  }
+
+  @Operation(httpMethods = "GET", path="/@supportedFields")
+  public List<Object> supportedFields(RequestItem request) {
+    // TODO: Would be nice if name in config matched name of service.
+    String container = Objects.firstNonNull(request.getToken().getContainer(), "default");
+    return config.getList(container,
+        "${Cur['gadgets.features'].opensocial.supportedFields.recommender}");
+  }
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/SocialRequestItem.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/SocialRequestItem.java
index 61dc926..d30b158 100644
--- a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/SocialRequestItem.java
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/SocialRequestItem.java
@@ -30,6 +30,7 @@ import org.apache.shindig.protocol.multipart.FormDataItem;
 import org.apache.shindig.social.opensocial.spi.GroupId;
 import org.apache.shindig.social.opensocial.spi.PersonService;
 import org.apache.shindig.social.opensocial.spi.UserId;
+import org.apache.shindig.social.opensocial.spi.Context;
 import org.json.JSONObject;
 
 import com.google.common.collect.ImmutableSet;
@@ -42,6 +43,9 @@ public class SocialRequestItem extends BaseRequestItem {
   private static final String USER_ID = "userId";
   private static final String GROUP_ID = "groupId";
 
+  private static final String CONTEXT_ID = "contextId";
+  private static final String CONTEXT_TYPE = "contextType";
+
   public SocialRequestItem(Map<String, String[]> parameters, 
       SecurityToken token, BeanConverter converter, BeanJsonConverter jsonConverter) {
     super(parameters, token, converter, jsonConverter);
@@ -65,6 +69,19 @@ public class SocialRequestItem extends BaseRequestItem {
     }
     return userIds.build();
   }
+  
+  public Set<String> getContextIds() {
+	  List<String> ids = getListParameter(CONTEXT_ID);
+
+	  ImmutableSet.Builder<String> contextIds = ImmutableSet.builder();
+	  for (String id : ids) {
+		  contextIds.add(id);
+	  }
+	  return contextIds.build();
+  }
+  public String getContextType() {
+	  return getParameter(CONTEXT_TYPE);
+  }
 
   public GroupId getGroup() {
     return GroupId.fromJson(getParameter(GROUP_ID, "@self"));
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/SpaceHandler.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/SpaceHandler.java
new file mode 100644
index 0000000..5d5118f
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/service/SpaceHandler.java
@@ -0,0 +1,114 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.opensocial.service;
+
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.Future;
+
+import org.apache.shindig.auth.SecurityToken;
+import org.apache.shindig.common.util.FutureUtil;
+import org.apache.shindig.config.ContainerConfig;
+import org.apache.shindig.protocol.HandlerPreconditions;
+import org.apache.shindig.protocol.Operation;
+import org.apache.shindig.protocol.ProtocolException;
+import org.apache.shindig.protocol.RequestItem;
+import org.apache.shindig.protocol.RestfulCollection;
+import org.apache.shindig.protocol.Service;
+import org.apache.shindig.social.opensocial.model.Space;
+import org.apache.shindig.social.opensocial.spi.CollectionOptions;
+import org.apache.shindig.social.opensocial.spi.GroupId;
+import org.apache.shindig.social.opensocial.spi.SpaceId;
+import org.apache.shindig.social.opensocial.spi.SpaceService;
+import org.apache.shindig.social.opensocial.spi.UserId;
+import org.apache.shindig.social.opensocial.spi.Context;
+
+import com.google.common.base.Objects;
+import com.google.common.collect.ImmutableSet;
+import com.google.inject.Inject;
+
+/**
+ * RPC/REST handler for all /spaces requests
+ */
+@Service(name = "spaces", path = "/{contextId}+/{contextType}")
+public class SpaceHandler {
+  private final SpaceService spaceService;
+  private final ContainerConfig config;
+
+  @Inject
+  public SpaceHandler(SpaceService spaceService, ContainerConfig config) {
+    this.spaceService = spaceService;
+    this.config = config;
+  }
+
+  /**
+   * Allowed end-points /spaces/{contextId}/{contextType} /spaces/{spaceId}+ 
+   *
+   * examples: /spaces/john.doe/@person /spaces/tex.group/@space /spaces/tex.group
+   */
+  @Operation(httpMethods = "GET")
+  public Future<?> get(SocialRequestItem request) throws ProtocolException {
+    Set<String> fields = request.getFields(Space.Field.DEFAULT_FIELDS);
+    Set<String> contextIds = request.getContextIds();
+    String contextType = request.getContextType();
+
+    // Preconditions
+    HandlerPreconditions.requireNotEmpty(contextIds, "No contextId is specified");
+    
+    CollectionOptions options = new CollectionOptions(request);
+    if(contextType == null){
+    	// when contextType is not specified, get list of spaces specified by ids
+    	if(contextIds.size() == 1){
+    	  // hack to get all public user in the system
+        String sid = contextIds.iterator().next();
+        if ("@all".equals(sid)) {
+          ImmutableSet.Builder<SpaceId> ids = ImmutableSet.builder();
+          ids.add(new SpaceId(sid));
+    	    Set<SpaceId> spaceIds = ids.build();
+          return spaceService.getSpaces(spaceIds, options, fields, request.getToken());
+        }
+    		return spaceService.getSpace(new SpaceId(contextIds.iterator().next()), fields, request.getToken());
+    	}else{
+    	    ImmutableSet.Builder<SpaceId> ids = ImmutableSet.builder();
+    	    for (String id : contextIds) {
+    	    	ids.add(new SpaceId(id));
+    	    }
+    	    Set<SpaceId> spaceIds = ids.build();
+    		
+    		return spaceService.getSpaces(spaceIds, options, fields, request.getToken());
+    	}
+    }else{
+    	// contextType is specified, get a list of spaces for this context
+    	if(contextIds.size() == 1){
+    		Context context = new Context(contextIds.iterator().next(),contextType);
+    		return spaceService.getSpacesForContext(context, options, fields, request.getToken());
+    	}else{
+    		throw new IllegalArgumentException("Cannot fetch spaces for multiple contexts");
+    	}
+    }
+    
+  }
+
+  @Operation(httpMethods = "GET", path="/@supportedFields")
+  public List<Object> supportedFields(RequestItem request) {
+    // TODO: Would be nice if name in config matched name of service.
+    String container = Objects.firstNonNull(request.getToken().getContainer(), "default");
+    return config.getList(container,
+        "${Cur['gadgets.features'].opensocial.supportedFields.space}");
+  }
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/AppId.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/AppId.java
new file mode 100644
index 0000000..f174038
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/AppId.java
@@ -0,0 +1,43 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.opensocial.spi;
+
+import org.apache.shindig.auth.SecurityToken;
+
+import com.google.common.collect.ImmutableMap;
+import com.google.common.base.Objects;
+
+import java.util.Map;
+
+/**
+ * Data structure representing a applicationid
+ */
+public class AppId {
+
+
+  private String appId;
+
+  public AppId(String appId) {
+    this.appId = appId;
+  }
+
+  public String getAppId() {
+    return appId;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/AppService.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/AppService.java
new file mode 100644
index 0000000..db3ad57
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/AppService.java
@@ -0,0 +1,98 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.opensocial.spi;
+
+import org.apache.shindig.auth.SecurityToken;
+import org.apache.shindig.protocol.ProtocolException;
+import org.apache.shindig.protocol.RestfulCollection;
+import org.apache.shindig.social.opensocial.model.App;
+
+import java.util.Set;
+import java.util.concurrent.Future;
+
+/**
+ * Interface that defines how shindig gathers spaces information.
+ */
+public interface AppService {
+
+  /**
+   * When used will sort people by the container's definition of top friends. Note that both the
+   * sort order and the filter are required to deliver a topFriends response. The PersonService
+   * implementation should take this into account when delivering a topFriends response.
+   */
+  public static String TOP_FRIENDS_SORT = "topFriends";
+  /**
+   * Retrieves only the user's top friends. The meaning of top and how many top is is defined by the
+   * PersonService implementation.
+   */
+  public static String TOP_FRIENDS_FILTER = "topFriends";
+  /**
+   * Retrieves all friends with any data for this app.
+   * TODO: how is this app defined
+   */
+  public static String HAS_APP_FILTER = "hasApp";
+  /**
+   * Retrieves all friends. (ie no filter)
+   */
+  public static String ALL_FILTER = "all";
+  /**
+   * Will filter the people requested by checking if they are friends with the given idSpec. The
+   * filter value will be set to the userId of the target friend.
+   */
+  public static String IS_WITH_FRIENDS_FILTER = "isFriendsWith";
+
+  /**
+   * Returns a list of apps for the context.
+   *
+   * @param contexts A context for which apps to be returned
+   * @param collectionOptions How to filter, sort and paginate the collection being fetched
+   * @param fields The profile details to fetch. Empty set implies all
+   * @param token The gadget token @return a list of people.
+   * @param keyFile The key to encrypt token
+   * @return Future that returns a RestfulCollection of App
+   */
+  Future<RestfulCollection<App>> getAppsForContext(Context context,
+      CollectionOptions collectionOptions, Set<String> fields, SecurityToken token, String keyFile)
+      throws ProtocolException;
+  
+  /**
+   * Returns a list of apps that correspond to the passed in appsIds.
+   *
+   * @param appsIds A set of app ids
+   * @param collectionOptions How to filter, sort and paginate the collection being fetched
+   * @param fields The profile details to fetch. Empty set implies all
+   * @param token The gadget token @return a list of people.
+   * @param keyFile The key to encrypt token
+   * @return Future that returns a RestfulCollection of App
+   */
+  Future<RestfulCollection<App>> getApps(Set<AppId> AppIds,
+      CollectionOptions collectionOptions, Set<String> fields, SecurityToken token, String keyFile)
+      throws ProtocolException;
+  
+  /**
+   * Returns an app that corresponds to the passed in app id.
+   *
+   * @param id The app id for which app info to be fetched.
+   * @param fields The fields to fetch.
+   * @param token The gadget token
+   * @param keyFile The key to encrypt token
+   * @return an app.
+   */
+  Future<App> getApp(AppId AppId, Set<String> fields, SecurityToken token, String keyFile)
+      throws ProtocolException;
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/Context.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/Context.java
new file mode 100644
index 0000000..9e3d8b8
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/Context.java
@@ -0,0 +1,68 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.opensocial.spi;
+
+import org.apache.shindig.auth.SecurityToken;
+import org.apache.shindig.social.opensocial.spi.UserId.Type;
+
+import com.google.common.collect.ImmutableMap;
+import com.google.common.base.Objects;
+
+import java.util.Map;
+
+/**
+ * Data structure representing a context
+ */
+public class Context {
+
+  private String contextId;
+  private String contextType;
+  private String containerUrl;
+
+  public Context(String contextId, String contextType) {
+    this.contextId = contextId;
+    this.contextType = contextType;
+  }
+
+  public String getContextId() {
+    return contextId;
+  }
+
+  public String getContextType() {
+    return contextType;
+  }
+
+  public String getContainerUrl() {
+    return containerUrl;
+  }
+
+  public void setContainerUrl(String containerUrl) {
+    this.containerUrl = containerUrl;
+  }
+
+  public static UserId fromJson(String jsonId) {
+	  Type idSpecEnum = Type.jsonValueOf(jsonId);
+	  if (idSpecEnum != null) {
+		  return new UserId(idSpecEnum, null);
+	  }
+
+	  return new UserId(Type.userId, jsonId);
+  }
+
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/ContextService.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/ContextService.java
new file mode 100644
index 0000000..fde72ef
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/ContextService.java
@@ -0,0 +1,37 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.opensocial.spi;
+
+import org.apache.shindig.auth.SecurityToken;
+import org.apache.shindig.config.ContainerConfig;
+import org.apache.shindig.protocol.ProtocolException;
+import org.apache.shindig.protocol.RestfulCollection;
+import org.apache.shindig.social.opensocial.model.Space;
+
+import java.util.Set;
+import java.util.concurrent.Future;
+
+/**
+ * Interface that defines how shindig gathers spaces information.
+ */
+public class ContextService {
+	  public ContextService() {
+
+	  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/DocumentId.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/DocumentId.java
new file mode 100644
index 0000000..760bd3a
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/DocumentId.java
@@ -0,0 +1,43 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.opensocial.spi;
+
+import org.apache.shindig.auth.SecurityToken;
+
+import com.google.common.collect.ImmutableMap;
+import com.google.common.base.Objects;
+
+import java.util.Map;
+
+/**
+ * Data structure representing a documentid
+ */
+public class DocumentId {
+
+
+  private String documentId;
+
+  public DocumentId(String documentId) {
+    this.documentId = documentId;
+  }
+
+  public String getDocumentId() {
+    return documentId;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/DocumentService.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/DocumentService.java
new file mode 100644
index 0000000..1f5530c
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/DocumentService.java
@@ -0,0 +1,95 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.opensocial.spi;
+
+import org.apache.shindig.auth.SecurityToken;
+import org.apache.shindig.protocol.ProtocolException;
+import org.apache.shindig.protocol.RestfulCollection;
+import org.apache.shindig.social.opensocial.model.Document;
+
+import java.util.Set;
+import java.util.concurrent.Future;
+
+/**
+ * Interface that defines how shindig gathers spaces information.
+ */
+public interface DocumentService {
+
+  /**
+   * When used will sort people by the container's definition of top friends. Note that both the
+   * sort order and the filter are required to deliver a topFriends response. The PersonService
+   * implementation should take this into account when delivering a topFriends response.
+   */
+  public static String TOP_FRIENDS_SORT = "topFriends";
+  /**
+   * Retrieves only the user's top friends. The meaning of top and how many top is is defined by the
+   * PersonService implementation.
+   */
+  public static String TOP_FRIENDS_FILTER = "topFriends";
+  /**
+   * Retrieves all friends with any data for this document.
+   * TODO: how is this document defined
+   */
+  public static String HAS_APP_FILTER = "hasApp";
+  /**
+   * Retrieves all friends. (ie no filter)
+   */
+  public static String ALL_FILTER = "all";
+  /**
+   * Will filter the people requested by checking if they are friends with the given idSpec. The
+   * filter value will be set to the userId of the target friend.
+   */
+  public static String IS_WITH_FRIENDS_FILTER = "isFriendsWith";
+
+  /**
+   * Returns a list of documents for the context.
+   *
+   * @param contexts A context for which documents to be returned
+   * @param collectionOptions How to filter, sort and paginate the collection being fetched
+   * @param fields The profile details to fetch. Empty set implies all
+   * @param token The gadget token @return a list of people.
+   * @return Future that returns a RestfulCollection of Document
+   */
+  Future<RestfulCollection<Document>> getDocumentsForContext(Context context,
+      CollectionOptions collectionOptions, Set<String> fields, SecurityToken token)
+      throws ProtocolException;
+  
+  /**
+   * Returns a list of documents that correspond to the passed in documentsIds.
+   *
+   * @param documentsIds A set of document ids
+   * @param collectionOptions How to filter, sort and paginate the collection being fetched
+   * @param fields The profile details to fetch. Empty set implies all
+   * @param token The gadget token @return a list of people.
+   * @return Future that returns a RestfulCollection of Document
+   */
+  Future<RestfulCollection<Document>> getDocuments(Set<DocumentId> documentIds,
+      CollectionOptions collectionOptions, Set<String> fields, SecurityToken token)
+      throws ProtocolException;
+  
+  /**
+   * Returns an document that corresponds to the passed in document id.
+   *
+   * @param id The document id for which document info to be fetched.
+   * @param fields The fields to fetch.
+   * @param token The gadget token
+   * @return an document.
+   */
+  Future<Document> getDocument(DocumentId documentId, Set<String> fields, SecurityToken token)
+      throws ProtocolException;
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/PersonService.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/PersonService.java
index 37f37bb..edfbca5 100644
--- a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/PersonService.java
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/PersonService.java
@@ -57,6 +57,19 @@ public interface PersonService {
   public static String IS_WITH_FRIENDS_FILTER = "isFriendsWith";
 
   /**
+   * Returns a list of people for the context.
+   *
+   * @param contexts A context for which spaces to be returned
+   * @param collectionOptions How to filter, sort and paginate the collection being fetched
+   * @param fields The profile details to fetch. Empty set implies all
+   * @param token The gadget token @return a list of people.
+   * @return Future that returns a RestfulCollection of Person
+   */
+  Future<RestfulCollection<Person>> getPeopleForContext(Context context,
+      CollectionOptions collectionOptions, Set<String> fields, SecurityToken token)
+      throws ProtocolException;
+
+  /**
    * Returns a list of people that correspond to the passed in person ids.
    *
    * @param userIds A set of users
@@ -80,4 +93,17 @@ public interface PersonService {
    */
   Future<Person> getPerson(UserId id, Set<String> fields, SecurityToken token)
       throws ProtocolException;
+      
+  /**
+   * Updates person that corresponds to the passed in person id and updates him
+   * IMPORTANT: only viewer can update himself!!
+   *
+   * @param id The id of the person to fetch.
+   * @param request The request object
+   * @param fields The fields to fetch.
+   * @param token The gadget token
+   * @return a list of people.
+   */
+  Future<Person> updatePerson(UserId id, Person person, Set<String> fields, SecurityToken token)
+      throws ProtocolException;
 }
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/RecommenderService.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/RecommenderService.java
new file mode 100644
index 0000000..90d3ba2
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/RecommenderService.java
@@ -0,0 +1,44 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.opensocial.spi;
+
+import org.apache.shindig.auth.SecurityToken;
+import org.apache.shindig.protocol.ProtocolException;
+import org.apache.shindig.protocol.RestfulCollection;
+import org.apache.shindig.social.opensocial.model.Recommender;
+
+import java.util.Set;
+import java.util.concurrent.Future;
+
+/**
+ * Interface that defines how shindig gathers spaces information.
+ */
+public interface RecommenderService {
+  /**
+   * Returns a list of recommended items for the context.
+   *
+   * @param context A context for which spaces to be returned
+   * @param collectionOptions How to filter, sort and paginate the collection being fetched
+   * @param token The gadget token @return a list of people.
+   * @return Future that returns a RestfulCollection of Recommended items
+   */
+  Future<Recommender> getRecommendationsForContext(Context context,
+      CollectionOptions collectionOptions, SecurityToken token)
+      throws ProtocolException;
+  
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/SpaceId.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/SpaceId.java
new file mode 100644
index 0000000..1115d5d
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/SpaceId.java
@@ -0,0 +1,43 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.opensocial.spi;
+
+import org.apache.shindig.auth.SecurityToken;
+
+import com.google.common.collect.ImmutableMap;
+import com.google.common.base.Objects;
+
+import java.util.Map;
+
+/**
+ * Data structure representing a spaceid
+ */
+public class SpaceId {
+
+
+  private String spaceId;
+
+  public SpaceId(String spaceId) {
+    this.spaceId = spaceId;
+  }
+
+  public String getSpaceId() {
+    return spaceId;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/SpaceService.java b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/SpaceService.java
new file mode 100644
index 0000000..7aa87b2
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/opensocial/spi/SpaceService.java
@@ -0,0 +1,95 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.opensocial.spi;
+
+import org.apache.shindig.auth.SecurityToken;
+import org.apache.shindig.protocol.ProtocolException;
+import org.apache.shindig.protocol.RestfulCollection;
+import org.apache.shindig.social.opensocial.model.Space;
+
+import java.util.Set;
+import java.util.concurrent.Future;
+
+/**
+ * Interface that defines how shindig gathers spaces information.
+ */
+public interface SpaceService {
+
+  /**
+   * When used will sort people by the container's definition of top friends. Note that both the
+   * sort order and the filter are required to deliver a topFriends response. The PersonService
+   * implementation should take this into account when delivering a topFriends response.
+   */
+  public static String TOP_FRIENDS_SORT = "topFriends";
+  /**
+   * Retrieves only the user's top friends. The meaning of top and how many top is is defined by the
+   * PersonService implementation.
+   */
+  public static String TOP_FRIENDS_FILTER = "topFriends";
+  /**
+   * Retrieves all friends with any data for this application.
+   * TODO: how is this application defined
+   */
+  public static String HAS_APP_FILTER = "hasApp";
+  /**
+   * Retrieves all friends. (ie no filter)
+   */
+  public static String ALL_FILTER = "all";
+  /**
+   * Will filter the people requested by checking if they are friends with the given idSpec. The
+   * filter value will be set to the userId of the target friend.
+   */
+  public static String IS_WITH_FRIENDS_FILTER = "isFriendsWith";
+
+  /**
+   * Returns a list of space for the context.
+   *
+   * @param contexts A context for which spaces to be returned
+   * @param collectionOptions How to filter, sort and paginate the collection being fetched
+   * @param fields The profile details to fetch. Empty set implies all
+   * @param token The gadget token @return a list of people.
+   * @return Future that returns a RestfulCollection of Space
+   */
+  Future<RestfulCollection<Space>> getSpacesForContext(Context context,
+      CollectionOptions collectionOptions, Set<String> fields, SecurityToken token)
+      throws ProtocolException;
+  
+  /**
+   * Returns a list of spaces that correspond to the passed in spacesIds.
+   *
+   * @param spaceIds A set of space ids
+   * @param collectionOptions How to filter, sort and paginate the collection being fetched
+   * @param fields The profile details to fetch. Empty set implies all
+   * @param token The gadget token @return a list of people.
+   * @return Future that returns a RestfulCollection of Space
+   */
+  Future<RestfulCollection<Space>> getSpaces(Set<SpaceId> spaceIds,
+      CollectionOptions collectionOptions, Set<String> fields, SecurityToken token)
+      throws ProtocolException;
+  
+  /**
+   * Returns a space that corresponds to the passed in space id.
+   *
+   * @param id The space id for which space info to be fetched.
+   * @param fields The fields to fetch.
+   * @param token The gadget token
+   * @return a space.
+   */
+  Future<Space> getSpace(SpaceId spaceId, Set<String> fields, SecurityToken token)
+      throws ProtocolException;
+}
<<<<<<< HEAD

=======
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/sample/spi/JsonDbOpensocialService.java b/java/social-api/src/main/java/org/apache/shindig/social/sample/spi/JsonDbOpensocialService.java
index 0a81d80..b564404 100644
--- a/java/social-api/src/main/java/org/apache/shindig/social/sample/spi/JsonDbOpensocialService.java
+++ b/java/social-api/src/main/java/org/apache/shindig/social/sample/spi/JsonDbOpensocialService.java
@@ -52,10 +52,13 @@ import org.apache.shindig.social.opensocial.spi.MediaItemService;
 import org.apache.shindig.social.opensocial.spi.MessageService;
 import org.apache.shindig.social.opensocial.spi.PersonService;
 import org.apache.shindig.social.opensocial.spi.UserId;
+import org.apache.shindig.social.opensocial.spi.Context;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
+import org.apache.shindig.social.opensocial.service.SocialRequestItem;
+
 import com.google.common.collect.ImmutableSortedSet;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
@@ -365,6 +368,53 @@ public class JsonDbOpensocialService implements ActivityService, PersonService,
           je);
     }
   }
+  
+  /** {@inheritDoc} */
+  public Future<Person> updatePerson(UserId id, Person person, Set<String> fields, SecurityToken token)
+      throws ProtocolException {
+    try {
+      JSONArray people = db.getJSONArray(PEOPLE_TABLE);
+
+      for (int i = 0; i < people.length(); i++) {
+        JSONObject personDb = people.getJSONObject(i);
+        if (id != null && personDb.get(Person.Field.ID.toString()).equals(id.getUserId(token))) {
+          Person personObj = filterFields(personDb, fields, Person.class);
+          Map<String, Object> appData = getPersonAppData(personDb.getString(Person.Field.ID
+              .toString()), fields);
+          personObj.setAppData(appData);
+
+          return ImmediateFuture.newInstance(personObj);
+        }
+      }
+      throw new ProtocolException(HttpServletResponse.SC_BAD_REQUEST, "Person '" + id.getUserId(token) + "' not found");
+    } catch (JSONException je) {
+      throw new ProtocolException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, je.getMessage(),
+          je);
+    }
+  }
+
+  // example from real db implementation
+  public Future<RestfulCollection<Person>> getPeopleForContext(Context context, 
+      CollectionOptions collectionOptions, Set<String> fields,
+       SecurityToken token) throws ProtocolException {
+    // list of spaces is retrieved for a context
+
+    // not dealing with the collection options at the moment, and not the fields because they are
+    // either lazy or at no extra costs, the consumer will either access the properties or not
+    List<Person> plist = null;
+    int lastPos = 1;
+    Long totalResults = null;
+
+  	plist = Lists.newArrayList();
+    // FIXME: use JPQLUtils.getTotalResults for it
+    totalResults = new Long(plist.size());
+    // all of the above could equally have been placed into a thread to overlay the
+    // db wait times.
+    RestfulCollection<Person> restCollection = new RestfulCollection<Person>(
+        plist, collectionOptions.getFirst(), totalResults.intValue(), collectionOptions.getMax());
+    return ImmediateFuture.newInstance(restCollection);
+  }
+
 
   private Map<String, Object> getPersonAppData(String id, Set<String> fields) {
     try {
>>>>>>> updates .gitignore, adds diff file for previous version of shindig
diff --git a/java/social-api/src/test/java/org/apache/shindig/social/opensocial/service/DocumentHandlerTest.java b/java/social-api/src/test/java/org/apache/shindig/social/opensocial/service/DocumentHandlerTest.java
new file mode 100644
index 0000000..dfb9ba4
--- /dev/null
+++ b/java/social-api/src/test/java/org/apache/shindig/social/opensocial/service/DocumentHandlerTest.java
@@ -0,0 +1,225 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.opensocial.service;
+
+import org.apache.shindig.common.EasyMockTestCase;
+import org.apache.shindig.common.testing.FakeGadgetToken;
+import org.apache.shindig.common.util.ImmediateFuture;
+import org.apache.shindig.config.ContainerConfig;
+import org.apache.shindig.config.JsonContainerConfig;
+import org.apache.shindig.expressions.Expressions;
+import org.apache.shindig.protocol.DefaultHandlerRegistry;
+import org.apache.shindig.protocol.HandlerExecutionListener;
+import org.apache.shindig.protocol.HandlerRegistry;
+import org.apache.shindig.protocol.ProtocolException;
+import org.apache.shindig.protocol.RestHandler;
+import org.apache.shindig.protocol.RestfulCollection;
+import org.apache.shindig.protocol.conversion.BeanJsonConverter;
+import org.apache.shindig.social.opensocial.model.Activity;
+import org.apache.shindig.social.opensocial.spi.ActivityService;
+import org.apache.shindig.social.opensocial.spi.CollectionOptions;
+import org.apache.shindig.social.opensocial.spi.GroupId;
+import org.apache.shindig.social.opensocial.spi.UserId;
+
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Sets;
+
+import static org.easymock.EasyMock.eq;
+import static org.easymock.EasyMock.isNull;
+import org.json.JSONObject;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.io.StringReader;
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.Future;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+
+import org.apache.http.HttpResponse;
+import org.apache.http.NameValuePair;
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.entity.UrlEncodedFormEntity;
+import org.apache.http.client.methods.*;
+import org.apache.http.impl.client.DefaultHttpClient;
+import org.apache.http.message.BasicNameValuePair;
+
+import java.nio.charset.Charset;
+import org.apache.http.entity.mime.MultipartEntity;
+import org.apache.http.entity.mime.content.StringBody;
+import org.apache.http.entity.mime.content.FileBody;
+
+import java.io.File;
+
+public class DocumentHandlerTest extends EasyMockTestCase {
+
+  private BeanJsonConverter converter;
+
+  private ActivityService activityService;
+
+  private ActivityHandler handler;
+
+  private FakeGadgetToken token;
+
+  private static final Set<UserId> JOHN_DOE = 
+      ImmutableSet.of(new UserId(UserId.Type.userId, "john.doe"));
+
+  protected HandlerRegistry registry;
+  protected ContainerConfig containerConfig;
+
+  @Before
+  public void setUp() throws Exception {
+    token = new FakeGadgetToken();
+    token.setAppId("appId");
+
+    converter = mock(BeanJsonConverter.class);
+    activityService = mock(ActivityService.class);
+
+    JSONObject config = new JSONObject('{' + ContainerConfig.DEFAULT_CONTAINER + ':' +
+            "{'gadgets.features':{opensocial:" +
+               "{supportedFields: {activity: ['id', 'title']}}" +
+             "}}}");
+
+    containerConfig = new JsonContainerConfig(config, Expressions.forTesting());
+    handler = new ActivityHandler(activityService, containerConfig);
+    registry = new DefaultHandlerRegistry(null, converter,
+        new HandlerExecutionListener.NoOpHandler());
+    registry.addHandlers(ImmutableSet.<Object>of(handler));
+  }
+
+  private void assertHandleGetForGroup(GroupId.Type group) throws Exception {
+    String path = "/activities/john.doe/@" + group.toString();
+    RestHandler operation = registry.getRestHandler(path, "GET");
+
+    List<Activity> activityList = ImmutableList.of();
+    RestfulCollection<Activity> data = new RestfulCollection<Activity>(activityList);
+    org.easymock.EasyMock.expect(activityService.getActivities(eq(JOHN_DOE),
+       eq(new GroupId(group, null)), (String)isNull(), eq(ImmutableSet.<String>of()),
+        org.easymock.EasyMock.isA(CollectionOptions.class), eq(token))).
+        andReturn(ImmediateFuture.newInstance(data));
+
+    replay();
+    assertEquals(data, operation.execute(Maps.<String, String[]>newHashMap(),
+        null, token, converter).get());
+    verify();
+    reset();
+  }
+
+  @Test
+  public void testHandleGetPlural() throws Exception {
+    String path = "/activities/john.doe,jane.doe/@self/@app";
+    RestHandler operation = registry.getRestHandler(path, "GET");
+
+    // JSONArray people = db.getDb().getJSONArray("people");
+    JSONObject jsonPerson = new JSONObject();
+    jsonPerson.put("id", "updatePerson");    
+    // people.put(people.length(),jsonPerson);
+    
+    JSONObject test = new JSONObject("{aboutMe:\"test\",displayName:\"Evgeny\",thumbnailUrl:\"httpaboutme\"}");
+    System.out.println(test.toString());
+    
+    
+    System.out.println(jsonPerson);
+    
+    // URL oracle = new URL("http://localhost:8080/rest/spaces/6");
+    //   BufferedReader in = new BufferedReader(
+    //         new InputStreamReader(
+    //         oracle.openStream()));
+    // 
+    //   String inputLine;
+    //   String s = "";
+    //   while ((inputLine = in.readLine()) != null)
+    //       s += inputLine;
+    // 
+    //   in.close();
+    // 
+    // System.out.println(s);
+    // 
+    // Future f = ImmediateFuture.newInstance(s);
+    // System.out.println(f); 
+    
+    String data = "";
+		HttpClient client = new DefaultHttpClient();
+    HttpPost post = new HttpPost("http://reacttest.epfl.ch/rest/documents/23");
+    // HttpPost post = new HttpPost("http://localhost:3000/rest/documents/23?test=hey");
+		try {
+		  post.getParams().setParameter("http.protocol.expect-continue", false);
+      // post.setHeader("Accept", "application/json");
+      // post.removeHeaders("Expect");
+      // post.removeHeaders("expect");
+      // post.setHeader("Expect", "100");
+       // List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(1);
+       // nameValuePairs.add(new BasicNameValuePair("registrationid",
+       //    "123456789"));
+       // post.setEntity(new UrlEncodedFormEntity(nameValuePairs));
+       
+      // File file = new File("c:/TRASH/zaba_1.jpg");
+      // 
+      // MultipartEntity mpEntity = new MultipartEntity();
+      // ContentBody cbFile = new FileBody(file, "image/jpeg");
+      // mpEntity.addPart("userfile", cbFile);
+      // 
+      // 
+      // post.setEntity(mpEntity);
+      MultipartEntity entity = new MultipartEntity();
+      entity.addPart("title", new StringBody("mytitle","text/plain", Charset.forName("UTF-8")));
+      entity.addPart("desc", new StringBody("mydesc","text/plain",  Charset.forName("UTF-8")));
+      // File f = new File("test.txt");
+      // if(!f.exists()){
+      //   f.createNewFile();
+      // }
+      // 
+      // FileBody fileBody = new FileBody(f);
+      // entity.addPart("file", fileBody);
+      post.setEntity(entity);
+ 
+			HttpResponse response = client.execute(post);
+			BufferedReader rd = new BufferedReader(new InputStreamReader(
+					response.getEntity().getContent()));
+			String line = "";
+			while ((line = rd.readLine()) != null) {
+				System.out.println(line);
+			}
+
+		} catch (IOException e) {
+			e.printStackTrace();
+		}    
+    System.out.println(data);
+    
+    // List<Activity> activities = ImmutableList.of();
+    // RestfulCollection<Activity> data = new RestfulCollection<Activity>(activities);
+    // Set<UserId> userIdSet = Sets.newLinkedHashSet(JOHN_DOE);
+    // userIdSet.add(new UserId(UserId.Type.userId, "jane.doe"));
+    // org.easymock.EasyMock.expect(activityService.getActivities(eq(userIdSet),
+    //     eq(new GroupId(GroupId.Type.self, null)), eq("appId"),eq(ImmutableSet.<String>of()),
+    //     org.easymock.EasyMock.isA((CollectionOptions.class)), eq(token))).andReturn(
+    //       ImmediateFuture.newInstance(data));
+
+    replay();
+    // assertEquals(data, operation.execute(Maps.<String, String[]>newHashMap(),
+    //     null, token, converter).get());
+    verify();
+    reset();
+  }
<<<<<<< HEAD
+}
=======
+}
diff --git a/java/social-api/src/test/java/org/apache/shindig/social/opensocial/service/PersonHandlerTest.java b/java/social-api/src/test/java/org/apache/shindig/social/opensocial/service/PersonHandlerTest.java
index 6092742..eecc6d0 100644
--- a/java/social-api/src/test/java/org/apache/shindig/social/opensocial/service/PersonHandlerTest.java
+++ b/java/social-api/src/test/java/org/apache/shindig/social/opensocial/service/PersonHandlerTest.java
@@ -88,9 +88,11 @@ public class PersonHandlerTest extends EasyMockTestCase {
     converter = mock(BeanJsonConverter.class);
     personService = mock(PersonService.class);
     JSONObject config = new JSONObject('{' + ContainerConfig.DEFAULT_CONTAINER + ':' +
-            "{'gadgets.features':{opensocial:" +
-               "{supportedFields: {person: ['id', {name: 'familyName'}]}}" +
-             "}}}");
+              "{'gadgets.features':{opensocial:" +
+                 "{supportedFields: {person: ['id', {name: 'familyName'}]}}}," +
+               "'gadgets.securityTokenKeyFile': '/Graaasp/current/config/security_token.txt'," +
+              "}" +
+            "}");
 
     containerConfig = new JsonContainerConfig(config, Expressions.forTesting());
     handler = new PersonHandler(personService, containerConfig);
@@ -254,4 +256,22 @@ public class PersonHandlerTest extends EasyMockTestCase {
 
     verify();
   }
+  @Test
+  public void testHandleGetCryptedSecurityToken() throws Exception {
+    String path = "/people/crypted_security_token";
+    RestHandler operation = registry.getRestHandler(path, "GET");
+
+    replay();
+    @SuppressWarnings("unchecked")
+    Map<String, String[]> params = Maps.newHashMap();
+    params.put("tokens", new String[]{"1:2:4,11:22:44"});
+
+    List<String> received = (List<String>) operation.execute(params, null, token, converter).get();
+    System.out.println(received);
+    assertEquals(2, received.size());
+    assertEquals("hello", received.get(0).toString());
+    assertEquals("hello2", received.get(1).toString());
+
+    verify();
+  }
 }

diff --git a/pom.xml b/pom.xml
index 7d07458..032567f 100644
--- a/pom.xml
+++ b/pom.xml
@@ -431,6 +431,7 @@
         <module>java/gadgets</module>
         <module>java/social-api</module>
         <module>java/server</module>
+        <module>java/graaasp</module>
         <module>extras</module>
       </modules>
     </profile>
@@ -473,6 +474,14 @@
       </modules>
     </profile>
 
+    <!-- profile to build java/graaasp -->
+    <profile>
+      <id>graaasp</id>
+      <modules>
+        <module>java/graaasp</module>
+      </modules>
+    </profile>
+
     <profile>
       <id>run</id>
       <dependencies>
@@ -494,9 +503,10 @@
           <artifactId>shindig-extras</artifactId>
           <version>${project.version}</version>
         </dependency>
+
         <!-- external dependencies -->
       </dependencies>
-
+      
       <build>
         <defaultGoal>jetty:run-war</defaultGoal>
         <plugins>
@@ -1390,6 +1400,11 @@
       </dependency>
       <dependency>
         <groupId>org.apache.shindig</groupId>
+        <artifactId>shindig-graaasp</artifactId>
+        <version>${project.version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.apache.shindig</groupId>
         <artifactId>shindig-common</artifactId>
         <version>${project.version}</version>
         <type>test-jar</type>

diff --git a/root.dir b/root.dir
new file mode 100644
index 0000000..e69de29
diff --git a/ssl_keys/oauthkey.pem b/ssl_keys/oauthkey.pem
new file mode 100644
index 0000000..a4bac72
--- /dev/null
+++ b/ssl_keys/oauthkey.pem
@@ -0,0 +1,16 @@
+-----BEGIN PRIVATE KEY-----
+MIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGBALkgdROj7T3gG6ri
+z04tUbgfWrOZe1c0f6AY1ApgPdku4lnLP7NJdsSfARDdVMLviVZjKVxj48kAR7Yk
+EfPU0JuQKN4avNADw5KtXMemWSVKiMfDr6IGljKFKGNiTtC1SqEsl0D+YJXPnHHj
+JkXg7i+KTZKq7nzyoES7tonFpy8fAgMBAAECgYB73m7X/GiCbVC179r8GTDDvR8I
+axrvR65ZpiNC6hCYIFnN8UQnJ3GzsBybdyz+3h4L0n/bVO8WD/zrr4jfmLcXKrHL
+t/IG1CK12hGAhQkdvy2DWTa5tlHh4ZFl/LLsNPsRm/c44tLwhaaXc2/cUJPoodGo
+1rKLfw0NAx21KzcYqQJBAPLwyi7XfOhK5eeP++yPcA+YqPjGN/5hN0aj1a5Spn7+
+iUkKK+I53Cid8TdujD19i5dcSZ4Fj/DKA6f37gdvfy0CQQDDFBEh53fuof16UC5p
+xO2MFv38JI2VvSCKTe+uSyWnOZbjMKylOLc7Ye2c1D63wrcHbRq94RiShAO+HXkx
+yjb7AkBVrKUgr83U/dTmPNjTLCKQ3X15fi3w/8fGmbCZsXwV/R3dLEEdntoNWOXg
+bpP2e3fnARzVJZEFkbiIW98NsDxhAkBWHQubDdSxcKy2S6LRae76wkOIBJLDoOM2
+akT9iYqrkQ58Z8YugSTRf98mNcMh10B4dL8zRqRUORZ13Ajd48f1AkBJUsMNQ3+K
+WIeu+j7lex66ELLE7mj7IbkGJJfngYroyFAZ3zrgwdHlm4xRIIfpSSwHpUwsuf6g
+z4iFsj/D9J9v
+-----END PRIVATE KEY-----
diff --git a/ssl_keys/testkey.pem b/ssl_keys/testkey.pem
new file mode 100644
index 0000000..d2c8464
--- /dev/null
+++ b/ssl_keys/testkey.pem
@@ -0,0 +1,29 @@
+-----BEGIN RSA PRIVATE KEY-----
+MIICWwIBAAKBgQC5IHUTo+094Buq4s9OLVG4H1qzmXtXNH+gGNQKYD3ZLuJZyz+z
+SXbEnwEQ3VTC74lWYylcY+PJAEe2JBHz1NCbkCjeGrzQA8OSrVzHplklSojHw6+i
+BpYyhShjYk7QtUqhLJdA/mCVz5xx4yZF4O4vik2Squ588qBEu7aJxacvHwIDAQAB
+AoGAe95u1/xogm1Qte/a/Bkww70fCGsa70euWaYjQuoQmCBZzfFEJydxs7Acm3cs
+/t4eC9J/21TvFg/866+I35i3Fyqxy7fyBtQitdoRgIUJHb8tg1k2ubZR4eGRZfyy
+7DT7EZv3OOLS8IWml3Nv3FCT6KHRqNayi38NDQMdtSs3GKkCQQDy8Mou13zoSuXn
+j/vsj3APmKj4xjf+YTdGo9WuUqZ+/olJCiviOdwonfE3bow9fYuXXEmeBY/wygOn
+9+4Hb38tAkEAwxQRIed37qH9elAuacTtjBb9/CSNlb0gik3vrkslpzmW4zCspTi3
+O2HtnNQ+t8K3B20aveEYkoQDvh15Mco2+wJAVaylIK/N1P3U5jzY0ywikN19eX4t
+8P/HxpmwmbF8Ff0d3SxBHZ7aDVjl4G6T9nt35wEc1SWRBZG4iFvfDbA8YQJAVh0L
+mw3UsXCstkui0Wnu+sJDiASSw6DjNmpE/YmKq5EOfGfGLoEk0X/fJjXDIddAeHS/
+M0akVDkWddwI3ePH9QJASVLDDUN/iliHrvo+5XseuhCyxO5o+yG5BiSX54GK6MhQ
+Gd864MHR5ZuMUSCH6UksB6VMLLn+oM+IhbI/w/Sfbw==
+-----END RSA PRIVATE KEY-----
+-----BEGIN CERTIFICATE-----
+MIICGzCCAYSgAwIBAgIJAPXpbapD9to9MA0GCSqGSIb3DQEBBQUAMBQxEjAQBgNV
+BAMTCW15dGVzdGtleTAeFw0xMDExMTkxNTMwNDdaFw0xMTExMTkxNTMwNDdaMBQx
+EjAQBgNVBAMTCW15dGVzdGtleTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA
+uSB1E6PtPeAbquLPTi1RuB9as5l7VzR/oBjUCmA92S7iWcs/s0l2xJ8BEN1Uwu+J
+VmMpXGPjyQBHtiQR89TQm5Ao3hq80APDkq1cx6ZZJUqIx8OvogaWMoUoY2JO0LVK
+oSyXQP5glc+cceMmReDuL4pNkqrufPKgRLu2icWnLx8CAwEAAaN1MHMwHQYDVR0O
+BBYEFMYJV0E3UTzTEwM/Bn078ko/qiuNMEQGA1UdIwQ9MDuAFMYJV0E3UTzTEwM/
+Bn078ko/qiuNoRikFjAUMRIwEAYDVQQDEwlteXRlc3RrZXmCCQD16W2qQ/baPTAM
+BgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA4GBAKR8i8wJWZIm9O1eILUwxbV2
+fEJLSSKrFWbXkFO7kRz3H5WKEvUbTMpNvmli+mmGtfkOWkp8KfTjJtcKJ3lg6PTk
+Ds/2RLuapBy3ZofUmtTjggAO5wN7hJu9t23qmVEd5Es9cKM0uUepSK9j638MA2w3
+uetJNgwzKtzsroZCirzZ
+-----END CERTIFICATE-----
>>>>>>> updates .gitignore, adds diff file for previous version of shindig
