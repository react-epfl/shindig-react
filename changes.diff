





diff --git a/java/server/src/main/webapp/WEB-INF/web.xml b/java/server/src/main/webapp/WEB-INF/web.xml
deleted file mode 100644
index c32e917..0000000


diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/AccountDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AccountDb.java
new file mode 100644
index 0000000..4e0aa4f
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AccountDb.java
@@ -0,0 +1,163 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.social.opensocial.model.Account;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.DiscriminatorColumn;
+import javax.persistence.DiscriminatorValue;
+import javax.persistence.Entity;
+import javax.persistence.Id;
+import javax.persistence.Inheritance;
+import javax.persistence.InheritanceType;
+import javax.persistence.Table;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Version;
+import javax.persistence.Transient;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+/**
+ * Storage object for the Person. Stored in a table "account" which is also used by
+ * joined extension classes, the account usage column defines the class where the extension
+ * is used, but in most cases addresses are shared and this column has the value "sharedaccount"
+ * For more information on the API see {@link Account}
+ */
+@Entity
+@Table(name = "account")
+@Inheritance(strategy = InheritanceType.JOINED)
+@DiscriminatorColumn(name = "account_usage")
+@DiscriminatorValue(value = "sharedaccount")
+public class AccountDb implements Account, DbObject {
+  /**
+   * The internal object ID used for references to this object. Should be generated
+   * by the underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "oid")
+  protected long objectId;
+
+  /**
+   * An optimistic locking field.
+   */
+  @Version
+  @Column(name = "version")
+  protected long version;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Account
+   */
+  @Basic
+  @Column(name = "domain", length = 255)
+  protected String domain;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Account
+   */
+  @Basic
+  @Column(name = "user_id", length = 255)
+  protected String userId;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Account
+   */
+  @Basic
+  @Column(name = "username", length = 255)
+  protected String username;
+
+  /**
+   * create an empty account object.
+   */
+  public AccountDb() {
+  }
+
+  /**
+   * Create an account object based on domain, userId and username
+   * @param domain the domain of the account
+   * @param userId the user id of the account
+   * @param username the username of the account
+   */
+  public AccountDb(String domain, String userId, String username) {
+    this.domain = domain;
+    this.userId = userId;
+    this.username = username;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Account#getDomain()
+   */
+  public String getDomain() {
+    return domain;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Account#setDomain(java.lang.String)
+   */
+  public void setDomain(String domain) {
+    this.domain = domain;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Account#getUserId()
+   */
+  public String getUserId() {
+    return userId;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Account#setUserId(java.lang.String)
+   */
+  public void setUserId(String userId) {
+    this.userId = userId;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Account#getUsername()
+   */
+  public String getUsername() {
+    return username;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Account#setUsername(java.lang.String)
+   */
+  public void setUsername(String username) {
+    this.username = username;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.core.model.DbObject#getObjectId()
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/ActivityDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ActivityDb.java
new file mode 100644
index 0000000..92c4024
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ActivityDb.java
@@ -0,0 +1,667 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.CascadeType.ALL;
+import static javax.persistence.GenerationType.IDENTITY;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.MapMaker;
+
+import org.apache.shindig.social.core.model.ActivityDb;
+import org.apache.shindig.social.core.model.ActivityTemplateParamsDb;
+import org.apache.shindig.social.core.model.MediaItemDb;
+import org.apache.shindig.social.opensocial.model.Activity;
+import org.apache.shindig.social.opensocial.model.MediaItem;
+
+import java.util.Date;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.JoinTable;
+import javax.persistence.ManyToMany;
+import javax.persistence.MapKey;
+import javax.persistence.NamedQueries;
+import javax.persistence.NamedQuery;
+import javax.persistence.OneToMany;
+import javax.persistence.PostLoad;
+import javax.persistence.PrePersist;
+import javax.persistence.Table;
+import javax.persistence.Temporal;
+import javax.persistence.TemporalType;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+
+/**
+ * Activity model object stored in the "activity" table.
+ */
+@Entity
+@Table(name = "activity")
+@NamedQueries(value = {
+    @NamedQuery(name = ActivityDb.FINDBY_ACTIVITY_ID, 
+        query = "select activity from ActivityDb activity where activity.userId = :userId and activity.id = :activityId")
+    })
+public class ActivityDb implements Activity, DbObject {
+
+  public static final String FINDBY_ACTIVITY_ID = "q.activity.findbyactivityid";
+
+  public static final String PARAM_USERID = "userId";
+  
+  public static final String PARAM_ACTIVITYID = "activityId";
+   
+  public static final String JPQL_FINDBY_ACTIVITIES = null;
+  
+  public static final String JPQL_FINDACTIVITY = "select a from ActivityDb a where ";
+  
+  public static final String JPQL_FINDACTIVITY_BY_FRIENDS = "select a from ActivityDb a where a.userId in (select p.id from PersonDb p where p.objectId in (select f.friend.objectId from PersonDb p, FriendDb f where p.objectId = f.person.objectId and ";
+
+  /**
+   * The internal object ID used for references to this object. Should be
+   * generated by the underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "oid")
+  protected long objectId;
+
+  /**
+   * An optimistic locking field
+   */
+  @Version
+  @Column(name = "version")
+  protected long version;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "app_id", length = 255)
+  protected String appId;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "body", length = 255)
+  protected String body;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "body_id", length = 255)
+  protected String bodyId;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "external_id", length = 255)
+  protected String externalId;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "activity_id", length = 255)
+  protected String id;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "updated")
+  @Temporal(TemporalType.TIMESTAMP)
+  protected Date updated;
+
+  /**
+   * A list of shared media items associated with this activity, joined by the
+   * table "activity_media" such that activity_media.activity_id = activity.oid
+   * and activity_media.media_id = media.oid. Media items may be shared amongst
+   * many activities or other entities.
+   */
+  @ManyToMany(targetEntity = MediaItemDb.class, cascade = ALL)
+  @JoinTable(name = "activity_media",
+      joinColumns = @JoinColumn(name = "activity_id", referencedColumnName = "oid"),
+      inverseJoinColumns = @JoinColumn(name = "media_id", referencedColumnName = "oid"))
+  protected List<MediaItem> mediaItems;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "posted_time")
+  protected Long postedTime;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "priority")
+  protected Float priority;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "stream_favicon_url", length = 255)
+  protected String streamFaviconUrl;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "stream_source_url", length = 255)
+  protected String streamSourceUrl;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "stream_title", length = 255)
+  protected String streamTitle;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "stream_url", length = 255)
+  protected String streamUrl;
+
+  /**
+   * Create map using ActivityTemplateParamsDb such that ActivityTemplateParams
+   * are joined on oid -> activity_id and then the name value becomes the key,
+   * and the value becomes the value unfortunately JPA wont do
+   * Map<String,String> so this is handled in the prePersist and postLoad hook.
+   */
+  @OneToMany(targetEntity = ActivityTemplateParamsDb.class, mappedBy = "activity", cascade = ALL)
+  @MapKey(name = "name")
+  protected Map<String, ActivityTemplateParamsDb> templateParamsDb = new MapMaker().makeMap();
+
+  /**
+   * The transient store for templateParamers loaded by the postLoad hook and
+   * persisted by the prePersist hook.
+   */
+  @Transient
+  protected Map<String, String> templateParams;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "title", length = 255)
+  protected String title;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "title_id", length = 255)
+  protected String titleId;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "url", length = 255)
+  protected String url;
+
+  /**
+   * model field.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity
+   */
+  @Basic
+  @Column(name = "user_id", length = 255)
+  protected String userId;
+
+  public ActivityDb() {
+  }
+
+  public ActivityDb(String id, String userId) {
+    this.id = id;
+    this.userId = userId;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getAppId()
+   */
+  public String getAppId() {
+    return appId;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setAppId(java.lang.String)
+   */
+  public void setAppId(String appId) {
+    this.appId = appId;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getBody()
+   */
+  public String getBody() {
+    return body;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setBody(java.lang.String)
+   */
+  public void setBody(String body) {
+    this.body = body;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getBodyId()
+   */
+  public String getBodyId() {
+    return bodyId;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setBodyId(java.lang.String)
+   */
+  public void setBodyId(String bodyId) {
+    this.bodyId = bodyId;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getExternalId()
+   */
+  public String getExternalId() {
+    return externalId;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setExternalId(java.lang.String)
+   */
+  public void setExternalId(String externalId) {
+    this.externalId = externalId;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getId()
+   */
+  public String getId() {
+    return id;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setId(java.lang.String)
+   */
+  public void setId(String id) {
+    this.id = id;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getUpdated()
+   */
+  public Date getUpdated() {
+    if (updated == null) {
+      return null;
+    }
+    return new Date(updated.getTime());
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setUpdated(java.util.Date)
+   */
+  public void setUpdated(Date updated) {
+    if (updated == null) {
+      this.updated = null;
+    } else {
+      this.updated = new Date(updated.getTime());
+    }
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getMediaItems()
+   */
+  public List<MediaItem> getMediaItems() {
+    return mediaItems;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setMediaItems(java.util.List)
+   */
+  public void setMediaItems(List<MediaItem> mediaItems) {
+    this.mediaItems = mediaItems;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getPostedTime()
+   */
+  public Long getPostedTime() {
+    return postedTime;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setPostedTime(java.lang.Long)
+   */
+  public void setPostedTime(Long postedTime) {
+    this.postedTime = postedTime;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getPriority()
+   */
+  public Float getPriority() {
+    return priority;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setPriority(java.lang.Float)
+   */
+  public void setPriority(Float priority) {
+    this.priority = priority;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getStreamFaviconUrl()
+   */
+  public String getStreamFaviconUrl() {
+    return streamFaviconUrl;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setStreamFaviconUrl(java.lang.String)
+   */
+  public void setStreamFaviconUrl(String streamFaviconUrl) {
+    this.streamFaviconUrl = streamFaviconUrl;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getStreamSourceUrl()
+   */
+  public String getStreamSourceUrl() {
+    return streamSourceUrl;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setStreamSourceUrl(java.lang.String)
+   */
+  public void setStreamSourceUrl(String streamSourceUrl) {
+    this.streamSourceUrl = streamSourceUrl;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getStreamTitle()
+   */
+  public String getStreamTitle() {
+    return streamTitle;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setStreamTitle(java.lang.String)
+   */
+  public void setStreamTitle(String streamTitle) {
+    this.streamTitle = streamTitle;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getStreamUrl()
+   */
+  public String getStreamUrl() {
+    return streamUrl;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setStreamUrl(java.lang.String)
+   */
+  public void setStreamUrl(String streamUrl) {
+    this.streamUrl = streamUrl;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getTemplateParams()
+   */
+  public Map<String, String> getTemplateParams() {
+    return templateParams;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setTemplateParams(java.util.Map)
+   */
+  public void setTemplateParams(Map<String, String> templateParams) {
+    this.templateParams = templateParams;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getTitle()
+   */
+  public String getTitle() {
+    return title;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setTitle(java.lang.String)
+   */
+  public void setTitle(String title) {
+    this.title = title;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getTitleId()
+   */
+  public String getTitleId() {
+    return titleId;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setTitleId(java.lang.String)
+   */
+  public void setTitleId(String titleId) {
+    this.titleId = titleId;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getUrl()
+   */
+  public String getUrl() {
+    return url;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setUrl(java.lang.String)
+   */
+  public void setUrl(String url) {
+    this.url = url;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#getUserId()
+   */
+  public String getUserId() {
+    return userId;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.opensocial.model.Activity#setUserId(java.lang.String)
+   */
+  public void setUserId(String userId) {
+    this.userId = userId;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.core.model.DbObject#getObjectId()
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+  /**
+   * Hook into the pre persist JPA event to take the transient fields and
+   * populate the DB fields prior to persisting the data.
+   */
+  @PrePersist
+  public void populateDbFields() {
+    if (templateParams != null) {
+      // add new entries
+      for (Entry<String, String> e : templateParams.entrySet()) {
+        ActivityTemplateParamsDb a = templateParamsDb.get(e.getKey());
+        if (a == null) {
+          a = new ActivityTemplateParamsDb();
+          a.name = e.getKey();
+          a.value = e.getValue();
+          a.activity = this;
+          // a.activities = Lists.newArrayList();
+          // a.activities.add(this);
+          templateParamsDb.put(e.getKey(), a);
+        } else {
+          a.value = e.getValue();
+        }
+      }
+      // remove old entries
+      List<String> toRemove = Lists.newArrayList();
+      for (Entry<String, ActivityTemplateParamsDb> e : templateParamsDb
+          .entrySet()) {
+        if (!templateParams.containsKey(e.getKey())) {
+          toRemove.add(e.getKey());
+        }
+      }
+      for (String r : toRemove) {
+        templateParamsDb.remove(r);
+      }
+    }
+  }
+
+  /**
+   * Hook into the post load event in JPA to take the database fields and load
+   * the transient fields prior to making the object available to java.
+   */
+  @PostLoad
+  public void loadTransientFields() {
+    templateParams = new MapMaker().makeMap();
+    for (Entry<String, ActivityTemplateParamsDb> e : templateParamsDb
+        .entrySet()) {
+      templateParams.put(e.getKey(), e.getValue().value);
+    }
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/ActivityTemplateParamsDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ActivityTemplateParamsDb.java
new file mode 100644
index 0000000..6205dc7
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ActivityTemplateParamsDb.java
@@ -0,0 +1,96 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.CascadeType.ALL;
+import static javax.persistence.GenerationType.IDENTITY;
+
+import org.apache.shindig.social.core.model.ActivityDb;
+import org.apache.shindig.social.opensocial.model.Activity;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.Table;
+import javax.persistence.Version;
+
+/**
+ *
+ */
+@Entity
+@Table(name = "template_params")
+public class ActivityTemplateParamsDb implements DbObject {
+  /**
+   * The internal object ID used for references to this object. Should be
+   * generated by the underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "oid")
+  protected long objectId;
+
+  /**
+   * An optimistic locking field.
+   */
+  @Version
+  @Column(name = "version")
+  protected long version;
+
+  /**
+   * Create a link to the activities joining activity_id here to oid in
+   * activities.
+   */
+
+  @ManyToOne(targetEntity = ActivityDb.class, cascade = ALL)
+  @JoinColumn(name = "activity_id", referencedColumnName = "oid")
+  protected Activity activity;
+  // TODO: <openjpa-1.2.0-r422266:683325 fatal user error>
+  // org.apache.openjpa.persistence.ArgumentException: The type of field
+  // "org.apache.shindig.graaasp.jpa.ActivityTemplateParamsDb.activities"
+  // isn't supported
+  // by declared persistence strategy "ManyToOne". Please choose a different
+  // strategy.
+
+  /**
+   * The name of the value in the template parameters.
+   */
+  @Basic
+  @Column(name = "template_name")
+  protected String name;
+
+  /**
+   * The value of the parameter.
+   */
+  @Basic
+  @Column(name = "template_value")
+  protected String value;
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.core.model.DbObject#getObjectId()
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/AddressDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AddressDb.java
new file mode 100644
index 0000000..59c9930
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AddressDb.java
@@ -0,0 +1,381 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Address;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.DiscriminatorColumn;
+import javax.persistence.DiscriminatorValue;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.Inheritance;
+import javax.persistence.InheritanceType;
+import javax.persistence.NamedQuery;
+import javax.persistence.OneToMany;
+import javax.persistence.Table;
+import javax.persistence.Version;
+import javax.persistence.Transient;
+
+import java.util.List;
+
+/**
+ * Address storage, stored in "address", may be joined with other subclasses and if so
+ * "address_usage" will contain the subclass discriminatory value. 
+ * This might also be "sharedaddress" if this address is shared.
+ */
+@Entity
+@Table(name = "addresses")
+@Inheritance(strategy = InheritanceType.JOINED)
+@DiscriminatorColumn(name = "address_usage")
+@DiscriminatorValue(value = "sharedaddress")
+@NamedQuery(name = AddressDb.FINDBY_POSTCODE, 
+    query = "select a from AddressDb a where a.postalCode = :postalcode ")
+public class AddressDb implements Address, DbObject {
+  /**
+   * Name of the JPA query to find addresses by postcode
+   */
+  public static final String FINDBY_POSTCODE = "q.address.findbypostcode";
+
+  /**
+   * name of the postcode parameter used in named queries (JPA)
+   */
+  public static final String PARAM_POSTCODE = "postalcode";
+
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "id")
+  private long objectId;
+
+  /**
+   * An optimistic locking field
+   */
+  // @Version
+  // @Column(name = "version")
+  @Transient
+  protected long version;
+
+  /**
+   * People may be at this address, this is a list of people who are currently at this address.
+   */
+  // @OneToMany(targetEntity = UserDb.class, mappedBy = "currentLocation")
+  @Transient
+  private List<Person> atLocation;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Address
+   */
+  @Basic
+  @Column(name = "country", length = 255)
+  private String country;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Address
+   */
+  @Basic
+  @Column(name = "latitude")
+  private Float latitude;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Address
+   */
+  @Basic
+  @Column(name = "longitude")
+  private Float longitude;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Address
+   */
+  @Basic
+  @Column(name = "locality", length = 255)
+  private String locality;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Address
+   */
+  @Basic
+  @Column(name = "postal_code", length = 255)
+  private String postalCode;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Address
+   */
+  // @Basic
+  // @Column(name = "region", length = 255)
+  @Transient
+  private String region;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Address
+   */
+  @Basic
+  @Column(name = "street_address", length = 255)
+  private String streetAddress;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Address
+   */
+  @Basic
+  @Column(name = "type", length = 255)
+  private String type;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Address
+   */
+  // @Basic
+  // @Column(name = "formatted", length = 255)
+  @Transient
+  private String formatted;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Address
+   */
+  // @Basic
+  // @Column(name = "primary_address")
+  @Transient
+  private Boolean primary;
+
+  /**
+   *  default constructor
+   */
+  public AddressDb() {
+  }
+
+  /**
+   * Create an address from the formatted address, no parsing of the address will be performed.
+   * @param formatted the formatted address.
+   */
+  public AddressDb(String formatted) {
+    this.formatted = formatted;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#getCountry()
+   */
+  public String getCountry() {
+    return country;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#setCountry(java.lang.String)
+   */
+  public void setCountry(String country) {
+    this.country = country;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#getLatitude()
+   */
+  public Float getLatitude() {
+    return latitude;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#setLatitude(java.lang.Float)
+   */
+  public void setLatitude(Float latitude) {
+    this.latitude = latitude;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#getLocality()
+   */
+  public String getLocality() {
+    return locality;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#setLocality(java.lang.String)
+   */
+  public void setLocality(String locality) {
+    this.locality = locality;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#getLongitude()
+   */
+  public Float getLongitude() {
+    return longitude;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#setLongitude(java.lang.Float)
+   */
+  public void setLongitude(Float longitude) {
+    this.longitude = longitude;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#getPostalCode()
+   */
+  public String getPostalCode() {
+    return postalCode;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#setPostalCode(java.lang.String)
+   */
+  public void setPostalCode(String postalCode) {
+    this.postalCode = postalCode;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#getRegion()
+   */
+  public String getRegion() {
+    return region;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#setRegion(java.lang.String)
+   */
+  public void setRegion(String region) {
+    this.region = region;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#getStreetAddress()
+   */
+  public String getStreetAddress() {
+    return streetAddress;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#setStreetAddress(java.lang.String)
+   */
+  public void setStreetAddress(String streetAddress) {
+    this.streetAddress = streetAddress;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#getType()
+   */
+  public String getType() {
+    return type;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#setType(java.lang.String)
+   */
+  public void setType(String type) {
+    this.type = type;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#getFormatted()
+   */
+  public String getFormatted() {
+    return formatted;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#setFormatted(java.lang.String)
+   */
+  public void setFormatted(String formatted) {
+    this.formatted = formatted;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#getPrimary()
+   */
+  public Boolean getPrimary() {
+    return primary;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Address#setPrimary(java.lang.Boolean)
+   */
+  public void setPrimary(Boolean primary) {
+    this.primary = primary;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+  /**
+   * @return the atLocation
+   */
+  public List<Person> getAtLocation() {
+    return atLocation;
+  }
+
+  /**
+   * @param atLocation the atLocation to set
+   */
+  public void setAtLocation(List<Person> atLocation) {
+    this.atLocation = atLocation;
+  }
+  
+  /**
+   * @return the objectId
+   */
+  public Person getPerson() {
+    return null;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public void setPerson(Person person) {
+    // this.person = person;
+  }
+}

diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/AppDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AppDb.java
new file mode 100644
index 0000000..b7317d1
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AppDb.java
@@ -0,0 +1,124 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+import org.apache.shindig.social.core.model.ApplicationPropertyDb;
+import org.apache.shindig.social.opensocial.model.ListField;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.MapKey;
+import javax.persistence.OneToMany;
+import javax.persistence.Table;
+import javax.persistence.Version;
+
+import java.util.Map;
+
+/**
+ * Stores information about apps
+ */
+@Entity
+@Table(name = "app")
+public class AppDb implements DbObject {
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "oid")
+  protected long objectId;
+
+  /**
+   * An optimistic locking field.
+   */
+  @Version
+  @Column(name = "version")
+  protected long version;
+
+
+  /**
+   * The app has properties.
+   */
+  @OneToMany(targetEntity = ApplicationPropertyDb.class, mappedBy = "application")
+  @MapKey(name = "type")
+  protected Map<String, ListField> properties;
+
+
+  /**
+   * Each Application has an Id
+   */
+  @Basic
+  @Column(name = "id", length = 255)
+  protected String id;
+
+
+  /**
+   * @return the properties
+   */
+  public Map<String, ListField> getProperties() {
+    return properties;
+  }
+
+
+  /**
+   * @param properties the properties to set
+   */
+  public void setProperties(Map<String, ListField> properties) {
+    this.properties = properties;
+  }
+
+
+  /**
+   * @return the id
+   */
+  public String getId() {
+    return id;
+  }
+
+
+  /**
+   * @param id the id to set
+   */
+  public void setId(String id) {
+    this.id = id;
+  }
+
+
+  /**
+   * @return the version
+   */
+  public long getVersion() {
+    return version;
+  }
+
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/AppdataDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AppdataDb.java
new file mode 100644
index 0000000..bbd75f2
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AppdataDb.java
@@ -0,0 +1,191 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.CascadeType.ALL;
+import static javax.persistence.GenerationType.IDENTITY;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.MapMaker;
+
+
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.MapKey;
+import javax.persistence.OneToMany;
+import javax.persistence.PostLoad;
+import javax.persistence.PrePersist;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+
+
+/**
+ * An app data map is the map of data for a single key within an app.
+ */
+@Entity
+@Table(name="appdatas")
+public class AppdataDb implements DbObject {
+  /**
+   * The object needs to be seializable (map).
+   */
+  private static final long serialVersionUID = 8017568825925047318L;
+
+  public static final String FINDBY_ALL_GROUP = null;
+
+  public static final String FINDBY_FRIENDS_GROUP = "select ad from AppdataDb ad where ad.personId in (select f.friend.id from PersonDb p, FriendDb f where p.objectId = f.person.objectId and ";
+
+  public static final String FINDBY_GROUP_GROUP = null;
+
+  public static final String FINDBY_SELF_GROUP = "select ad from AppdataDb ad where ";
+
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "id")
+  protected long id;
+
+  @Basic
+  @Column(name = "app_id")
+  protected long AppId;
+
+  /**
+   * A Application Data Map belongs to a set of maps associated with an app.
+   * The link from Application to DataMap is not navigable since it may contain 1000's of entries.
+   */
+  // @ManyToOne(targetEntity=AppDb.class)
+  // @JoinColumn(name="app_id", referencedColumnName="oid")
+  @Transient
+  protected AppDb app;
+
+  @Basic
+  @Column(name="context_id")
+  protected long contextId;
+
+  @Basic
+  @Column(name="context_type", length=255)
+  protected String contextType;
+  
+  @Basic
+  @Column(name="name", length=255)
+  protected String name;
+  
+  
+  @Basic
+  @Column(name="value", length=4096)
+  protected String value;
+  
+
+  /**
+   * @return the id
+   */
+  public long getId() {
+    return id;
+  }
+  
+  /**
+   * @return the id
+   */
+  public long getObjectId() {
+    return id;
+  }
+  
+  /**
+   * @return the AppId
+   */
+  public long getAppId() {
+    return AppId;
+  }
+
+  /**
+   * @param AppId to set
+   */
+  public void setAppId(long AppId) {
+    this.AppId = AppId;
+  }
+
+  /**
+   * @return the contextId
+   */
+  public long getContextId() {
+    return contextId;
+  }
+
+  /**
+   * @param contextId the contextId to set
+   */
+  public void setContextId(long contextId) {
+    this.contextId = contextId;
+  }
+  
+  /**
+   * @return the contextType
+   */
+  public String getContextType() {
+    return contextType;
+  }
+
+  /**
+   * @param contextType the contextType to set
+   */
+  public void setContextType(String contextType) {
+    this.contextType = contextType;
+  }
+  
+  /**
+   * @return the name
+   */
+  public String getName() {
+    return name;
+  }
+
+  /**
+   * @param name the name to set
+   */
+  public void setName(String name) {
+    this.name = name;
+  }
+  
+  /**
+   * @return the value
+   */
+  public String getValue() {
+    return value;
+  }
+
+  /**
+   * @param value the value to set
+   */
+  public void setValue(String value) {
+    this.value = value;
+  }
+  
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/ApplicationDataMapDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ApplicationDataMapDb.java
new file mode 100644
index 0000000..fe79c37
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ApplicationDataMapDb.java
@@ -0,0 +1,239 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.CascadeType.ALL;
+import static javax.persistence.GenerationType.IDENTITY;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.MapMaker;
+
+import org.apache.shindig.social.core.model.ApplicationDataMapValueDb;
+import org.apache.shindig.social.core.model.WidgetDb;
+
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.MapKey;
+import javax.persistence.OneToMany;
+import javax.persistence.PostLoad;
+import javax.persistence.PrePersist;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+
+
+/**
+ * An application data map is the map of data for a single key within an application.
+ */
+@Entity
+@Table(name="application_datamaps")
+public class ApplicationDataMapDb implements DbObject {
+  /**
+   * The object needs to be seializable (map).
+   */
+  private static final long serialVersionUID = 8017568825925047318L;
+
+  public static final String FINDBY_ALL_GROUP = null;
+
+  public static final String FINDBY_FRIENDS_GROUP = "select am from ApplicationDataMapDb am where am.contextType = 'User' and am.contextId in (select f.friend.id from PersonDb p, FriendDb f where p.objectId = f.person.objectId and ";
+
+  public static final String FINDBY_GROUP_GROUP = null;
+
+  public static final String FINDBY_SELF_GROUP = "select am from ApplicationDataMapDb am where ";
+
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "id")
+  protected long objectId;
+
+  /**
+   * A Application Data Map belongs to a set of maps associated with an application.
+   * The link from Application to DataMap is not navigable since it may contain 1000's of entries.
+   */
+  // @ManyToOne(targetEntity=WidgetDb.class)
+  // @JoinColumn(name="application_id", referencedColumnName="id")
+  // protected WidgetDb application;
+  @Basic
+  @Column(name="application_id")
+  protected long applicationId;
+
+  /**
+   * Create map using ApplicationDataMapValueDb such that ApplicationDataMapDb are joined on oid ->
+   * application_datamap_id and then the name value becomes the key, and the value becomes the value
+   * unfortunately JPA wont do Map<String,String> so this is handled in the prePersist and postLoad
+   * hook.
+   */
+  @OneToMany(targetEntity=ApplicationDataMapValueDb.class, mappedBy="applicationDataMap", cascade = ALL)
+  @MapKey(name="name")
+  protected Map<String, ApplicationDataMapValueDb> valuesDb = new MapMaker().makeMap();
+
+  /**
+   * The transient store for values loaded by the postLoad hook and persisted by the
+   * prePersist hook.
+   */
+  @Transient
+  protected Map<String, String> values;
+
+  @Basic
+  @Column(name="context_id", length=255)
+  protected long contextId;
+
+  @Basic
+  @Column(name="context_type", length=255)
+  protected String contextType;
+
+  /**
+   * persist the state of object before sending to the db.
+   */
+  @PrePersist
+  public void prePersist() {
+    if (values == null) {
+      return;
+    }
+    // add new entries
+    for (Entry<String, String> e : values.entrySet()) {
+      ApplicationDataMapValueDb a = valuesDb.get(e.getKey());
+      if (a == null) {
+        a = new ApplicationDataMapValueDb();
+        a.name = e.getKey();
+        a.value = e.getValue();
+        a.applicationDataMap = this;
+        valuesDb.put(e.getKey(), a);
+      } else {
+        a.value = e.getValue();
+      }
+    }
+    // remove old entries
+    List<String> toRemove = Lists.newArrayList();
+    for (Entry<String, ApplicationDataMapValueDb> e : valuesDb.entrySet()) {
+      if (!values.containsKey(e.getKey())) {
+        toRemove.add(e.getKey());
+      }
+    }
+    for (String r : toRemove) {
+      valuesDb.remove(r);
+    }
+  }
+
+  /**
+   * set the state of the object after load
+   */
+  @PostLoad
+  public void postLoad() {
+    values = new MapMaker().makeMap();
+    for (Entry<String, ApplicationDataMapValueDb> e : valuesDb.entrySet()) {
+      values.put(e.getKey(), e.getValue().value);
+    }
+  }
+
+  // /**
+  //  * @return the application
+  //  */
+  // public WidgetDb getApplication() {
+  //   return application;
+  // }
+  // 
+  // /**
+  //  * @param applicationData the applicationData to set
+  //  */
+  // public void setApplication(WidgetDb application) {
+  //   this.application = application;
+  // }
+
+  /**
+   * @return the values
+   */
+  public Map<String, String> getValues() {
+    return values;
+  }
+
+  /**
+   * @param values the values to set
+   */
+  public void setValues(Map<String, String> values) {
+    if (values == null) {
+      this.values = new MapMaker().makeMap();
+    } else {
+      this.values = values;
+    }
+  }
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+  /**
+   * @return the contextId
+   */
+  public long getContextId() {
+    return contextId;
+  }
+
+  /**
+   * @param contextId the contextId to set
+   */
+  public void setContextId(long contextId) {
+    this.contextId = contextId;
+  }
+
+  /**
+   * @return the contextType
+   */
+  public String getContextType() {
+    return contextType;
+  }
+
+  /**
+   * @param contextType the contextType to set
+   */
+  public void setContextType(String contextType) {
+    this.contextType = contextType;
+  }
+  
+  /**
+   * @return the applicationId
+   */
+  public long getApplicationId() {
+    return applicationId;
+  }
+
+  /**
+   * @param applicationId the applicationId to set
+   */
+  public void setApplicationId(long applicationId) {
+    this.applicationId = applicationId;
+  }
+  
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/ApplicationDataMapValueDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ApplicationDataMapValueDb.java
new file mode 100644
index 0000000..1d5fd06
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ApplicationDataMapValueDb.java
@@ -0,0 +1,118 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+import org.apache.shindig.social.core.model.ApplicationDataMapDb;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.Table;
+import javax.persistence.Version;
+
+/**
+ * The final storage of data in the application datamap. Values are limited here to 4K in size.
+ */
+@Entity
+@Table(name="application_datavalues")
+public class ApplicationDataMapValueDb implements DbObject {
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "id")
+  protected long objectId;
+
+  /**
+   * Each entry is associated with an application Data Map
+   */
+  @ManyToOne(targetEntity=ApplicationDataMapDb.class)
+  @JoinColumn(name="application_datamap_id", referencedColumnName="id")
+  protected ApplicationDataMapDb applicationDataMap;
+  
+  /**
+   * Each entry has a name
+   */
+  @Basic
+  @Column(name="name", length=255)
+  protected String name;
+  
+  /**
+   * Each entry has a value (4K limit to size)
+   */
+  @Basic
+  @Column(name="value", length=4094)
+  protected String value;
+
+  /**
+   * @return the applicationDataMap
+   */
+  public ApplicationDataMapDb getApplicationDataMap() {
+    return applicationDataMap;
+  }
+
+  /**
+   * @param applicationDataMap the applicationDataMap to set
+   */
+  public void setApplicationDataMap(ApplicationDataMapDb applicationDataMap) {
+    this.applicationDataMap = applicationDataMap;
+  }
+
+  /**
+   * @return the name
+   */
+  public String getName() {
+    return name;
+  }
+
+  /**
+   * @param name the name to set
+   */
+  public void setName(String name) {
+    this.name = name;
+  }
+
+  /**
+   * @return the value
+   */
+  public String getValue() {
+    return value;
+  }
+
+  /**
+   * @param value the value to set
+   */
+  public void setValue(String value) {
+    this.value = value;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/ApplicationPropertyDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ApplicationPropertyDb.java
new file mode 100644
index 0000000..bb2442b
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ApplicationPropertyDb.java
@@ -0,0 +1,59 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.PrimaryKeyJoinColumn;
+import javax.persistence.Table;
+
+import org.apache.shindig.social.core.model.AppDb;
+import org.apache.shindig.social.core.model.ListFieldDb;
+
+/**
+ * This is a property of an application, extending the listfield type, and using the type property
+ * to perform the mapping. Main storage is in the listfield table, but application property stores
+ * the details of the properties of the application.
+ */
+@Entity
+@Table(name = "application_property")
+@PrimaryKeyJoinColumn(name = "oid")
+public class ApplicationPropertyDb extends ListFieldDb {
+  /**
+   * The application  relationship connected with this property.
+   */
+  @ManyToOne(targetEntity = AppDb.class)
+  @JoinColumn(name = "application_id", referencedColumnName = "oid")
+  protected AppDb application;
+
+  /**
+   * @return the application
+   */
+  public AppDb getApplication() {
+    return application;
+  }
+
+  /**
+   * @param application the application to set
+   */
+  public void setApplication(AppDb application) {
+    this.application = application;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/AssetDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AssetDb.java
new file mode 100644
index 0000000..d24cef4
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AssetDb.java
@@ -0,0 +1,519 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.CascadeType.ALL;
+import static javax.persistence.CascadeType.MERGE;
+import static javax.persistence.CascadeType.PERSIST;
+import static javax.persistence.CascadeType.REFRESH;
+import static javax.persistence.GenerationType.IDENTITY;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
+import org.apache.shindig.protocol.model.Enum;
+import org.apache.shindig.protocol.model.FilterOperation;
+import org.apache.shindig.social.opensocial.model.Account;
+import org.apache.shindig.social.opensocial.model.Address;
+import org.apache.shindig.social.opensocial.model.BodyType;
+import org.apache.shindig.social.opensocial.model.Drinker;
+import org.apache.shindig.social.opensocial.model.ListField;
+import org.apache.shindig.social.opensocial.model.LookingFor;
+import org.apache.shindig.social.opensocial.model.Name;
+import org.apache.shindig.social.opensocial.model.NetworkPresence;
+import org.apache.shindig.social.opensocial.model.Organization;
+import org.apache.shindig.social.opensocial.model.Person;
+import org.apache.shindig.social.opensocial.model.Document;
+import org.apache.shindig.social.opensocial.model.Smoker;
+import org.apache.shindig.social.opensocial.model.Url;
+import org.apache.shindig.social.opensocial.model.Attachment;
+import org.apache.shindig.social.core.model.AttachmentDb;
+
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.JoinTable;
+import javax.persistence.ManyToMany;
+import javax.persistence.ManyToOne;
+import javax.persistence.NamedQueries;
+import javax.persistence.NamedQuery;
+import javax.persistence.OneToMany;
+import javax.persistence.OneToOne;
+import javax.persistence.PostLoad;
+import javax.persistence.PrePersist;
+import javax.persistence.Table;
+import javax.persistence.Temporal;
+import javax.persistence.TemporalType;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+
+import com.google.inject.name.Named;
+import com.google.inject.Inject;
+
+/**
+ * Default Implementation of the Person object in the org.apache.shindig.graaasp.jpa.
+ */
+@Entity
+@Table(name = "assets")
+@NamedQueries(value = {
+    @NamedQuery(name = AssetDb.FINDBY_DOCUMENTID,
+        query = "select a from AssetDb a where a.id = :id "),
+    @NamedQuery(name = AssetDb.FINDBY_LIKE_DOCUMENTID,
+        query = "select a from AssetDb a where a.id like :id") })
+public class AssetDb implements Document, DbObject {
+
+  public static final String GRAASP_URL = System.getProperty("shindig.container_url");
+
+  public static final String FINDBY_DOCUMENTID = "q.asset.findbyassetid";
+
+  public static final String PARAM_DOCUMENTID = "id";
+
+  public static final String FINDBY_LIKE_DOCUMENTID = "q.asset.findbylikeassetid";
+
+  private static final String INTERESTS_PROPERTY = "interest";
+
+  private static final Map<String, FilterSpecification> FILTER_COLUMNS =
+    new HashMap<String, FilterSpecification>();
+
+  private static final FilterOperation[] ALL_FILTEROPTIONS = new FilterOperation[] {
+      FilterOperation.equals, FilterOperation.contains, FilterOperation.present,
+      FilterOperation.startsWith };
+  private static final FilterOperation[] NUMERIC_FILTEROPTIONS = new FilterOperation[] {
+      FilterOperation.equals, FilterOperation.present };
+  @SuppressWarnings("unused")
+  private static final FilterOperation[] EQUALS_FILTEROPTIONS =
+    new FilterOperation[] { FilterOperation.equals };
+
+  static {
+    FILTER_COLUMNS.put("displayName", new FilterSpecification("displayName", ALL_FILTEROPTIONS));
+
+    // the following are special operations which are accepted, but work differently
+    FILTER_COLUMNS.put("topFriends", new FilterSpecification());
+    FILTER_COLUMNS.put("hasApp", new FilterSpecification());
+  }
+
+  private static final FilterCapability FILTER_CAPABILITY = new FilterCapability() {
+    /**
+     * {@inheritDoc}
+     */
+    public String findFilterableProperty(String fieldName, FilterOperation filterOperation) {
+      FilterSpecification spec = FILTER_COLUMNS.get(fieldName);
+      if (spec != null) {
+        return spec.translateProperty(filterOperation);
+      }
+      return null;
+    }
+
+  };
+
+  public static final String JPQL_FINDALLPERSON = null;
+
+  // TODO The commented out query supports sorting by friend.score but needs a join with FriendDb which returns duplicates.
+  // Using 'group by' to avoid duplicates doesn't work in HSQLDB or Derby - causes a "Not in aggregate function or group by clause" jdbc exception.
+  // public static final String JPQL_FINDPERSON_BY_FRIENDS = "select p from PersonDb p join FriendDb f on p.objectId = f.friend.objectId where p.objectId in (select f.friend.objectId from PersonDb p, FriendDb f where p.objectId = f.person.objectId and ";
+  public static final String JPQL_FINDPERSON_BY_FRIENDS = "select p from PersonDb p where p.objectId in (select f.friend.objectId from PersonDb p, FriendDb f where p.objectId = f.person.objectId and ";
+
+  public static final Object JPQL_FINDPERSON_BY_GROUP = null;
+
+  public static final Object JPQL_FINDDOCUMENT = "select a from AssetDb a where ";
+  public static final Object JPQL_FINDDOCUMENTS = "select a from AssetDb a where ";
+
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "id")
+  private long objectId;
+  
+  /**
+   * The internal parentId and parentType used for references to the parent of a asset.
+   */
+  @Basic
+  @Column(name = "parent_id", length = 255)
+  private String parentId;
+  
+  @Basic
+  @Column(name = "parent_type", length = 255)
+  protected String parentType;
+
+  @OneToOne(targetEntity = AttachmentDb.class, mappedBy = "document", cascade = ALL)
+  protected Attachment attachment;
+
+  /**
+   * An optimistic locking field.
+   */
+
+  @Basic
+  @Column(name = "entity", length = 255)
+  protected String documentEntity;
+  
+  @Basic
+  @Column(name = "format_settings_type", length = 255)
+  protected String documentType;
+
+  @Transient
+  protected String author;
+  
+  @Transient
+  protected String authorEmail;
+
+  @Basic
+  @Column(name = "name", length = 255)
+  private String displayName;
+
+  @Basic
+  @Column(name = "name", length = 255, insertable = false, updatable = false)
+  private String name;
+  
+  @Basic
+  @Column(name = "picture")
+  protected String picture;
+  
+  
+  /**
+   *
+   */
+  @Transient
+  protected Integer height;
+
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "description", length = 255)
+  protected String description;
+
+
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "id", length = 255, insertable = false, updatable = false)
+  protected String id;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<ListField> ims;
+
+
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "updated_at")
+  @Temporal(TemporalType.TIMESTAMP)
+  protected Date updated;
+
+  /**
+   *
+   */
+  @Transient
+  protected String screenshotUrl;
+  
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "external_thumbnail", length = 255)
+  protected String thumbnailUrl;
+
+
+  /**
+   *
+   */
+  @Transient
+  protected Long utcOffset;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> tags;
+
+  // Note: Not in the opensocial js person object directly
+  @Transient
+  private boolean isOwner = false;
+
+  public AssetDb() {
+  }
+
+  public AssetDb(String id, String displayName) {
+    this.id = id;
+    this.displayName = displayName;
+  }
+
+  public Attachment getAttachment() {
+    return attachment;
+  }
+
+  public void setAttachment(Attachment attachment) {
+    this.attachment = attachment;
+  }
+
+  public String getDocumentType() {
+	  return documentType;
+  }
+
+  public void setDocumentType(String documentType) {
+	  this.documentType = documentType;
+  }
+	  
+  public String getDocumentEntity() {
+    return documentEntity;
+  }
+
+  public void setDocumentEntity(String documentEntity) {
+    this.documentEntity = documentEntity;
+  }
+
+  public String getAuthor() {
+    return author;
+  }
+
+  public void setAuthor(String author) {
+    this.author = author;
+  }
+
+  public Integer getHeight() {
+    return height;
+  }
+
+  public void setHeight(Integer height) {
+    this.height = height;
+  }
+
+  public String getScreenshotUrl() {
+    return screenshotUrl;
+  }
+
+  public void setScreenshotUrl(String screenshotUrl) {
+    this.screenshotUrl = screenshotUrl;
+  }
+  
+  public String getProfileUrl() {
+    return GRAASP_URL+"/#item=asset_"+String.valueOf(objectId);     
+  }
+
+  public void setProfileUrl(String profileUrl) {
+    
+  }
+  
+  public String getThumbnailUrl() {
+    String pic = picture;
+    if (pic == null || pic.equals("")) {
+      return GRAASP_URL+"/images/pics/asset_thumb.png";
+    }
+    
+    return GRAASP_URL+"/asset/picture/"+String.valueOf(objectId)+"/thumb/"+pic;        
+  }
+
+  public void setThumbnailUrl(String thumbnailUrl) {
+    this.thumbnailUrl = thumbnailUrl;
+  }
+
+  public String getAuthorEmail() {
+    return authorEmail;
+  }
+
+  public void setAuthorEmail(String authorEmail) {
+    this.authorEmail = authorEmail;
+  }                               
+
+  public List<String> getTags() {
+    return tags;
+  }
+
+  public void setTags(List<String> tags) {
+    this.tags = tags;
+  }
+
+  public String getParentId() {
+    return this.parentId;
+  }
+
+  public void setParentId(String parentId) {
+    this.parentId = parentId;
+  }
+  
+  public String getParentType() {
+	  if(this.parentType.equals("User")){
+		  return "@person";
+	  }else{
+		  return "@space";
+	  }
+  }
+
+  public void setParentType(String parentType) {
+    this.parentType = parentType;
+  }
+  
+  public String getName() {
+    return this.name;
+  }
+
+  public void setName(String name) {
+    this.name = name;
+  }
+
+  
+  public String getId() {
+    return id;
+  }
+
+  public void setId(String id) {
+    this.id = id;
+  }
+
+  public List<ListField> getIms() {
+    return ims;
+  }
+
+  public void setIms(List<ListField> ims) {
+    this.ims = ims;
+  }
+
+  public Date getUpdated() {
+    if (updated == null) {
+      return null;
+    }
+    return new Date(updated.getTime());
+  }
+
+  public void setUpdated(Date updated) {
+    if (updated == null) {
+      this.updated = null;
+    } else {
+      this.updated = new Date(updated.getTime());
+    }
+  }
+
+
+  public String getDescription() {
+    return description;
+  }
+
+  public void setDescription(String description) {
+    this.description = description;
+  }
+  
+  public Long getUtcOffset() {
+    return utcOffset;
+  }
+
+  public void setUtcOffset(Long utcOffset) {
+    this.utcOffset = utcOffset;
+  }
+
+  public boolean getIsOwner() {
+    return isOwner;
+  }
+
+  public void setIsOwner(boolean isOwner) {
+    this.isOwner = isOwner;
+  }
+
+  // Proxied fields
+
+
+
+  private <T extends ListField> T getListFieldWithType(String type, List<T> list) {
+    if (list != null) {
+      for (T url : list) {
+        if (type.equalsIgnoreCase(url.getType())) {
+          return url;
+        }
+      }
+    }
+
+    return null;
+  }
+
+  private <T extends ListField> List<T> addListField(T field, List<T> list) {
+    if (list == null) {
+      list = Lists.newArrayList();
+    }
+    list.add(field);
+    return list;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return Long.parseLong(id);
+  }
+
+  @PrePersist
+  public void populateDbFields() {
+
+
+  }
+
+  @PostLoad
+  public void loadTransientFields() {
+
+
+  }
+
+  /*
+   * (non-Javadoc)
+   *
+   * @see org.apache.shindig.social.opensocial.model.Person#getDisplayName()
+   */
+  public String getDisplayName() {
+    return displayName;
+  }
+
+  /*
+   * (non-Javadoc)
+   *
+   * @see org.apache.shindig.social.opensocial.model.Person#setDisplayName(java.lang.String)
+   */
+  public void setDisplayName(String displayName) {
+    this.displayName = displayName;
+  }
+
+  public static FilterCapability getFilterCapability() {
+    return FILTER_CAPABILITY;
+
+  }
+
+  /** {@inheritDoc} */
+  public Map<String, ? extends Object> getAppData()
+  {
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public void setAppData( Map<String, ? extends Object> appData )
+  {
+  }
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/AttachmentDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AttachmentDb.java
new file mode 100644
index 0000000..90a0ece
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AttachmentDb.java
@@ -0,0 +1,131 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Attachment;
+import org.apache.shindig.social.opensocial.model.Document;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.DiscriminatorColumn;
+import javax.persistence.DiscriminatorValue;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.Inheritance;
+import javax.persistence.InheritanceType;
+import javax.persistence.NamedQuery;
+import javax.persistence.OneToMany;
+import javax.persistence.OneToOne;
+import javax.persistence.Table;
+import javax.persistence.Version;
+import javax.persistence.Transient;
+import javax.persistence.JoinColumn;
+
+import com.google.inject.Inject;
+import com.google.inject.name.Named;
+import java.util.List;
+
+/**
+ * Attachment storage, stored in "address", may be joined with other subclasses and if so
+ * "address_usage" will contain the subclass discriminatory value. 
+ * This might also be "sharedaddress" if this address is shared.
+ */
+@Entity
+@Table(name = "attachments")
+public class AttachmentDb implements Attachment, DbObject {
+
+  public static final String GRAASP_URL = System.getProperty("shindig.container_url");
+
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "id")
+  private long objectId;
+
+  @Basic
+  @Column(name = "filename", length = 255)
+  private String filename;
+
+  @Basic
+  @Column(name = "size", length = 255)
+  private String size;
+
+  @Basic
+  @Column(name = "content_type", length = 255)
+  private String contentType;
+
+  @OneToOne(targetEntity = AssetDb.class)
+  @JoinColumn(name = "asset_id", referencedColumnName = "id")
+  private Document document;
+
+  public String getUrl() {
+    return GRAASP_URL+"/attachment/download/file/"+String.valueOf(objectId);  
+  }
+
+  public Document getDocument() {
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public void setDocument(Document document) {
+    this.document = document;
+  }
+
+  public String getFilename() {
+    return filename;
+  }
+
+  /** {@inheritDoc} */
+  public void setFilename(String filename) {
+    this.filename = filename;
+  }
+
+  public String getContentType() {
+    return contentType;
+  }
+
+  /** {@inheritDoc} */
+  public void setContentType(String contentType) {
+    this.contentType = contentType;
+  }
+
+  public String getSize() {
+    return size;
+  }
+
+  /** {@inheritDoc} */
+  public void setSize(String size) {
+    this.size = size;
+  }
+
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/AttachmentImpl.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AttachmentImpl.java
new file mode 100644
index 0000000..4ade15b
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/AttachmentImpl.java
@@ -0,0 +1,63 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.social.opensocial.model.Attachment;
+
+/**
+ * Default representation of an {@link org.apache.shindig.social.opensocial.model.Attachment}
+ */
+public class AttachmentImpl implements Attachment {
+  private String contentType;
+  private String size;
+  private String filename;
+
+  public AttachmentImpl() { }
+
+  public String getFilename() {
+    return filename;
+  }
+
+  public String getUrl() {
+    return "url";
+  }
+
+  /** {@inheritDoc} */
+  public void setFilename(String filename) {
+    this.filename = filename;
+  }
+
+  public String getContentType() {
+    return contentType;
+  }
+
+  /** {@inheritDoc} */
+  public void setContentType(String contentType) {
+    this.contentType = contentType;
+  }
+
+  public String getSize() {
+    return size;
+  }
+
+  /** {@inheritDoc} */
+  public void setSize(String size) {
+    this.size = size;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/BodyTypeDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/BodyTypeDb.java
new file mode 100644
index 0000000..128d2f7
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/BodyTypeDb.java
@@ -0,0 +1,222 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+
+
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+import org.apache.shindig.social.core.model.BodyTypeDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.BodyType;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.NamedQuery;
+import javax.persistence.OneToMany;
+import javax.persistence.Table;
+import javax.persistence.Version;
+import javax.persistence.Transient;
+
+import java.util.List;
+
+/**
+ * The body type entity, stored in "body_type" 
+ *
+ */
+@Entity
+@Table(name = "body_type")
+@NamedQuery(name = BodyTypeDb.FINDBY_HEIGHT,
+    query = "select b from BodyTypeDb b where b.height = :height ")
+public class BodyTypeDb implements BodyType, DbObject {
+  /**
+   * Name of the JPA query to find BodyType by exact height, mainly used in testing.
+   */
+  public static final String FINDBY_HEIGHT = "q.bosytype.findbyheight";
+
+  /**
+   * name of the height parameter in JPA queries.
+   */
+  public static final String PARAM_HEIGHT = "height";
+
+  /**
+   * The internal object ID used for references to this object. Should be generated 
+   * by the underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "oid")
+  private long objectId;
+
+  /**
+   * An optimistic locking field
+   */
+  @Version
+  @Column(name = "version")
+  protected long version;
+
+  // @OneToMany(targetEntity = UserDb.class, mappedBy = "bodyType")
+  @Transient
+  private List<Person> persons;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.BodyType
+   */
+  @Basic
+  @Column(name = "build", length = 255)
+  private String build;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.BodyType
+   */
+  @Basic
+  @Column(name = "eye_color", length = 255)
+  private String eyeColor;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.BodyType
+   */
+  @Basic
+  @Column(name = "hair_color", length = 255)
+  private String hairColor;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.BodyType
+   */
+  @Basic
+  @Column(name = "height")
+  private Float height;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.BodyType
+   */
+  @Basic
+  @Column(name = "weight")
+  private Float weight;
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.BodyType#getBuild()
+   */
+  public String getBuild() {
+    return build;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.BodyType#setBuild(java.lang.String)
+   */
+  public void setBuild(String build) {
+    this.build = build;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.BodyType#getEyeColor()
+   */
+  public String getEyeColor() {
+    return eyeColor;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.BodyType#setEyeColor(java.lang.String)
+   */
+  public void setEyeColor(String eyeColor) {
+    this.eyeColor = eyeColor;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.BodyType#getHairColor()
+   */
+  public String getHairColor() {
+    return hairColor;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.BodyType#setHairColor(java.lang.String)
+   */
+  public void setHairColor(String hairColor) {
+    this.hairColor = hairColor;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.BodyType#getHeight()
+   */
+  public Float getHeight() {
+    return height;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.BodyType#setHeight(java.lang.String)
+   */
+  public void setHeight(Float height) {
+    this.height = height;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.BodyType#getWeight()
+   */
+  public Float getWeight() {
+    return weight;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.BodyType#setWeight(java.lang.String)
+   */
+  public void setWeight(Float weight) {
+    this.weight = weight;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+
+  /**
+   * @return the persons
+   */
+  public List<Person> getPersons() {
+    return persons;
+  }
+
+  /**
+   * @param persons the persons to set
+   */
+  public void setPersons(List<Person> persons) {
+    this.persons = persons;
+  }
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/CompetenceDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/CompetenceDb.java
new file mode 100644
index 0000000..b35011d
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/CompetenceDb.java
@@ -0,0 +1,158 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+import java.util.Date;
+import java.util.List;
+
+import org.apache.shindig.social.opensocial.model.Competence;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.PostLoad;
+import javax.persistence.PrePersist;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+
+import javax.persistence.DiscriminatorValue;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+
+/**
+ * Messages are stored in the message table.
+ */
+@Entity
+@Table(name="person_competences")
+public class CompetenceDb implements Competence, DbObject {
+  /**
+   * The internal object ID used for references to this object. Should be generated
+   * by the underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy=IDENTITY)
+  @Column(name="id")
+  protected long objectId;
+  
+  // In Customer class:
+  // 
+  // @OneToMany(cascade=ALL, mappedBy="customer")
+  // public Set getOrders() { return orders; }
+  // 
+  // In Order class:
+  // 
+  // @ManyToOne
+  // @JoinColumn(name="CUST_ID", nullable=false)
+  // public Customer getCustomer() { return customer; }
+  
+  @ManyToOne(targetEntity=UserDb.class)
+  @JoinColumn(name="user_id", referencedColumnName="id")
+  private Person person;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Message
+   */
+  @Basic
+  @Column(name="topic", length=255)
+  protected String topic;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Message
+   */
+  @Basic
+  @Column(name="value", length=255)
+  protected String value;
+
+  /**
+   * create an empty message.
+   */
+  public CompetenceDb() {
+  }
+
+  /**
+   * Create a message object with body, title and type.
+   * @param topic the body of the message.
+   * @param value the title of the message.
+   */
+  public CompetenceDb(String initTopic, String initValue) {
+    this.topic = initTopic;
+    this.value = initValue;
+  }
+  
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+  
+  /**
+   * @return the objectId
+   */
+  public Person getPerson() {
+    return null;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public void setPerson(Person person) {
+    this.person = person;
+  }
+  
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Message#getBody()
+   */
+  public String getTopic() {
+    return this.topic;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Message#setBody(java.lang.String)
+   */
+  public void setTopic(String topic) {
+    this.topic = topic;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Message#getTitle()
+   */
+  public String getValue() {
+    return this.value;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Message#setTitle(java.lang.String)
+   */
+  public void setValue(String value) {
+    this.value = value;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/DbObject.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/DbObject.java
new file mode 100644
index 0000000..e241c2b
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/DbObject.java
@@ -0,0 +1,32 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+
+/**
+ * All Database objects should implement this, mainly to ensure that each has an
+ * object ID. The object ID can't be set, its generated.
+ */
+public interface DbObject {
+  /**
+   * Get the internal object ID used for references to this object. Should be generated
+   * by the underlying storage mechanism.
+   * @return the ID of the object
+   */
+  long getObjectId();
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/EmailDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/EmailDb.java
new file mode 100644
index 0000000..03be80e
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/EmailDb.java
@@ -0,0 +1,78 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.social.core.model.EmailDb;
+import org.apache.shindig.social.core.model.ListFieldDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.NamedQuery;
+import javax.persistence.PrimaryKeyJoinColumn;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+import javax.persistence.DiscriminatorValue;
+
+
+/**
+ * Email Entity, extends the ListField object (and list_field table), joining on the object ID.
+ * Objects of this type will have "list_field_type" set to EmailDb in list_field
+ */
+@Entity
+@Table(name = "person_emails")
+@PrimaryKeyJoinColumn(name = "id")
+@DiscriminatorValue(value="ListFieldDb")
+@NamedQuery(name = EmailDb.FINDBY_EMAIL, query = "select e from EmailDb e where e.value = :email ")
+public class EmailDb extends ListFieldDb {
+
+  /**
+   * The name of the JPA query to find Email by email address
+   */
+  public static final String FINDBY_EMAIL = "q.emai.findbyemail";
+  /**
+   * The name of the JPA parameter used for email address
+   */
+  public static final String PARAM_EMAIL = "email";
+
+  /**
+   * A list of People who have this address, a human may have more than one person and so may shared
+   * email addresses. Perhaps thats not valid in an implementation, but within this model it is
+   * possible.
+   */
+  @ManyToOne(targetEntity = UserDb.class)
+  @JoinColumn(name = "user_id", referencedColumnName = "id")
+  protected Person person;
+  
+  /**
+   * @return the objectId
+   */
+  public Person getPerson() {
+    return null;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public void setPerson(Person person) {
+    this.person = person;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/EnumDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/EnumDb.java
new file mode 100644
index 0000000..1bd794e
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/EnumDb.java
@@ -0,0 +1,84 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.protocol.model.Enum;
+
+/**
+ * This a utility holder class for Enums to assist in database storage. It does not have any
+ * database tables or persistence associated with it.
+ * 
+ * @param <E> The Enum type.
+ */
+public final class EnumDb<E extends Enum.EnumKey> implements Enum<E> {
+  private String displayValue;
+  private E value = null;
+
+  /**
+   * Constructs a Enum object.
+   * 
+   * @param value EnumKey The key to use
+   * @param displayValue String The display value
+   */
+  public EnumDb(E value, String displayValue) {
+    this.value = value;
+    this.displayValue = displayValue;
+  }
+
+  /**
+   * Constructs a Enum object.
+   * 
+   * @param value The key to use. Will use the value from getDisplayValue() as the display value.
+   */
+  public EnumDb(E value) {
+    this(value, value.getDisplayValue());
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Enum#getDisplayValue()
+   */
+  public String getDisplayValue() {
+    return displayValue;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Enum#setDisplayValue(java.lang.String)
+   */
+  public void setDisplayValue(String displayValue) {
+    this.displayValue = displayValue;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Enum#getValue()
+   */
+  public E getValue() {
+    return value;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Enum#setValue(org.apache.shindig.social.opensocial.model.Enum.EnumKey)
+   */
+  public void setValue(E value) {
+    this.value = value;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/FilterCapability.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/FilterCapability.java
new file mode 100644
index 0000000..0b88053
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/FilterCapability.java
@@ -0,0 +1,37 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.protocol.model.FilterOperation;
+
+/**
+ * Specifies the ability to filter an object
+ */
+public interface FilterCapability {
+  /**
+   * Check to see if the property is filterable on an operation. The final property that is returned
+   * must not be directly based on the fieldName passed in and must be suitable for direct use
+   * within a JPQL statement. (ie don't trust the passed in parameter)
+   * 
+   * @param fieldName the field name that is being filtered, value is not to be trusted.
+   * @param filterOperation the operation being applied to the field.
+   * @return the final property that is being filtered or null is the filter operation specified is
+   *         not applicable
+   */
+  String findFilterableProperty(String fieldName, FilterOperation filterOperation);
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/FilterSpecification.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/FilterSpecification.java
new file mode 100644
index 0000000..b133ea6
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/FilterSpecification.java
@@ -0,0 +1,93 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.protocol.model.FilterOperation;
+
+/**
+ * A FilterSpecifiation encapsulates the Filter operation for a specific field. Name of the target
+ * property based on the operation.
+ */
+public class FilterSpecification {
+
+  public static final String SPECIAL_OPERATION = "special operation";
+  private String finalProperty;
+  private FilterOperation[] filterOptions;
+  private boolean special;
+
+  /**
+   * Create a FilterSpecification with a target final property name and a set of acceptable
+   * operations.
+   *
+   * @param finalProperty the name of the final property on the class as used by JPQL
+   * @param filterOptions an array of operations that may be applied to this property
+   */
+  public FilterSpecification(String finalProperty, FilterOperation[] filterOptions) {
+    this.finalProperty = finalProperty;
+    this.filterOptions = new FilterOperation[filterOptions.length];
+    System.arraycopy(filterOptions, 0, this.filterOptions, 0, filterOptions.length);
+    this.special = false;
+  }
+
+  /**
+   * Create a default filter operation that operates on special terms, ie that is has no filter
+   * mapping and is handled as a special case in the processing. Im this case the finalProperty is
+   * set to a reserved value.
+   */
+  public FilterSpecification() {
+    this.special = true;
+  }
+
+  /**
+   * Convert the property into the final property.
+   *
+   * @param operation the operation that is being used.
+   * @return returns the final property name, or null if the operation is not applicable
+   */
+  public String translateProperty(FilterOperation operation) {
+    if (special) {
+      return SPECIAL_OPERATION;
+    } else {
+      for (FilterOperation fo : filterOptions) {
+        if (fo.equals(operation)) {
+          return finalProperty;
+        }
+      }
+      return null;
+    }
+  }
+
+  /**
+   * If the final property is special, then return true.
+   * @param finalProp the final property
+   * @return true if special
+   */
+  public static boolean isSpecial(String finalProp) {
+    return SPECIAL_OPERATION.equals(finalProp);
+  }
+
+  /**
+   * If the final property is valid, return true.
+   * @param finalProp the final property
+   * @return true if valid.
+   */
+  public static boolean isValid(String finalProp) {
+    return (finalProp != null);
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/FriendDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/FriendDb.java
new file mode 100644
index 0000000..b2d40b1
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/FriendDb.java
@@ -0,0 +1,149 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+import org.apache.shindig.social.core.model.FriendPropertyDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.ListField;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.MapKey;
+import javax.persistence.OneToMany;
+import javax.persistence.PrimaryKeyJoinColumn;
+import javax.persistence.Table;
+import javax.persistence.Version;
+import javax.persistence.Transient;
+
+import java.util.Map;
+
+/**
+ * Fiends relates users to one another with attributes.
+ */
+@Entity 
+@Table(name = "friend")
+@PrimaryKeyJoinColumn(name = "oid") 
+public class FriendDb implements DbObject {
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "oid")
+  protected long objectId;
+
+  /**
+   * An optimistic locking field.
+   */
+  @Version
+  @Column(name = "version")
+  protected long version;
+
+  /**
+   * Someone asserts the friendship.
+   */
+  // @ManyToOne(targetEntity = UserDb.class)
+  // @JoinColumn(name = "person_id", referencedColumnName = "oid")
+  @Transient
+  protected Person person;
+
+  /**
+   * Someone else is the recipient of the friendship.
+   */
+  // @ManyToOne(targetEntity = UserDb.class)
+  // @JoinColumn(name = "friend_id", referencedColumnName = "oid")
+  @Transient
+  protected Person friend;
+
+  @Basic
+  @Column(name="score")
+  protected int score;
+
+  /**
+   * The friendship has properties.
+   */
+  @OneToMany(targetEntity = FriendPropertyDb.class, mappedBy = "friend")
+  @MapKey(name = "type")
+  protected Map<String, ListField> properties;
+
+  /**
+   * @return the person
+   */
+  public Person getPerson() {
+    return person;
+  }
+
+  /**
+   * @param person the person to set
+   */
+  public void setPerson(Person person) {
+    this.person = person;
+  }
+
+  /**
+   * @return the friend
+   */
+  public Person getFriend() {
+    return friend;
+  }
+
+  /**
+   * @param friend the friend to set
+   */
+  public void setFriend(Person friend) {
+    this.friend = friend;
+  }
+
+  /**
+   * @return the properties
+   */
+  public Map<String, ListField> getProperties() {
+    return properties;
+  }
+
+  /**
+   * @param properties the properties to set
+   */
+  public void setProperties(Map<String, ListField> properties) {
+    this.properties = properties;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+  /**
+   * @return the version
+   */
+  public long getVersion() {
+    return version;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/FriendPropertyDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/FriendPropertyDb.java
new file mode 100644
index 0000000..63e40b4
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/FriendPropertyDb.java
@@ -0,0 +1,59 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.PrimaryKeyJoinColumn;
+import javax.persistence.Table;
+
+import org.apache.shindig.social.core.model.FriendDb;
+import org.apache.shindig.social.core.model.ListFieldDb;
+
+/**
+ * This is a property of a friend link, extending the listfield type, and using the type property to
+ * perform the mapping. Main storage is in the listfield table, but friend property stores the
+ * details of the relationship with the friend object.
+ */
+@Entity
+@Table(name = "friend_property")
+@PrimaryKeyJoinColumn(name = "oid")
+public class FriendPropertyDb extends ListFieldDb {
+  /**
+   * The friend relationship connected with this property.
+   */
+  @ManyToOne(targetEntity = FriendDb.class)
+  @JoinColumn(name = "friend_id", referencedColumnName = "oid")
+  protected FriendDb friend;
+
+  /**
+   * @return the friend
+   */
+  public FriendDb getFriend() {
+    return friend;
+  }
+
+  /**
+   * @param friend the friend to set
+   */
+  public void setFriend(FriendDb friend) {
+    this.friend = friend;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/GroupDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/GroupDb.java
new file mode 100644
index 0000000..3a6dbce
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/GroupDb.java
@@ -0,0 +1,172 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+import org.apache.shindig.social.core.model.GroupPropertyDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.ListField;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.JoinTable;
+import javax.persistence.ManyToMany;
+import javax.persistence.ManyToOne;
+import javax.persistence.MapKey;
+import javax.persistence.OneToMany;
+import javax.persistence.Table;
+import javax.persistence.Version;
+import javax.persistence.Transient;
+
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Represents a group in the social database. The assumption in this object is that groups are
+ * associated with individuals and are used by those individuals to manage people.
+ */
+@Entity
+@Table(name = "person_group")
+public class GroupDb implements DbObject {
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "oid")
+  protected long objectId;
+
+  /**
+   * An optimistic locking field.
+   */
+  @Version
+  @Column(name = "version")
+  protected long version;
+
+  /**
+   * There is a single owner of a group.
+   */
+  // @ManyToOne(targetEntity = UserDb.class)
+  // @JoinColumn(name = "person_id", referencedColumnName = "oid")
+  @Transient
+  protected Person owner;
+
+  /**
+   * There are many members of a group.
+   */
+  // @ManyToMany(targetEntity = UserDb.class)
+  // @JoinTable(name = "membership", 
+  //     joinColumns = 
+  //       @JoinColumn(name = "group_id", referencedColumnName = "oid"), 
+  //     inverseJoinColumns = 
+  //       @JoinColumn(name = "person_id", referencedColumnName = "oid"))
+  @Transient
+  protected List<Person> members;
+
+  /**
+   * Each group has a group Id.
+   */
+  @Basic
+  @Column(name = "id", length = 255)
+  protected String id;
+
+  /**
+   * The group has properties.
+   */
+  @OneToMany(targetEntity = GroupPropertyDb.class, mappedBy = "group")
+  @MapKey(name = "type")
+  protected Map<String, ListField> properties;
+
+  /**
+   * @return the owner
+   */
+  public Person getOwner() {
+    return owner;
+  }
+
+  /**
+   * @param owner the owner to set
+   */
+  public void setOwner(Person owner) {
+    this.owner = owner;
+  }
+
+  /**
+   * @return the members
+   */
+  public List<Person> getMembers() {
+    return members;
+  }
+
+  /**
+   * @param members the members to set
+   */
+  public void setMembers(List<Person> members) {
+    this.members = members;
+  }
+
+  /**
+   * @return the id
+   */
+  public String getId() {
+    return id;
+  }
+
+  /**
+   * @param id the id to set
+   */
+  public void setId(String id) {
+    this.id = id;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+  /**
+   * @return the version
+   */
+  public long getVersion() {
+    return version;
+  }
+
+  /**
+   * @return the properties
+   */
+  public Map<String, ListField> getProperties() {
+    return properties;
+  }
+
+  /**
+   * @param properties the properties to set
+   */
+  public void setProperties(Map<String, ListField> properties) {
+    this.properties = properties;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/GroupPropertyDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/GroupPropertyDb.java
new file mode 100644
index 0000000..a1481a4
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/GroupPropertyDb.java
@@ -0,0 +1,62 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.PrimaryKeyJoinColumn;
+import javax.persistence.Table;
+
+import org.apache.shindig.social.core.model.GroupDb;
+import org.apache.shindig.social.core.model.ListFieldDb;
+
+/**
+ * This is a property of a group, extending the listfield type, and using the type property to
+ * perform the mapping. Main storage is in the listfield table, but group property stores the
+ * details of the properties of the group.
+ */
+@Entity
+@Table(name = "group_property")
+@PrimaryKeyJoinColumn(name = "oid")
+public class GroupPropertyDb extends ListFieldDb {
+  /**
+   * The group relationship connected with this property.
+   */
+  @ManyToOne(targetEntity = GroupDb.class)
+  @JoinColumn(name = "group_id", referencedColumnName = "oid")
+  protected GroupDb group;
+
+  /**
+   * @return the group
+   */
+  public GroupDb getGroup() {
+    return group;
+  }
+
+  /**
+   * @param group the group to set
+   */
+  public void setGroup(GroupDb group) {
+    this.group = group;
+  }
+  
+
+
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/ImDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ImDb.java
new file mode 100644
index 0000000..26d1793
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ImDb.java
@@ -0,0 +1,49 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.social.core.model.ListFieldDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.PrimaryKeyJoinColumn;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+
+/**
+ * IM (Instant Message account) Entity, extends the ListField object (and list_field table), joining
+ * on the object ID. Objects of this type will have "list_field_type" set to ImDb in list_field
+ */
+@Entity
+@Table(name = "im")
+@PrimaryKeyJoinColumn(name = "oid")
+public class ImDb extends ListFieldDb {
+
+  /**
+   * The person who owns this IM account. This information is maintained in the database using a
+   * join column "person_id" in the im table that points to oid in the person table.
+   */
+  // @ManyToOne(targetEntity = UserDb.class)
+  // @JoinColumn(name = "person_id", referencedColumnName = "oid")
+  @Transient
+  protected Person person;
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/ListFieldDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ListFieldDb.java
new file mode 100644
index 0000000..4b07e15
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/ListFieldDb.java
@@ -0,0 +1,178 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+import org.apache.shindig.social.opensocial.model.ListField;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.DiscriminatorColumn;
+import javax.persistence.DiscriminatorType;
+import javax.persistence.DiscriminatorValue;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.Inheritance;
+import javax.persistence.InheritanceType;
+import javax.persistence.MappedSuperclass;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+
+/**
+ * List fields represent storage of list of fields potentially with a preferred or primary value.
+ * This is the base storage class for all list fields, stored in the lsit_field table. Classes will
+ * extend this class using a join strategy and setting the list_field_type column to the type of
+ * class represented by the record. If there is no type it defaults to ListFieldDb.
+ */
+@MappedSuperclass
+@Table(name="list_fields")
+@Inheritance(strategy=InheritanceType.JOINED)
+@DiscriminatorColumn(name="list_field_type", length=30, discriminatorType=DiscriminatorType.STRING)
+@DiscriminatorValue(value="ListFieldDb")
+public class ListFieldDb implements ListField, DbObject {
+  /**
+   * The internal object ID used for references to this object. Should be generated 
+   * by the underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy=IDENTITY)
+  @Column(name="id")
+  protected long objectId;
+  
+  /**
+   * An optimistic locking field.
+   */
+  // @Version
+  // @Column(name="version")
+  @Transient
+  protected long version;
+
+  
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.ListField
+   */
+  @Basic
+  @Column(name="field_type", length=255)
+  protected String type;
+  
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.ListField
+   */
+  @Basic
+  @Column(name="field_value", length=255)
+  protected String value;
+  
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.ListField
+   */
+  @Basic
+  @Column(name="primary_field")
+  protected Boolean primary;
+
+  /**
+   * Create a list field.
+   */
+  public ListFieldDb() { }
+
+  /**
+   * Create a list field, specifying the type and the value.
+   * @param type the type or name of the field
+   * @param value the value contained in the field.
+   */
+  public ListFieldDb(String type, String value) {
+    this.type = type;
+    this.value = value;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.ListField#getType()
+   */
+  public String getType() {
+    return type;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.ListField#setType(java.lang.String)
+   */
+  public void setType(String type) {
+    this.type = type;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.ListField#getValue()
+   */
+  public String getValue() {
+    return value;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.ListField#setValue(java.lang.String)
+   */
+  public void setValue(String value) {
+    this.value = value;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.ListField#getPrimary()
+   */
+  public Boolean getPrimary() {
+    return primary;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.ListField#setPrimary(java.lang.Boolean)
+   */
+  public void setPrimary(Boolean primary) {
+    this.primary = primary;
+  }
+
+  /** 
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.core.model.DbObject#getObjectId()
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+  
+  /**
+   * @return the objectId
+   */
+  public Person getPerson() {
+    return null;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public void setPerson(Person person) {
+    // this.person = person;
+  }
+
+}

diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/MediaItemDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/MediaItemDb.java
new file mode 100644
index 0000000..2c3271d
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/MediaItemDb.java
@@ -0,0 +1,598 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.CascadeType.MERGE;
+import static javax.persistence.CascadeType.PERSIST;
+import static javax.persistence.CascadeType.REFRESH;
+import static javax.persistence.GenerationType.IDENTITY;
+
+import org.apache.shindig.social.core.model.ActivityDb;
+import org.apache.shindig.social.core.model.AddressDb;
+import org.apache.shindig.social.opensocial.model.Activity;
+import org.apache.shindig.social.opensocial.model.Address;
+import org.apache.shindig.social.opensocial.model.MediaItem;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToMany;
+import javax.persistence.ManyToOne;
+import javax.persistence.PostLoad;
+import javax.persistence.PrePersist;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+
+import java.util.List;
+
+/**
+ * Media items are stored in the media_item table, Items may be shared amongst activities and are
+ * related to people.
+ */
+@Entity
+@Table(name = "media_item")
+public class MediaItemDb implements MediaItem, DbObject {
+  /**
+   * The internal object ID used for references to this object. Should be generated
+   * by the underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "oid")
+  private long objectId;
+
+  /**
+   * An optimistic locking field
+   */
+  @Version
+  @Column(name = "version")
+  protected long version;
+
+  /**
+   * The list of activities which this media item is reference in, this relationship is specified by
+   * the java property mediaItems in the class ActivityDb.
+   *
+   * @see ActivityDb for more information on this mapping.
+   */
+  @ManyToMany(targetEntity = ActivityDb.class, mappedBy = "mediaItems")
+  protected List<Activity> activities;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "mime_type", length = 255)
+  private String mimeType;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "media_type")
+  private String typeDb;
+
+  /**
+   * model field
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "thumbnail_url", length = 255)
+  private String thumbnailUrl;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Transient
+  private Type type;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "url", length = 255)
+  private String url;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "album_id")
+  private String albumId;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "created")
+  private String created;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "description")
+  private String description;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "title")
+  private String title;
+
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "duration")
+  private String duration;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "file_size")
+  private String fileSize;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "id")
+  private String id;
+
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "language")
+  private String language;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "last_updated")
+  private String lastUpdated;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @ManyToOne(targetEntity = AddressDb.class, cascade = { PERSIST, MERGE, REFRESH })
+  @JoinColumn(name = "address_id", referencedColumnName = "oid")
+  private Address location;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "num_comments")
+  private String numComments;
+
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "num_views")
+  private String numViews;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "num_votes")
+  private String numVotes;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "rating")
+  private String rating;
+
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "start_time")
+  private String startTime;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "tagged_people")
+  private String taggedPeople;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.MediaItem
+   */
+  @Basic
+  @Column(name = "tags")
+  private String tags;
+
+  /**
+   * Create a new blank media item.
+   */
+  public MediaItemDb() {
+  }
+
+  /**
+   * Create a media item specifying the mimeType, type and url.
+   * @param mimeType the mime type of the media item.
+   * @param type the type of the media items (see the specification)
+   * @param url the url pointing to the media item.
+   */
+  public MediaItemDb(String mimeType, Type type, String url) {
+    this.mimeType = mimeType;
+    this.type = type;
+    this.url = url;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.MediaItem#getMimeType()
+   */
+  public String getMimeType() {
+    return mimeType;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.MediaItem#setMimeType(java.lang.String)
+   */
+  public void setMimeType(String mimeType) {
+    this.mimeType = mimeType;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.MediaItem#getType()
+   */
+  public Type getType() {
+    return type;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.MediaItem#setType(org.apache.shindig.social.opensocial.model.MediaItem.Type)
+   */
+  public void setType(Type type) {
+    this.type = type;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.MediaItem#getUrl()
+   */
+  public String getUrl() {
+    return url;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.MediaItem#setUrl(java.lang.String)
+   */
+  public void setUrl(String url) {
+    this.url = url;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.MediaItem#getThumbnailUrl()
+   */
+  public String getThumbnailUrl() {
+    return thumbnailUrl;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.MediaItem#setThumbnailUrl(java.lang.String)
+   */
+  public void setThumbnailUrl(String url) {
+    this.thumbnailUrl = url;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getAlbumId() {
+    return albumId;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setAlbumId(String albumId) {
+    this.albumId = albumId;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getCreated() {
+    return created;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setCreated(String created) {
+    this.created = created;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getDescription() {
+    return description;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setDescription(String description) {
+    this.description = description;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getDuration() {
+    return duration;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setDuration(String duration) {
+    this.duration = duration;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getFileSize() {
+    return fileSize;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setFileSize(String fileSize) {
+    this.fileSize = fileSize;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getId() {
+    return id;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setId(String id) {
+    this.id = id;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getLanguage() {
+    return language;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setLanguage(String language) {
+    this.language = language;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getLastUpdated() {
+    return lastUpdated;
+  }
+
+  public void setLastUpdated(String lastUpdated) {
+    this.lastUpdated = lastUpdated;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public Address getLocation() {
+    return location;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setLocation(Address location) {
+    this.location = location;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getNumComments() {
+    return numComments;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setNumComments(String numComments) {
+    this.numComments = numComments;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getNumViews() {
+    return numViews;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setNumViews(String numViews) {
+    this.numViews = numViews;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getNumVotes() {
+    return numVotes;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setNumVotes(String numVotes) {
+    this.numVotes = numVotes;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getRating() {
+    return rating;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setRating(String rating) {
+    this.rating = rating;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getStartTime() {
+    return startTime;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setStartTime(String startTime) {
+    this.startTime = startTime;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getTaggedPeople() {
+    return taggedPeople;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setTaggedPeople(String taggedPeople) {
+    this.taggedPeople = taggedPeople;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getTags() {
+    return tags;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setTags(String tags) {
+    this.tags = tags;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public String getTitle() {
+    return title;
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public void setTitle(String title) {
+    this.title = title;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.core.model.DbObject#getObjectId()
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+  /**
+   * a hook into the pre persist phase of JPA to convert type into the db representation.
+   */
+  @PrePersist
+  public void populateDbFields() {
+    typeDb = type.toString();
+  }
+
+  /**
+   * A hook into the load to convert the type in the Db into the Type Enum.
+   */
+  @PostLoad
+  public void loadTransientFields() {
+    type = Type.valueOf(typeDb);
+  }
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/MessageDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/MessageDb.java
new file mode 100644
index 0000000..635ce7b
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/MessageDb.java
@@ -0,0 +1,327 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+import java.util.Date;
+import java.util.List;
+
+import org.apache.shindig.social.opensocial.model.Message;
+import org.apache.shindig.social.opensocial.model.Url;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.PostLoad;
+import javax.persistence.PrePersist;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+
+/**
+ * Messages are stored in the message table.
+ */
+@Entity
+@Table(name="message")
+public class MessageDb implements Message, DbObject {
+  /**
+   * The internal object ID used for references to this object. Should be generated
+   * by the underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy=IDENTITY)
+  @Column(name="oid")
+  protected long objectId;
+
+  /**
+   * An optimistic locking field
+   */
+  @Version
+  @Column(name="version")
+  protected long version;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Message
+   */
+  @Basic
+  @Column(name="body", length=255)
+  protected String body;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Message
+   */
+  @Basic
+  @Column(name="title", length=255)
+  protected String title;
+
+  /**
+   * model field. (database representation of type)
+   * @see org.apache.shindig.social.opensocial.model.Message
+   */
+  @Basic
+  @Column(name="message_type")
+  protected String typeDb;
+
+  /**
+   * model field.
+   * @see org.apache.shindig.social.opensocial.model.Message
+   */
+  @Transient
+  protected Type type;
+
+  /**
+   * create an empty message.
+   */
+  public MessageDb() {
+  }
+
+  /**
+   * Create a message object with body, title and type.
+   * @param initBody the body of the message.
+   * @param initTitle the title of the message.
+   * @param initType the type of the message.
+   */
+  public MessageDb(String initBody, String initTitle, Type initType) {
+    this.body = initBody;
+    this.title = initTitle;
+    this.type = initType;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Message#getBody()
+   */
+  public String getBody() {
+    return this.body;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Message#setBody(java.lang.String)
+   */
+  public void setBody(String newBody) {
+    this.body = newBody;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Message#getTitle()
+   */
+  public String getTitle() {
+    return this.title;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Message#setTitle(java.lang.String)
+   */
+  public void setTitle(String newTitle) {
+    this.title = newTitle;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Message#getType()
+   */
+  public Type getType() {
+    return type;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Message#setType(org.apache.shindig.social.opensocial.model.Message.Type)
+   */
+  public void setType(Type newType) {
+    this.type = newType;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Message#sanitizeHTML(java.lang.String)
+   */
+  public String sanitizeHTML(String htmlStr) {
+    return htmlStr;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.core.model.DbObject#getObjectId()
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+  /**
+   *
+   */
+  @PrePersist
+  public void populateDbFields() {
+    typeDb = type.toString();
+  }
+
+  /**
+   *
+   */
+  @PostLoad
+  public void loadTransientFields() {
+    type = Type.valueOf(typeDb);
+  }
+
+  /** {@inheritDoc} */
+  public String getAppUrl() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public String getBodyId() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public List<String> getCollectionIds() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public String getId() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public String getInReplyTo() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public List<String> getRecipients() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public List<String> getReplies() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public String getSenderId() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public Status getStatus() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public Date getTimeSent() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public String getTitleId() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public Date getUpdated() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public List<Url> getUrls() {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public void setAppUrl(String url) {
+    // TODO Auto-generated method stub
+  }
+
+  /** {@inheritDoc} */
+  public void setBodyId(String bodyId) {
+    // TODO Auto-generated method stub
+  }
+
+  /** {@inheritDoc} */
+  public void setCollectionIds(List<String> collectionIds) {
+    // TODO Auto-generated method stub
+  }
+
+  /** {@inheritDoc} */
+  public void setId(String id) {
+    // TODO Auto-generated method stub
+  }
+
+  /** {@inheritDoc} */
+  public void setInReplyTo(String parentId) {
+    // TODO Auto-generated method stub
+  }
+
+  /** {@inheritDoc} */
+  public void setRecipients(List<String> recipients) {
+    // TODO Auto-generated method stub
+  }
+
+  /** {@inheritDoc} */
+  public void setSenderId(String senderId) {
+    // TODO Auto-generated method stub
+  }
+
+  /** {@inheritDoc} */
+  public void setStatus(Status status) {
+    // TODO Auto-generated method stub
+  }
+
+  /** {@inheritDoc} */
+  public void setTimeSent(Date timeSent) {
+    // TODO Auto-generated method stub
+  }
+
+  /** {@inheritDoc} */
+  public void setTitleId(String titleId) {
+    // TODO Auto-generated method stub
+  }
+
+  /** {@inheritDoc} */
+  public void setUpdated(Date updated) {
+    // TODO Auto-generated method stub
+  }
+
+  /** {@inheritDoc} */
+  public void setUrls(List<Url> urls) {
+    // TODO Auto-generated method stub
+  }
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/NameDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/NameDb.java
new file mode 100644
index 0000000..73c7770
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/NameDb.java
@@ -0,0 +1,287 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+import org.apache.shindig.social.core.model.NameDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Name;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.NamedQuery;
+import javax.persistence.OneToMany;
+import javax.persistence.Table;
+import javax.persistence.Version;
+import javax.persistence.Transient;
+
+import java.util.List;
+
+/**
+ * The name object, stored in the name table.
+ */
+@Entity
+@Table(name = "person_names")
+@NamedQuery(name = NameDb.FINDBY_FAMILY_NAME, query = "select n from NameDb n where n.familyName = :familyName ")
+public class NameDb implements Name, DbObject {
+  /**
+   * the name of the JPA query that selects a name by family name.
+   */
+  public static final String FINDBY_FAMILY_NAME = "q.name.findbyfamilyname";
+  /**
+   * the name of the family name parameter used in JPA named queries.
+   */
+  public static final String PARAM_FAMILY_NAME = "familyName";
+
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "id")
+  private long objectId;
+
+  /**
+   * An optimistic locking field
+   */
+  // @Version
+  // @Column(name = "version")
+  @Transient
+  protected long version;
+
+  /**
+   * A list of people who shared this name, relationship is specified by the name property on the
+   * Person Object.
+   */
+  @OneToMany(targetEntity = UserDb.class, mappedBy = "name")
+  private List<Person> persons;
+
+  /**
+   * model field.
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name
+   */
+  // @Basic
+  // @Column(name = "additional_name", length = 255)
+  @Transient
+  private String additionalName;
+
+  /**
+   * model field.
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name
+   */
+  @Basic
+  @Column(name = "family_name", length = 255)
+  private String familyName;
+
+  /**
+   * model field.
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name
+   */
+  @Basic
+  @Column(name = "given_name", length = 255)
+  private String givenName;
+
+  /**
+   * model field.
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name
+   */
+  // @Basic
+  // @Column(name = "honorific_prefix", length = 255)
+  @Transient
+  private String honorificPrefix;
+
+  /**
+   * model field.
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name
+   */
+  // @Basic
+  // @Column(name = "honorific_suffix", length = 255)
+  @Transient
+  private String honorificSuffix;
+
+  /**
+   * model field.
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name
+   */
+  // @Basic
+  // @Column(name = "formatted", length = 255)
+  @Transient
+  private String formatted;
+
+  /**
+   * 
+   */
+  public NameDb() {
+  }
+
+  /**
+   * @param formatted
+   */
+  public NameDb(String formatted) {
+    this.formatted = formatted;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name#getAdditionalName()
+   */
+  public String getAdditionalName() {
+    return additionalName;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name#setAdditionalName(java.lang.String)
+   */
+  public void setAdditionalName(String additionalName) {
+    this.additionalName = additionalName;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name#getFamilyName()
+   */
+  public String getFamilyName() {
+    return familyName;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name#setFamilyName(java.lang.String)
+   */
+  public void setFamilyName(String familyName) {
+    this.familyName = familyName;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name#getGivenName()
+   */
+  public String getGivenName() {
+    return givenName;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name#setGivenName(java.lang.String)
+   */
+  public void setGivenName(String givenName) {
+    this.givenName = givenName;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name#getHonorificPrefix()
+   */
+  public String getHonorificPrefix() {
+    return honorificPrefix;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name#setHonorificPrefix(java.lang.String)
+   */
+  public void setHonorificPrefix(String honorificPrefix) {
+    this.honorificPrefix = honorificPrefix;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name#getHonorificSuffix()
+   */
+  public String getHonorificSuffix() {
+    return honorificSuffix;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name#setHonorificSuffix(java.lang.String)
+   */
+  public void setHonorificSuffix(String honorificSuffix) {
+    this.honorificSuffix = honorificSuffix;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.core.model.DbObject#getObjectId()
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+  /**
+   * A list of people who have this name
+   * 
+   * @return the persons
+   */
+  public List<Person> getPersons() {
+    return null;
+    // return persons;
+  }
+
+  /**
+   * Set the list of people who have this name
+   * 
+   * @param persons the persons to set
+   */
+  public void setPersons(List<Person> persons) {
+    this.persons = persons;
+
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name#getFormatted()
+   */
+  public String getFormatted() {
+    return formatted;
+  }
+
+  /**
+   * {@inheritDoc}
+   * 
+   * @see org.apache.shindig.social.opensocial.model.Name#setFormatted(java.lang.String)
+   */
+  public void setFormatted(String formatted) {
+    this.formatted = formatted;
+  }
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/OrganizationAddressDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/OrganizationAddressDb.java
new file mode 100644
index 0000000..3197465
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/OrganizationAddressDb.java
@@ -0,0 +1,133 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.social.core.model.AddressDb;
+import org.apache.shindig.social.core.model.OrganizationDb;
+import org.apache.shindig.social.opensocial.model.Organization;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.DiscriminatorValue;
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.OneToOne;
+import javax.persistence.Table;
+
+/**
+ * This object connects to a single Address, and to a single organization, defining the
+ * organizations relationship with the address. The class extends AddressDb, which stores itself in
+ * the address table. The specialization of this class is stored in organization_address and joined
+ * on the objectId property (oid column). Records are discriminated using the address_usage column
+ * in the address table and set to the value 'sharedaddress' (i.e. no discrimination) indicating
+ * that the address is shared.
+ */
+// TODO, uncertain about the mapping of this, oid <-> oid means one to one, and this is only
+// associated with a single
+// Organization. IMHO, we should be mapping organizational_address.address_id to address.oid, but
+// need to think about this.
+@Entity
+@Table(name = "organizational_address")
+@DiscriminatorValue(value = "sharedaddress")
+// this is the same as others since we want to share the data.
+public class OrganizationAddressDb extends AddressDb {
+  /**
+   * Indicates this address is the primary address for the organization.
+   */
+  @Basic
+  @Column(name = "primary_organization")
+  private Boolean primary;
+
+  /**
+   * This address is associated with a single organization in this form.
+   *
+   */
+  @OneToOne(targetEntity = OrganizationDb.class)
+  @JoinColumn(name = "organization_id", referencedColumnName = "oid")
+  private Organization organization;
+
+  /**
+   * the type of the address for the organization.
+   *
+   * @see org.apache.shindig.social.opensocial.model.Address
+   */
+  @Basic
+  @Column(name = "type", length = 255)
+  private String type;
+
+  /**
+   * Create an organizational address.
+   */
+  public OrganizationAddressDb() {
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.core.model.AddressDb#getType()
+   */
+  public String getType() {
+    return type;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.core.model.AddressDb#setType(java.lang.String)
+   */
+  public void setType(String type) {
+    this.type = type;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.core.model.AddressDb#getPrimary()
+   */
+  public Boolean getPrimary() {
+    return primary;
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @see org.apache.shindig.social.core.model.AddressDb#setPrimary(java.lang.Boolean)
+   */
+  public void setPrimary(Boolean primary) {
+    this.primary = primary;
+  }
+
+  /**
+   * The organization this address address relates to.
+   *
+   * @return the organization
+   */
+  public Organization getOrganization() {
+    return organization;
+  }
+
+  /**
+   * Set the organization this address relates to.
+   *
+   * @param organization the organization to set
+   */
+  public void setOrganization(Organization organization) {
+    this.organization = organization;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/OrganizationDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/OrganizationDb.java
new file mode 100644
index 0000000..9162233
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/OrganizationDb.java
@@ -0,0 +1,399 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.GenerationType.IDENTITY;
+
+import org.apache.shindig.social.core.model.OrganizationAddressDb;
+import org.apache.shindig.social.core.model.OrganizationDb;
+import org.apache.shindig.social.opensocial.model.Address;
+import org.apache.shindig.social.opensocial.model.Organization;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.DiscriminatorColumn;
+import javax.persistence.DiscriminatorValue;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.Inheritance;
+import javax.persistence.InheritanceType;
+import javax.persistence.NamedQuery;
+import javax.persistence.OneToOne;
+import javax.persistence.Table;
+import javax.persistence.Temporal;
+import javax.persistence.TemporalType;
+import javax.persistence.Version;
+
+import java.util.Date;
+import static javax.persistence.CascadeType.PERSIST;
+import static javax.persistence.CascadeType.MERGE;
+import static javax.persistence.CascadeType.REFRESH;
+
+/**
+ * An organization is stored in the organization table. There may be types of organization where
+ * this class is extended. The storage contains a org_usage column which is used to discriminate the
+ * usage of each organization record. Where the record is shared the value will be shared. Classes
+ * that extend this class may have other values.
+ */
+@Entity
+@Table(name = "organization")
+@Inheritance(strategy = InheritanceType.JOINED)
+@DiscriminatorColumn(name = "org_usage")
+@DiscriminatorValue("shared")
+@NamedQuery(name = OrganizationDb.FINDBY_NAME, 
+    query = "select o from OrganizationDb o where o.name = :name ")
+public class OrganizationDb implements Organization, DbObject {
+  /**
+   * The name of the JPA named query to find the organization by name.
+   */
+  public static final String FINDBY_NAME = "q.organization.findbyname";
+  /**
+   * The name of the parameter used for the name column in JPA queries.
+   */
+  public static final String PARAM_NAME = "name";
+
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "oid")
+  private long objectId;
+
+  /**
+   * An optimistic locking field
+   */
+  @Version
+  @Column(name = "version")
+  protected long version;
+
+  /**
+   * The address associated with this Organization.
+   */
+  // TODO: does an organization have only one address, or many with one primary
+  @OneToOne(targetEntity = OrganizationAddressDb.class, mappedBy = "organization", cascade = {
+      PERSIST, MERGE, REFRESH })
+  private Address address;
+
+  /**
+   * Part of the Organization Model
+   * @see org.apache.shindig.social.opensocial.model.Organization
+   */
+  @Basic
+  @Column(name = "description", length = 255)
+  private String description;
+
+  /**
+   * Part of the Organization Model
+   * @see org.apache.shindig.social.opensocial.model.Organization
+   */
+  @Basic
+  @Column(name = "endDate")
+  @Temporal(TemporalType.DATE)
+  private Date endDate;
+
+  /**
+   * Part of the Organization Model
+   * @see org.apache.shindig.social.opensocial.model.Organization
+   */
+  @Basic
+  @Column(name = "field", length = 255)
+  private String field;
+
+  /**
+   * Part of the Organization Model
+   * @see org.apache.shindig.social.opensocial.model.Organization
+   */
+  @Basic
+  @Column(name = "name", length = 255)
+  private String name;
+
+  /**
+   * Part of the Organization Model
+   * @see org.apache.shindig.social.opensocial.model.Organization
+   */
+  @Basic
+  @Column(name = "salary", length = 255)
+  private String salary;
+
+  /**
+   * Part of the Organization Model
+   * @see org.apache.shindig.social.opensocial.model.Organization
+   */
+  @Basic
+  @Column(name = "start_date")
+  @Temporal(TemporalType.DATE)
+  private Date startDate;
+
+  /**
+   * Part of the Organization Model
+   * @see org.apache.shindig.social.opensocial.model.Organization
+   */
+  @Basic
+  @Column(name = "sub_field", length = 255)
+  private String subField;
+
+  /**
+   * Part of the Organization Model
+   * @see org.apache.shindig.social.opensocial.model.Organization
+   */
+  @Basic
+  @Column(name = "title", length = 255)
+  private String title;
+
+  /**
+   * Part of the Organization Model
+   * @see org.apache.shindig.social.opensocial.model.Organization
+   */
+  @Basic
+  @Column(name = "webpage", length = 255)
+  private String webpage;
+
+  /**
+   * Part of the Organization Model
+   * @see org.apache.shindig.social.opensocial.model.Organization
+   */
+  @Basic
+  @Column(name = "type", length = 255)
+  private String type;
+
+  /**
+   * Part of the Organization Model
+   * @see org.apache.shindig.social.opensocial.model.Organization
+   */
+  @Basic
+  @Column(name = "primary_organization")
+  private Boolean primary;
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#getAddress()
+   */
+  public Address getAddress() {
+    return address;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#setAddress(org.apache.shindig.social.opensocial.model.Address)
+   */
+  public void setAddress(Address address) {
+    this.address = address;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#getDescription()
+   */
+  public String getDescription() {
+    return description;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#setDescription(java.lang.String)
+   */
+  public void setDescription(String description) {
+    this.description = description;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#getEndDate()
+   */
+  public Date getEndDate() {
+    if (endDate == null) {
+      return null;
+    }
+    return new Date(endDate.getTime());
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#setEndDate(java.util.Date)
+   */
+  public void setEndDate(Date endDate) {
+    if (endDate == null) {
+      this.endDate = null;
+    } else {
+      this.endDate = new Date(endDate.getTime());
+    }
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#getField()
+   */
+  public String getField() {
+    return field;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#setField(java.lang.String)
+   */
+  public void setField(String field) {
+    this.field = field;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#getName()
+   */
+  public String getName() {
+    return name;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#setName(java.lang.String)
+   */
+  public void setName(String name) {
+    this.name = name;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#getSalary()
+   */
+  public String getSalary() {
+    return salary;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#setSalary(java.lang.String)
+   */
+  public void setSalary(String salary) {
+    this.salary = salary;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#getStartDate()
+   */
+  public Date getStartDate() {
+    if (startDate == null) {
+      return null;
+    }
+    return new Date(startDate.getTime());
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#setStartDate(java.util.Date)
+   */
+  public void setStartDate(Date startDate) {
+    if (startDate == null) {
+      this.startDate = null;
+    } else {
+      this.startDate = new Date(startDate.getTime());
+    }
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#getSubField()
+   */
+  public String getSubField() {
+    return subField;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#setSubField(java.lang.String)
+   */
+  public void setSubField(String subField) {
+    this.subField = subField;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#getTitle()
+   */
+  public String getTitle() {
+    return title;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#setTitle(java.lang.String)
+   */
+  public void setTitle(String title) {
+    this.title = title;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#getWebpage()
+   */
+  public String getWebpage() {
+    return webpage;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#setWebpage(java.lang.String)
+   */
+  public void setWebpage(String webpage) {
+    this.webpage = webpage;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#getType()
+   */
+  public String getType() {
+    return type;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#setType(java.lang.String)
+   */
+  public void setType(String type) {
+    this.type = type;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#getPrimary()
+   */
+  public Boolean getPrimary() {
+    return primary;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.opensocial.model.Organization#setPrimary(java.lang.Boolean)
+   */
+  public void setPrimary(Boolean primary) {
+    this.primary = primary;
+  }
+
+  /**
+   * {@inheritDoc}
+   * @see org.apache.shindig.social.core.model.DbObject#getObjectId()
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/PermissionDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PermissionDb.java
new file mode 100644
index 0000000..e4781ff
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PermissionDb.java
@@ -0,0 +1,231 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.CascadeType.ALL;
+import static javax.persistence.CascadeType.MERGE;
+import static javax.persistence.CascadeType.PERSIST;
+import static javax.persistence.CascadeType.REFRESH;
+import static javax.persistence.GenerationType.IDENTITY;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
+import org.apache.shindig.protocol.model.Enum;
+import org.apache.shindig.protocol.model.FilterOperation;
+import org.apache.shindig.social.opensocial.model.Account;
+import org.apache.shindig.social.opensocial.model.Address;
+import org.apache.shindig.social.opensocial.model.BodyType;
+import org.apache.shindig.social.opensocial.model.Drinker;
+import org.apache.shindig.social.opensocial.model.ListField;
+import org.apache.shindig.social.opensocial.model.LookingFor;
+import org.apache.shindig.social.opensocial.model.Name;
+import org.apache.shindig.social.opensocial.model.NetworkPresence;
+import org.apache.shindig.social.opensocial.model.Organization;
+import org.apache.shindig.social.opensocial.model.Person;
+import org.apache.shindig.social.opensocial.model.App;
+import org.apache.shindig.social.opensocial.model.Smoker;
+import org.apache.shindig.social.opensocial.model.Url;
+
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.JoinTable;
+import javax.persistence.ManyToMany;
+import javax.persistence.ManyToOne;
+import javax.persistence.NamedQueries;
+import javax.persistence.NamedQuery;
+import javax.persistence.OneToMany;
+import javax.persistence.PostLoad;
+import javax.persistence.PrePersist;
+import javax.persistence.Table;
+import javax.persistence.Temporal;
+import javax.persistence.TemporalType;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+
+/**
+ * Default Implementation of the Person object in the org.apache.shindig.graaasp.jpa.
+ */
+@Entity
+@Table(name = "permissions")
+public class PermissionDb implements DbObject {
+  
+  // 3 is owner in Graaasp
+  public static final String JPQL_OWNERS_BY_SPACE = "select p.userId from PermissionDb p where p.status = 'joined' and p.rightType = '3' and p.itemType = 'Space'";
+
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "id")
+  private long objectId;
+  
+  /**
+   * The internal itemId and itemType used for references to the item of a widget.
+   */
+  @Basic
+  @Column(name = "item_id", length = 255)
+  private String itemId;
+  
+  @Basic
+  @Column(name = "item_type", length = 255)
+  protected String itemType;
+
+  @Basic
+  @Column(name = "user_id")
+  protected String userId;
+
+  @Basic
+  @Column(name = "status", length = 255)
+  protected String status;
+  
+  // right_type = {1 = "viewer", 2 = "editor", 3 = "owner"}
+  @Basic
+  @Column(name = "right_type")
+  protected Long rightType;
+  
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "id", length = 255, insertable = false, updatable = false)
+  protected String id;
+
+  // Note: Not in the opensocial js person object directly
+  @Transient
+  private boolean isOwner = false;
+
+  public PermissionDb() {
+  }
+
+  public String getUserId() {
+    return userId;
+  }
+
+  public void setUserId(String userId) {
+    this.userId = userId;
+  }                               
+
+  public String getStatus() {
+    return status;
+  }
+
+  public void setStatus(String status) {
+    this.status = status;
+  }                               
+
+  public Long getRightType() {
+    return rightType;
+  }
+
+  public void setRightType(Long rightType) {
+    this.rightType = rightType;
+  }
+
+  public String getItemId() {
+    return this.itemId;
+  }
+
+  public void setItemId(String itemId) {
+    this.itemId = itemId;
+  }
+  
+  public String getItemType() {
+	  if(this.itemType.equals("User")){
+		  return "@person";
+	  }else{
+		  return "@space";
+	  }
+  }
+
+  public void setItemType(String itemType) {
+    this.itemType = itemType;
+  }
+    
+  public String getId() {
+    return id;
+  }
+
+  public void setId(String id) {
+    this.id = id;
+  }
+
+  public boolean getIsOwner() {
+    return isOwner;
+  }
+
+  public void setIsOwner(boolean isOwner) {
+    this.isOwner = isOwner;
+  }
+
+  // Proxied fields
+
+
+
+  private <T extends ListField> T getListFieldWithType(String type, List<T> list) {
+    if (list != null) {
+      for (T url : list) {
+        if (type.equalsIgnoreCase(url.getType())) {
+          return url;
+        }
+      }
+    }
+
+    return null;
+  }
+
+  private <T extends ListField> List<T> addListField(T field, List<T> list) {
+    if (list == null) {
+      list = Lists.newArrayList();
+    }
+    list.add(field);
+    return list;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return Long.parseLong(id);
+  }
+
+  @PrePersist
+  public void populateDbFields() {
+
+
+  }
+
+  @PostLoad
+  public void loadTransientFields() {
+
+
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonAccountDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonAccountDb.java
new file mode 100644
index 0000000..a18390e
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonAccountDb.java
@@ -0,0 +1,98 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.social.core.model.AccountDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.DiscriminatorValue;
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+
+/**
+ * This object connects to a single account to a person, defining the relationship
+ * between the person and the account. It extends the account object, which stored its instances in
+ * the 'account' table by storing instances of this class in the 'person_account table. Records 
+ * are joined using oid, and use the same shared account discriminator.
+ */
+@Entity
+@Table(name="person_account")
+@DiscriminatorValue("sharedaccount")
+public class PersonAccountDb extends AccountDb {
+  @Basic
+  @Column(name="primary_account")
+  private Boolean primary;
+  
+  /**
+   * The person connected the account
+   */
+  // @ManyToOne(targetEntity=UserDb.class)
+  // @JoinColumn(name="person_id", referencedColumnName="oid")
+  @Transient
+  private Person person;
+  
+  @Basic
+  @Column(name="type", length=255)
+  private String type;
+
+
+  public PersonAccountDb() {
+  }
+
+
+  public String getType() {
+    return type;
+  }
+
+  public void setType(String type) {
+    this.type = type;
+  }
+
+
+  public Boolean getPrimary() {
+    return primary;
+  }
+
+  public void setPrimary(Boolean primary) {
+    this.primary = primary;
+  }
+
+
+  /**
+   * @return the person
+   */
+  public Person getPerson() {
+    return person;
+  }
+
+
+  /**
+   * @param person the person to set
+   */
+  public void setPerson(Person person) {
+    this.person = person;
+  }
+
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonAddressDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonAddressDb.java
new file mode 100644
index 0000000..059c740
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonAddressDb.java
@@ -0,0 +1,98 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.social.core.model.AddressDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.DiscriminatorValue;
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+
+/**
+ *
+ */
+/*
+ * This object connects to a single Address, and to a single organization, 
+ * defining the organizations relationship with the address
+ */
+@Entity
+@Table(name="person_addresses")
+@DiscriminatorValue(value="sharedaddress")
+public class PersonAddressDb extends AddressDb {
+  // @Basic
+  // @Column(name="primary_address")
+  @Transient
+  private Boolean primary;
+  
+  @ManyToOne(targetEntity=UserDb.class)
+  @JoinColumn(name="user_id", referencedColumnName="id")
+  private Person person;
+  
+  // @Basic
+  // @Column(name="type", length=255)
+  @Transient
+  private String type;
+
+
+  public PersonAddressDb() {
+    // TODO Auto-generated constructor stub
+  }
+
+
+  public String getType() {
+    return type;
+  }
+
+  public void setType(String type) {
+    this.type = type;
+  }
+
+
+  public Boolean getPrimary() {
+    return primary;
+  }
+
+  public void setPrimary(Boolean primary) {
+    this.primary = primary;
+  }
+
+
+  /**
+   * @return the person
+   */
+  public Person getPerson() {
+    return null;
+  }
+
+
+  /**
+   * @param person the person to set
+   */
+  public void setPerson(Person person) {
+    this.person = person;
+  }
+
+
+}

diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonOrganizationDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonOrganizationDb.java
new file mode 100644
index 0000000..17ef5c7
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonOrganizationDb.java
@@ -0,0 +1,83 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.social.core.model.OrganizationDb;
+import org.apache.shindig.social.core.model.PersonOrganizationDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.DiscriminatorValue;
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.NamedQuery;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+
+/**
+ * 
+ */
+/*
+ * This object connects to a single Address, and to a single organization, defining the
+ * organizations relationship with the address
+ */
+@Entity
+@Table(name = "person_organization")
+@DiscriminatorValue("shared")
+@NamedQuery(name = PersonOrganizationDb.PERSON_ORG_FINDBY_NAME, 
+    query = "select p from PersonOrganizationDb p where p.name = :name ")
+public class PersonOrganizationDb extends OrganizationDb {
+  public static final String PERSON_ORG_FINDBY_NAME = "q.personorganizationdb.findbyname";
+
+  @Basic
+  @Column(name = "primary_organization")
+  private Boolean primary;
+
+  // @ManyToOne(targetEntity = UserDb.class)
+  // @JoinColumn(name = "person_id", referencedColumnName = "oid")
+  @Transient
+  protected Person person;
+
+  @Basic
+  @Column(name = "type", length = 255)
+  private String type;
+
+  public PersonOrganizationDb() {
+    // TODO Auto-generated constructor stub
+  }
+
+  public String getType() {
+    return type;
+  }
+
+  public void setType(String type) {
+    this.type = type;
+  }
+
+  public Boolean getPrimary() {
+    return primary;
+  }
+
+  public void setPrimary(Boolean primary) {
+    this.primary = primary;
+  }
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonPropertyDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonPropertyDb.java
new file mode 100644
index 0000000..14a7e17
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PersonPropertyDb.java
@@ -0,0 +1,47 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.social.core.model.ListFieldDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.PrimaryKeyJoinColumn;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+
+/**
+ * A property, associated with a person, extends the "list_field" table, 
+ * and sets the "list_field_type" to PersonPropertiesDb.
+ */
+@Entity
+@Table(name="person_properties")
+@PrimaryKeyJoinColumn(name="oid")
+public class PersonPropertyDb extends ListFieldDb {
+
+  /**
+   * The person who this property is associated with.
+   */
+  // @ManyToOne(targetEntity=UserDb.class)
+  // @JoinColumn(name="person_id", referencedColumnName="oid")
+  @Transient
+  protected Person person;
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/PhoneDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PhoneDb.java
new file mode 100644
index 0000000..f4da4e5
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PhoneDb.java
@@ -0,0 +1,61 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.social.core.model.ListFieldDb;
+import org.apache.shindig.social.core.model.PhoneDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.NamedQuery;
+import javax.persistence.PrimaryKeyJoinColumn;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+
+/**
+ * Phone Entity, extends the ListField object (and list_field table), joining on the object ID.
+ * Objects of this type will have "list_field_type" set to PhoneDb in list_field
+ */
+@Entity
+@Table(name = "phone")
+@PrimaryKeyJoinColumn(name = "oid")
+@NamedQuery(name = PhoneDb.FINDBY_PHONE_NUMBER, 
+    query = "select p from PhoneDb p where p.value = :phonenumber ")
+public class PhoneDb extends ListFieldDb {
+
+  /**
+   * The name of the JPA query to find phone numbers by phone number (bit odd)
+   */
+  public static final String FINDBY_PHONE_NUMBER = "q.pphone.findbynumber";
+  /**
+   * The name of the phone number parameter in JPA queries
+   */
+  public static final String PARAM_PHONE_NUMBER = "phonenumber";
+  
+  /**
+   * The person who is associated with this phone number.
+   */
+  // @ManyToOne(targetEntity = UserDb.class)
+  // @JoinColumn(name = "person_id", referencedColumnName = "oid")
+  @Transient
+  protected Person person;
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/PhotoDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PhotoDb.java
new file mode 100644
index 0000000..401816a
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/PhotoDb.java
@@ -0,0 +1,61 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.social.core.model.ListFieldDb;
+import org.apache.shindig.social.core.model.PhotoDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Person;
+
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.NamedQuery;
+import javax.persistence.PrimaryKeyJoinColumn;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+
+/**
+ * Photo Entity, extends the ListField object (and list_field table), joining on the object ID.
+ * Objects of this type will have "list_field_type" set to PhotoDb in list_field
+ */
+@Entity
+@Table(name="photo")
+@PrimaryKeyJoinColumn(name="oid")
+@NamedQuery(name = PhotoDb.FINDBY_PHOTO, 
+    query = "select p from PhotoDb p where p.value = :photo ")
+public class PhotoDb extends ListFieldDb {
+  
+  /**
+   * The name of the JPA query to find phone numbers by phone number (bit odd)
+   */
+  public static final String FINDBY_PHOTO = "q.pphoto.findbyphoto";
+  /**
+   * The name of the phone number parameter in JPA queries
+   */
+  public static final String PARAM_PHOTO = "photo";
+
+  /**
+   * The person who is using this photo.
+   */
+  // @ManyToOne(targetEntity=UserDb.class)
+  // @JoinColumn(name="person_id", referencedColumnName="oid")
+  @Transient
+  protected Person person;
+
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/SpaceDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/SpaceDb.java
new file mode 100644
index 0000000..a540aae
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/SpaceDb.java
@@ -0,0 +1,596 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.CascadeType.ALL;
+import static javax.persistence.CascadeType.MERGE;
+import static javax.persistence.CascadeType.PERSIST;
+import static javax.persistence.CascadeType.REFRESH;
+import static javax.persistence.GenerationType.IDENTITY;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
+import org.apache.shindig.protocol.model.Enum;
+import org.apache.shindig.protocol.model.FilterOperation;
+import org.apache.shindig.social.opensocial.model.Account;
+import org.apache.shindig.social.opensocial.model.Address;
+import org.apache.shindig.social.opensocial.model.BodyType;
+import org.apache.shindig.social.opensocial.model.Drinker;
+import org.apache.shindig.social.opensocial.model.ListField;
+import org.apache.shindig.social.opensocial.model.LookingFor;
+import org.apache.shindig.social.opensocial.model.Name;
+import org.apache.shindig.social.opensocial.model.NetworkPresence;
+import org.apache.shindig.social.opensocial.model.Organization;
+import org.apache.shindig.social.opensocial.model.Person;
+import org.apache.shindig.social.opensocial.model.Space;
+import org.apache.shindig.social.opensocial.model.Smoker;
+import org.apache.shindig.social.opensocial.model.Url;
+
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.ArrayList;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.JoinTable;
+import javax.persistence.ManyToMany;
+import javax.persistence.ManyToOne;
+import javax.persistence.NamedQueries;
+import javax.persistence.NamedQuery;
+import javax.persistence.OneToMany;
+import javax.persistence.PostLoad;
+import javax.persistence.PrePersist;
+import javax.persistence.Table;
+import javax.persistence.Temporal;
+import javax.persistence.TemporalType;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+
+import com.google.inject.name.Named;
+import com.google.inject.Inject;
+
+/**
+ * Default Implementation of the Person object in the org.apache.shindig.graasp.jpa.
+ */
+@Entity
+@Table(name = "spaces")
+@NamedQueries(value = {
+    @NamedQuery(name = SpaceDb.FINDBY_SPACEID,
+        query = "select s from SpaceDb s where s.id = :id "),
+    @NamedQuery(name = SpaceDb.FINDBY_LIKE_SPACEID,
+        query = "select s from SpaceDb s where s.id like :id") })
+public class SpaceDb implements Space, DbObject {
+
+  public static final String GRAASP_URL = System.getProperty("shindig.container_url");
+
+  public static final String FINDBY_SPACEID = "q.space.findbyspaceid";
+
+  public static final String PARAM_SPACEID = "id";
+
+  public static final String FINDBY_LIKE_SPACEID = "q.space.findbylikespaceid";
+
+  private static final String INTERESTS_PROPERTY = "interest";
+
+
+  private static final Map<String, FilterSpecification> FILTER_COLUMNS =
+    new HashMap<String, FilterSpecification>();
+
+  private static final FilterOperation[] ALL_FILTEROPTIONS = new FilterOperation[] {
+      FilterOperation.equals, FilterOperation.contains, FilterOperation.present,
+      FilterOperation.startsWith };
+  private static final FilterOperation[] NUMERIC_FILTEROPTIONS = new FilterOperation[] {
+      FilterOperation.equals, FilterOperation.present };
+  @SuppressWarnings("unused")
+  private static final FilterOperation[] EQUALS_FILTEROPTIONS =
+    new FilterOperation[] { FilterOperation.equals };
+
+  static {
+    FILTER_COLUMNS.put("displayName", new FilterSpecification("displayName", ALL_FILTEROPTIONS));
+
+    // the following are special operations which are accepted, but work differently
+    FILTER_COLUMNS.put("topFriends", new FilterSpecification());
+    FILTER_COLUMNS.put("hasApp", new FilterSpecification());
+  }
+
+  private static final FilterCapability FILTER_CAPABILITY = new FilterCapability() {
+    /**
+     * {@inheritDoc}
+     */
+    public String findFilterableProperty(String fieldName, FilterOperation filterOperation) {
+      FilterSpecification spec = FILTER_COLUMNS.get(fieldName);
+      if (spec != null) {
+        return spec.translateProperty(filterOperation);
+      }
+      return null;
+    }
+
+  };
+
+  public static final String JPQL_FINDALLPERSON = null;
+
+  // TODO The commented out query supports sorting by friend.score but needs a join with FriendDb which returns duplicates.
+  // Using 'group by' to avoid duplicates doesn't work in HSQLDB or Derby - causes a "Not in aggregate function or group by clause" jdbc exception.
+  // public static final String JPQL_FINDPERSON_BY_FRIENDS = "select p from PersonDb p join FriendDb f on p.objectId = f.friend.objectId where p.objectId in (select f.friend.objectId from PersonDb p, FriendDb f where p.objectId = f.person.objectId and ";
+  public static final String JPQL_FINDPERSON_BY_FRIENDS = "select p from PersonDb p where p.objectId in (select f.friend.objectId from PersonDb p, FriendDb f where p.objectId = f.person.objectId and ";
+
+  public static final Object JPQL_FINDPERSON_BY_GROUP = null;
+
+  public static final Object JPQL_FINDSPACE = "select s from SpaceDb s where ";
+  public static final Object JPQL_FINDSPACES = "select s from SpaceDb s where ";
+  
+  public static final String JPQL_ALL_PUBLIC_SPACES = "select s.objectId from SpaceDb s where s.visibilityLevel = 1 or s.visibilityLevel = 2";
+
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "id")
+  private long objectId;
+  
+  /**
+   * The internal parentId and parentType used for references to the parent of a space.
+   */
+  @Basic
+  @Column(name = "parent_id", length = 255)
+  private String parentId;
+  
+  @Basic
+  @Column(name = "parent_type", length = 255)
+  protected String parentType;
+
+  /**
+   * An optimistic locking field.
+   */
+
+  @Transient
+  protected List<Address> addresses;
+  
+  @Transient
+  protected String location;
+
+  @Basic
+  @Column(name = "name", length = 255)
+  private String displayName;
+
+  @Basic
+  @Column(name = "name", length = 255, insertable = false, updatable = false)
+  private String name;
+  
+  @Basic
+  @Column(name = "picture")
+  protected String picture;
+  
+  
+  /**
+   *
+   */
+  @Transient
+  protected List<ListField> emails;
+
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "description", length = 255)
+  protected String description;
+  
+  @Basic
+  @Column(name = "visibility_level", length = 11)
+  protected int visibilityLevel; 
+  
+  @Transient
+  protected List<String> allVisibilityLevels;
+
+  /**
+   *
+   */
+  @Transient
+  protected Boolean hasApp;
+
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "id", length = 255, insertable = false, updatable = false)
+  protected String id;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<ListField> ims;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> interests;
+
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "updated_at")
+  @Temporal(TemporalType.TIMESTAMP)
+  protected Date updated;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<ListField> phoneNumbers;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<ListField> images;
+  
+  /**
+   *
+   */
+  @Transient
+  protected String status;
+
+  /**
+   *
+   */
+  @Transient
+  protected Long utcOffset;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<Url> urls;
+
+  // Note: Not in the opensocial js person object directly
+  @Transient
+  private boolean isOwner = false;
+
+  public SpaceDb() {
+  }
+
+  public SpaceDb(String id, String displayName) {
+    this.id = id;
+    this.displayName = displayName;
+  }
+
+  public List<Address> getAddresses() {
+    return addresses;
+  }
+
+  public void setAddresses(List<Address> addresses) {
+    this.addresses = addresses;
+  }
+
+  public List<ListField> getEmails() {
+    return emails;
+  }
+
+  public void setEmails(List<ListField> emails) {
+    this.emails = emails;
+  }
+
+  public Boolean getHasApp() {
+    return hasApp;
+  }
+
+  public void setHasApp(Boolean hasApp) {
+    this.hasApp = hasApp;
+  }
+
+  public String getParentId() {
+    return this.parentId;
+  }
+
+  public void setParentId(String parentId) {
+    this.parentId = parentId;
+  }
+  
+  public String getParentType() {
+	  if(this.parentType.equals("User")){
+		  return "@person";
+	  }else{
+		  return "@space";
+	  }
+  }
+
+  public void setParentType(String parentType) {
+    this.parentType = parentType;
+  }
+
+  public String getLocation() {
+    return this.location;
+  }
+
+  public void setLocation(String location) {
+    this.location = location;
+  }
+  
+  public String getName() {
+    return this.name;
+  }
+
+  public void setName(String name) {
+    this.name = name;
+  }
+
+  
+  public String getId() {
+    return id;
+  }
+
+  public void setId(String id) {
+    this.id = id;
+  }
+
+  public List<ListField> getIms() {
+    return ims;
+  }
+
+  public void setIms(List<ListField> ims) {
+    this.ims = ims;
+  }
+
+  public List<String> getInterests() {
+    return interests;
+  }
+
+  public void setInterests(List<String> interests) {
+    this.interests = interests;
+  }
+
+  public Date getUpdated() {
+    if (updated == null) {
+      return null;
+    }
+    return new Date(updated.getTime());
+  }
+
+  public void setUpdated(Date updated) {
+    if (updated == null) {
+      this.updated = null;
+    } else {
+      this.updated = new Date(updated.getTime());
+    }
+  }
+
+  public List<ListField> getPhoneNumbers() {
+    return phoneNumbers;
+  }
+
+  public void setPhoneNumbers(List<ListField> phoneNumbers) {
+    this.phoneNumbers = phoneNumbers;
+  }
+
+  public List<ListField> getImages() {
+    return images;
+  }
+
+  public void setImages(List<ListField> images) {
+    this.images = images;
+  }
+
+  public String getDescription() {
+    return description;
+  }
+
+  public void setDescription(String description) {
+    this.description = description;
+  }
+  
+  public List<String> getAllVisibilityLevels() {
+    return allVisibilityLevels;
+  }
+  
+  public String getVisibilityLevel() {
+    return decodeVisibility(visibilityLevel);
+  }
+
+  public void setVisibilityLevel(String visibilityLevel) {
+    this.visibilityLevel = encodeVisibility(visibilityLevel);
+  }
+  
+  public String decodeVisibility(int visibilityLevel){
+    if(visibilityLevel == 1){
+      return "Everyone";
+    }
+    else if(visibilityLevel == 2){
+      return "Space members";
+    }
+    else{
+      return "Myself";  
+    }
+  }
+  
+  public int encodeVisibility(String visibilityStr){
+    if(visibilityStr == "Everyone"){
+      return 1;
+    }
+    else if(visibilityStr == "Space members"){
+      return 2;
+    }
+    else{
+      return 3;
+    }
+  }
+
+  
+  public String getStatus() {
+    return status;
+  }
+
+  public void setStatus(String status) {
+    this.status = status;
+  }
+
+  public Long getUtcOffset() {
+    return utcOffset;
+  }
+
+  public void setUtcOffset(Long utcOffset) {
+    this.utcOffset = utcOffset;
+  }
+
+  public List<Url> getUrls() {
+    return urls;
+  }
+
+  public void setUrls(List<Url> urls) {
+    this.urls = urls;
+  }
+
+  public boolean getIsOwner() {
+    return isOwner;
+  }
+
+  public void setIsOwner(boolean isOwner) {
+    this.isOwner = isOwner;
+  }
+
+  // Proxied fields
+
+  public String getProfileUrl() {
+    return GRAASP_URL+"/#item=space_"+String.valueOf(objectId);  
+  }
+
+  public void setProfileUrl(String profileUrl) {
+    Url url = getListFieldWithType(PROFILE_URL_TYPE, getUrls());
+    if (url != null) {
+      url.setValue(profileUrl);
+    } else {
+      setUrls(addListField(new UrlDb(profileUrl, null, PROFILE_URL_TYPE), getUrls()));
+    }
+  }
+
+  public String getThumbnailUrl() {
+    String pic = picture;
+    if (pic == null || pic.equals("")) {
+      return GRAASP_URL+"/images/pics/space_thumb.png";
+    }
+    
+    return GRAASP_URL+"/space/picture/"+String.valueOf(objectId)+"/thumb/"+pic;        
+  }
+
+  public void setThumbnailUrl(String thumbnailUrl) {
+    ListField photo = getListFieldWithType(THUMBNAIL_PHOTO_TYPE, getImages());
+    if (photo != null) {
+      photo.setValue(thumbnailUrl);
+    } else {
+      setImages(addListField(new ListFieldDb(THUMBNAIL_PHOTO_TYPE, thumbnailUrl), getImages()));
+    }
+  }
+
+  private <T extends ListField> T getListFieldWithType(String type, List<T> list) {
+    if (list != null) {
+      for (T url : list) {
+        if (type.equalsIgnoreCase(url.getType())) {
+          return url;
+        }
+      }
+    }
+
+    return null;
+  }
+
+  private <T extends ListField> List<T> addListField(T field, List<T> list) {
+    if (list == null) {
+      list = Lists.newArrayList();
+    }
+    list.add(field);
+    return list;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return Long.parseLong(id);
+  }
+
+  @PrePersist
+  public void populateDbFields() {
+
+    Map<String, List<String>> toSave = new HashMap<String, List<String>>();
+    toSave.put(INTERESTS_PROPERTY, this.interests);
+
+  }
+
+  @PostLoad
+  public void loadTransientFields() {
+
+
+    List<String> lookingFor = Lists.newArrayList();
+    this.interests = Lists.newArrayList();
+
+    Map<String, List<String>> toSave = Maps.newHashMap();
+
+    toSave.put(INTERESTS_PROPERTY, this.interests);
+    
+    this.allVisibilityLevels = new ArrayList<String>();
+    allVisibilityLevels.add("Everyone");
+    allVisibilityLevels.add("Space members");
+    allVisibilityLevels.add("Myself");
+
+  }
+
+  /*
+   * (non-Javadoc)
+   *
+   * @see org.apache.shindig.social.opensocial.model.Person#getDisplayName()
+   */
+  public String getDisplayName() {
+    return displayName;
+  }
+
+  /*
+   * (non-Javadoc)
+   *
+   * @see org.apache.shindig.social.opensocial.model.Person#setDisplayName(java.lang.String)
+   */
+  public void setDisplayName(String displayName) {
+    this.displayName = displayName;
+  }
+
+  public static FilterCapability getFilterCapability() {
+    return FILTER_CAPABILITY;
+
+  }
+
+  /** {@inheritDoc} */
+  public Map<String, ? extends Object> getAppData()
+  {
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public void setAppData( Map<String, ? extends Object> appData )
+  {
+  }
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/UrlDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/UrlDb.java
new file mode 100644
index 0000000..b6681a1
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/UrlDb.java
@@ -0,0 +1,76 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import org.apache.shindig.social.core.model.ListFieldDb;
+import org.apache.shindig.social.core.model.UrlDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Person;
+import org.apache.shindig.social.opensocial.model.Url;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.NamedQuery;
+import javax.persistence.PrimaryKeyJoinColumn;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+
+/**
+ * Url Entity, extends the ListField object (and list_field table), joining on the object ID.
+ * Objects of this type will have "list_field_type" set to UrlDb in list_field
+ */
+@Entity
+@Table(name = "url")
+@PrimaryKeyJoinColumn(name = "oid")
+@NamedQuery(name = UrlDb.FINDBY_URL, query = "select u from UrlDb u where u.value = :url ")
+public class UrlDb extends ListFieldDb implements Url {
+  public static final String FINDBY_URL = "q.url.findbyurl";
+
+  public static final String PARAM_URL = "url";
+
+  @Basic
+  @Column(name = "link_text")
+  private String linkText;
+
+  /**
+   * The person who is using this url.
+   */
+  // @ManyToOne(targetEntity = UserDb.class)
+  // @JoinColumn(name = "person_id", referencedColumnName = "oid")
+  @Transient
+  protected Person person;
+
+  public UrlDb() {
+  }
+
+  public UrlDb(String value, String linkText, String type) {
+    super(type, value);
+    this.linkText = linkText;
+  }
+
+  public String getLinkText() {
+    return linkText;
+  }
+
+  public void setLinkText(String linkText) {
+    this.linkText = linkText;
+  }
+}

diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/UserDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/UserDb.java
new file mode 100644
index 0000000..8b248fb
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/UserDb.java
@@ -0,0 +1,1449 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.CascadeType.ALL;
+import static javax.persistence.CascadeType.MERGE;
+import static javax.persistence.CascadeType.PERSIST;
+import static javax.persistence.CascadeType.REFRESH;
+import static javax.persistence.GenerationType.IDENTITY;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
+import org.apache.shindig.protocol.model.Enum;
+import org.apache.shindig.protocol.model.FilterOperation;
+import org.apache.shindig.social.core.model.EnumDb;
+import org.apache.shindig.social.core.model.AddressDb;
+import org.apache.shindig.social.core.model.AppDb;
+import org.apache.shindig.social.core.model.BodyTypeDb;
+import org.apache.shindig.social.core.model.EmailDb;
+import org.apache.shindig.social.core.model.ImDb;
+import org.apache.shindig.social.core.model.ListFieldDb;
+import org.apache.shindig.social.core.model.NameDb;
+import org.apache.shindig.social.core.model.PermissionDb;
+import org.apache.shindig.social.core.model.PersonAccountDb;
+import org.apache.shindig.social.core.model.PersonAddressDb;
+import org.apache.shindig.social.core.model.PersonOrganizationDb;
+import org.apache.shindig.social.core.model.PersonPropertyDb;
+import org.apache.shindig.social.core.model.PhoneDb;
+import org.apache.shindig.social.core.model.PhotoDb;
+import org.apache.shindig.social.core.model.UrlDb;
+import org.apache.shindig.social.core.model.UserDb;
+import org.apache.shindig.social.opensocial.model.Account;
+import org.apache.shindig.social.opensocial.model.Address;
+import org.apache.shindig.social.opensocial.model.Competence;
+import org.apache.shindig.social.opensocial.model.BodyType;
+import org.apache.shindig.social.opensocial.model.Drinker;
+import org.apache.shindig.social.opensocial.model.ListField;
+import org.apache.shindig.social.opensocial.model.LookingFor;
+import org.apache.shindig.social.opensocial.model.Name;
+import org.apache.shindig.social.opensocial.model.NetworkPresence;
+import org.apache.shindig.social.opensocial.model.Organization;
+import org.apache.shindig.social.opensocial.model.Person;
+import org.apache.shindig.social.opensocial.model.Smoker;
+import org.apache.shindig.social.opensocial.model.Url;
+
+import org.apache.commons.beanutils.BeanUtils;
+
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.JoinTable;
+import javax.persistence.ManyToMany;
+import javax.persistence.ManyToOne;
+import javax.persistence.NamedQueries;
+import javax.persistence.NamedQuery;
+import javax.persistence.OneToMany;
+import javax.persistence.PostLoad;
+import javax.persistence.PrePersist;
+import javax.persistence.Table;
+import javax.persistence.Temporal;
+import javax.persistence.TemporalType;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+
+import com.google.inject.name.Named;
+import com.google.inject.Inject;
+
+/**
+ * Default Implementation of the Person object in the org.apache.shindig.graaasp.jpa.
+ */
+@Entity
+@Table(name = "users")
+@NamedQueries(value = {
+    @NamedQuery(name = UserDb.FINDBY_USERID,
+        query = "select a from UserDb a where a.id = :id "),
+    @NamedQuery(name = UserDb.FINDBY_LIKE_USERID,
+        query = "select a from UserDb a where a.id like :id") })
+public class UserDb implements Person, DbObject {
+
+  public static final String GRAASP_URL = System.getProperty("shindig.container_url");
+
+  public static final String FINDBY_USERID = "q.user.findbyuserid";
+
+  public static final String PARAM_USERID = "id";
+
+  public static final String FINDBY_LIKE_USERID = "q.user.findbylikeuserid";
+
+  private static final String LOOKING_FOR_PROPERTY = "looking-for";
+
+  private static final String ACTIVITIES_PROPERTY = "activity";
+
+  private static final String BOOKS_PROPERTY = "book";
+
+  private static final String CARS_PROPERTY = "car";
+
+  private static final String HEROES_PROPERTY = "hero";
+
+  private static final String INTERESTS_PROPERTY = "interest";
+
+  private static final String LANGUAGES_PROPERTY = "language";
+
+  private static final String MOVIES_PROPERTY = "movie";
+
+  private static final String MUSIC_PROPERTY = "music";
+
+  private static final String FOOD_PROPERTY = "food";
+
+  private static final String QUOTES_PROPERTY = "quotes";
+
+  private static final String SPORTS_PROPERTY = "sport";
+
+  private static final String TAGS_PROPERTY = "tag";
+
+  private static final String TURNOFFS_PROPERTY = "turnoff";
+
+  private static final String TURNONS_PROPERTY = "turnon";
+
+  private static final String TVSHOWS_PROPERTY = "tvshow";
+
+  private static final Map<String, FilterSpecification> FILTER_COLUMNS =
+    new HashMap<String, FilterSpecification>();
+
+  private static final FilterOperation[] ALL_FILTEROPTIONS = new FilterOperation[] {
+      FilterOperation.equals, FilterOperation.contains, FilterOperation.present,
+      FilterOperation.startsWith };
+  private static final FilterOperation[] NUMERIC_FILTEROPTIONS = new FilterOperation[] {
+      FilterOperation.equals, FilterOperation.present };
+  @SuppressWarnings("unused")
+  private static final FilterOperation[] EQUALS_FILTEROPTIONS =
+    new FilterOperation[] { FilterOperation.equals };
+
+  static {
+    FILTER_COLUMNS.put("aboutMe", new FilterSpecification("aboutMe", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("age", new FilterSpecification("age", NUMERIC_FILTEROPTIONS));
+    FILTER_COLUMNS.put("birthday", new FilterSpecification("birthday", NUMERIC_FILTEROPTIONS));
+    FILTER_COLUMNS.put("children", new FilterSpecification("children", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("displayName", new FilterSpecification("displayName", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("drinker", new FilterSpecification("drinkerDb", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("ethnicity", new FilterSpecification("ethnicity", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("fashion", new FilterSpecification("fashion", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("gender", new FilterSpecification("gender", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("happiestWhen", new FilterSpecification("happiestWhen", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("humor", new FilterSpecification("humor", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("jobInterests", new FilterSpecification("jobInterests", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("livingArrangement", new FilterSpecification("livingArrangement",
+        ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("movies", new FilterSpecification("movies", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("networkPresenceDb", new FilterSpecification("networkPresenceDb",
+        ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("nickname", new FilterSpecification("nickname", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("pets", new FilterSpecification("pets", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("politicalViews", new FilterSpecification("politicalViews",
+        ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("relationshipStatus", new FilterSpecification("relationshipStatus",
+        ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("religion", new FilterSpecification("religion", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("romance", new FilterSpecification("romance", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("scaredOf", new FilterSpecification("scaredOf", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("sexualOrientation", new FilterSpecification("sexualOrientation",
+        ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("smokerDb", new FilterSpecification("smokerDb", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("status", new FilterSpecification("status", ALL_FILTEROPTIONS));
+    FILTER_COLUMNS.put("utcOffset", new FilterSpecification("utcOffset", NUMERIC_FILTEROPTIONS));
+
+    // the following are special operations which are accepted, but work differently
+    FILTER_COLUMNS.put("topFriends", new FilterSpecification());
+    FILTER_COLUMNS.put("hasApp", new FilterSpecification());
+  }
+
+  private static final FilterCapability FILTER_CAPABILITY = new FilterCapability() {
+    /**
+     * {@inheritDoc}
+     */
+    public String findFilterableProperty(String fieldName, FilterOperation filterOperation) {
+      FilterSpecification spec = FILTER_COLUMNS.get(fieldName);
+      if (spec != null) {
+        return spec.translateProperty(filterOperation);
+      }
+      return null;
+    }
+
+  };
+
+  public static final String JPQL_FINDALLPERSON = null;
+
+  // TODO The commented out query supports sorting by friend.score but needs a join with FriendDb which returns duplicates.
+  // Using 'group by' to avoid duplicates doesn't work in HSQLDB or Derby - causes a "Not in aggregate function or group by clause" jdbc exception.
+  // public static final String JPQL_FINDPERSON_BY_FRIENDS = "select p from UserDb p join FriendDb f on p.objectId = f.friend.objectId where p.objectId in (select f.friend.objectId from UserDb p, FriendDb f where p.objectId = f.person.objectId and ";
+  public static final String JPQL_FINDPERSON_BY_FRIENDS = "select p from UserDb p where p.objectId in (select f.friend.objectId from UserDb p, FriendDb f where p.objectId = f.person.objectId and ";
+  public static final String JPQL_FINDPERSON_BY_PERMISSIONS = "select a from UserDb a where a.id in (select p.userId from PermissionDb p where p.status = 'joined' and ";
+  public static final String JPQL_PERMISSIONS = "select p.userId from PermissionDb p where p.status = 'joined' and ";
+  public static final String JPQL_ALL_PUBLIC_PEOPLE = "select u.objectId from UserDb u where u.visibilityLevel = 1";
+
+  public static final Object JPQL_FINDPERSON_BY_GROUP = null;
+
+  public static final Object JPQL_FINDPERSON = "select p from UserDb p where ";
+
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "id")
+  private long objectId;
+
+  /**
+   * An optimistic locking field.
+   */
+  // @Version
+  // @Column(name = "version")
+  @Transient
+  protected long version;
+
+  @Basic
+  @Column(name = "description", length = 255)
+  protected String aboutMe;
+  
+  @Basic
+  @Column(name = "visibility_level", length = 11)
+  protected int visibilityLevel;
+
+  // @OneToMany(targetEntity = PersonPropertyDb.class, mappedBy = "person", cascade = ALL)
+  @Transient
+  protected List<PersonPropertyDb> properties = Lists.newArrayList();
+
+  // @OneToMany(targetEntity = PersonAccountDb.class, mappedBy = "person", cascade = ALL)
+  @Transient
+  protected List<Account> accounts;
+
+  @Transient
+  protected List<String> activities;
+
+  // @Transient
+  @OneToMany(targetEntity = PersonAddressDb.class, mappedBy = "person", cascade = ALL)
+  protected List<Address> addresses;
+    
+  // @Basic
+  // @Column(name = "competences")
+  // @Transient
+  @OneToMany(targetEntity = CompetenceDb.class, mappedBy = "person", cascade = ALL)
+  protected List<Competence> competences;
+  
+  // @Basic
+  // @Column(name = "age")
+  @Transient
+  protected Integer age;
+
+  // @ManyToOne(targetEntity = BodyTypeDb.class, cascade = ALL)
+  // @JoinColumn(name = "body_type_id", referencedColumnName = "id")
+  @Transient
+  protected BodyType bodyType;
+
+  @Transient
+  protected List<String> books;
+
+  @Transient
+  protected List<String> cars;
+
+  // @Basic
+  // @Column(name = "children", length = 255)
+  @Transient
+  protected String children;
+
+  /**
+   *
+   */
+  // @ManyToOne(targetEntity = AddressDb.class, cascade = { PERSIST, MERGE, REFRESH })
+  // @JoinColumn(name = "address_id", referencedColumnName = "id")
+  @Transient
+  protected Address currentLocation;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "birthday")
+  // @Temporal(TemporalType.DATE)
+  @Transient
+  protected Date birthday;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "drinker", length = 255)
+  @Transient
+  protected String drinkerDb;
+
+  @Transient
+  protected Enum<Drinker> drinker;
+
+  @Basic
+  @Column(name = "name", length = 255)
+  private String displayName;
+  
+  @Basic
+  @Column(name = "picture")
+  protected String picture;
+
+  /**
+   *
+   */
+  // @Transient
+  // @Basic
+  // @Column(name = "emails")  
+  @OneToMany(targetEntity = EmailDb.class, mappedBy = "person", cascade = ALL)
+  protected List<ListField> emails;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "ethnicity", length = 255)
+  @Transient
+  protected String ethnicity;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "fashion", length = 255)
+  @Transient
+  protected String fashion;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> food;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "gender", length = 255)
+  @Transient
+  protected String genderDb;
+
+  @Transient
+  protected Gender gender;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "happiest_when", length = 255)
+  @Transient
+  protected String happiestWhen;
+
+  /**
+   *
+   */
+  @Transient
+  protected Boolean hasApp;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> heroes;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "humor", length = 255)
+  @Transient
+  protected String humor;
+
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "id", length = 255, insertable = false, updatable = false)
+  protected String id;
+
+  /**
+   *
+   */
+  // @OneToMany(targetEntity = ImDb.class, mappedBy = "person", cascade = ALL)
+  @Transient
+  protected List<ListField> ims;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> interests;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "job_interests", length = 255)
+  @Transient
+  protected String jobInterests;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> languagesSpoken;
+
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "updated_at")
+  @Temporal(TemporalType.TIMESTAMP)
+  protected Date updated;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "living_arrangement", length = 255)
+  @Transient
+  protected String livingArrangement;
+
+  /**
+   *
+   */
+  @Transient
+  // stored as a property, processed on get,set
+  protected List<Enum<LookingFor>> lookingFor;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> movies;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> music;
+
+  /**
+   *
+   */
+  // @Transient
+  @ManyToOne(targetEntity = NameDb.class, cascade = ALL)
+  @JoinColumn(name = "name_id", referencedColumnName = "id")
+  protected Name name;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "network_presence", length = 255)
+  @Transient
+  protected String networkPresenceDb;
+
+  @Transient
+  protected Enum<NetworkPresence> networkPresence = new EnumDb<NetworkPresence>(
+      NetworkPresence.XA);
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "nickname", length = 255)
+  @Transient
+  protected String nickname;
+
+  /**
+   *
+   */
+  // @OneToMany(targetEntity = PersonOrganizationDb.class, mappedBy = "person", cascade = { PERSIST,
+  //     MERGE, REFRESH })
+  @Transient
+  protected List<Organization> organizations;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "pets", length = 255)
+  @Transient
+  protected String pets;
+
+  /**
+   *
+   */
+  // @OneToMany(targetEntity = PhoneDb.class, mappedBy = "person", cascade = ALL)
+  @Transient
+  protected List<ListField> phoneNumbers;
+
+  /**
+   *
+   */
+  // @OneToMany(targetEntity = PhotoDb.class, mappedBy = "person", cascade = ALL)
+  @Transient
+  protected List<ListField> photos;
+  
+  // @Basic
+  // @Column(name = "political_views", length = 255)
+  @Transient
+  protected String politicalViews;
+
+  // @Basic
+  // @Column(name = "preferredUsername", length = 255)
+  @Transient
+  protected String preferredUsername;
+
+  /**
+   *
+   */
+  @Transient
+  protected Url profileSong;
+
+  /**
+   *
+   */
+  @Transient
+  protected Url profileVideo;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> quotes;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "relationship_status", length = 255)
+  @Transient
+  protected String relationshipStatus;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "religion", length = 255)
+  @Transient
+  protected String religion;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "romance", length = 255)
+  @Transient
+  protected String romance;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "scared_of", length = 255)
+  @Transient
+  protected String scaredOf;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "sexual_orientation", length = 255)
+  @Transient
+  protected String sexualOrientation;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "smoker", length = 255)
+  @Transient
+  protected String smokerDb;
+
+  @Transient
+  protected Enum<Smoker> smoker;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> sports;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "status", length = 255)
+  @Transient
+  protected String status;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> tags;
+
+  /**
+   *
+   */
+  // @Basic
+  // @Column(name = "utc_offset")
+  @Transient
+  protected Long utcOffset;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> turnOffs;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> turnOns;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> tvShows;
+
+  /**
+   *
+   */
+  // @OneToMany(targetEntity = UrlDb.class, mappedBy = "person", cascade = ALL)
+  @Transient
+  protected List<Url> urls;
+
+  // Note: Not in the opensocial js person object directly
+  @Transient
+  private boolean isOwner = false;
+
+  @Transient
+  private boolean isViewer = false;
+
+  /**
+   * People have apps that they use, many people may use the same app, hence this is
+   * a many to many property, the link table is person_app where
+   * person_app.person_id points to person.oid and person_app.app_id points
+   * to app.oid.
+   */
+  // @ManyToMany(targetEntity = AppDb.class)
+  // @JoinTable(name = "person_app",
+  //     joinColumns = @JoinColumn(name = "person_id", referencedColumnName = "id"),
+  //     inverseJoinColumns = @JoinColumn(name = "app_id", referencedColumnName = "id"))
+  @Transient
+  protected List<AppDb> applictions;
+
+  public UserDb() {
+  }
+
+  public UserDb(String id, String displayName) {
+    this.id = id;
+    // this.name = name;
+    this.displayName = displayName;
+  }
+
+  public String getAboutMe() {
+    return aboutMe;
+  }
+
+  public void setAboutMe(String aboutMe) {
+    this.aboutMe = aboutMe;
+  }
+  
+  public String getVisibilityLevel() {
+    return decodeVisibility(visibilityLevel);
+  }
+
+  public void setVisibilityLevel(String visibilityLevel) {
+    this.visibilityLevel = encodeVisibility(visibilityLevel);
+  }
+  
+  public String decodeVisibility(int visibilityLevel){
+    if(visibilityLevel == 1){
+      return "public";
+    }
+    else if(visibilityLevel == 2){
+      return "closed";
+    }
+    else{
+      return "hidden";  
+    }
+  }
+  
+  public int encodeVisibility(String visibilityStr){
+    if(visibilityStr == "public"){
+      return 1;
+    }
+    else if(visibilityStr == "closed"){
+      return 2;
+    }
+    else{
+      return 3;
+    }
+  }
+
+  public List<Account> getAccounts() {
+    return accounts;
+  }
+
+  public void setAccounts(List<Account> accounts) {
+    this.accounts = accounts;
+  }
+
+  public List<String> getActivities() {
+    return activities;
+  }
+
+  public void setActivities(List<String> activities) {
+    this.activities = activities;
+  }
+
+  // @Transient
+  // protected List<Address> addresses;
+  public List<Address> getAddresses() {
+    return addresses;
+  }
+
+  public void setAddresses(List<Address> addresses) {
+    this.addresses = addresses;
+  }
+    
+  // @Basic
+  // @Column(name = "competences")
+  // protected String competences;
+  public List<Competence> getCompetences() {
+    return competences;
+  }
+
+  public void setCompetences(List<Competence> competences) {
+    this.competences = competences;
+  }
+  
+  public Integer getAge() {
+    return age;
+  }
+
+  public void setAge(Integer age) {
+    this.age = age;
+  }
+
+  public BodyType getBodyType() {
+    return bodyType;
+  }
+
+  public void setBodyType(BodyType bodyType) {
+    this.bodyType = bodyType;
+  }
+
+  public List<String> getBooks() {
+    return books;
+  }
+
+  public void setBooks(List<String> books) {
+    this.books = books;
+  }
+
+  public List<String> getCars() {
+    return cars;
+  }
+
+  public void setCars(List<String> cars) {
+    this.cars = cars;
+  }
+
+  public String getChildren() {
+    return children;
+  }
+
+  public void setChildren(String children) {
+    this.children = children;
+  }
+
+  public Address getCurrentLocation() {
+    return currentLocation;
+  }
+
+  public void setCurrentLocation(Address currentLocation) {
+    this.currentLocation = currentLocation;
+  }
+
+  public Date getBirthday() {
+    if (birthday == null) {
+      return null;
+    }
+    return new Date(birthday.getTime());
+  }
+
+  public void setBirthday(Date birthday) {
+    if (birthday == null) {
+      this.birthday = null;
+    } else {
+      this.birthday = new Date(birthday.getTime());
+    }
+  }
+
+  public Enum<Drinker> getDrinker() {
+    return this.drinker;
+  }
+
+  public void setDrinker(Enum<Drinker> newDrinker) {
+    this.drinker = newDrinker;
+  }
+
+  public List<ListField> getEmails() {
+    return emails;
+  }
+
+  public void setEmails(List<ListField> emails) {
+    this.emails = emails;
+  }
+
+  public String getEthnicity() {
+    return ethnicity;
+  }
+
+  public void setEthnicity(String ethnicity) {
+    this.ethnicity = ethnicity;
+  }
+
+  public String getFashion() {
+    return fashion;
+  }
+
+  public void setFashion(String fashion) {
+    this.fashion = fashion;
+  }
+
+  public List<String> getFood() {
+    return food;
+  }
+
+  public void setFood(List<String> food) {
+    this.food = food;
+  }
+
+  public Gender getGender() {
+    return gender;
+  }
+
+  public void setGender(Gender newGender) {
+    this.gender = newGender;
+  }
+
+  public String getHappiestWhen() {
+    return happiestWhen;
+  }
+
+  public void setHappiestWhen(String happiestWhen) {
+    this.happiestWhen = happiestWhen;
+  }
+
+  public Boolean getHasApp() {
+    return hasApp;
+  }
+
+  public void setHasApp(Boolean hasApp) {
+    this.hasApp = hasApp;
+  }
+
+  public List<String> getHeroes() {
+    return heroes;
+  }
+
+  public void setHeroes(List<String> heroes) {
+    this.heroes = heroes;
+  }
+
+  public String getHumor() {
+    return humor;
+  }
+
+  public void setHumor(String humor) {
+    this.humor = humor;
+  }
+
+  public String getId() {
+    return id;
+  }
+
+  public void setId(String id) {
+    this.id = id;
+  }
+
+  public List<ListField> getIms() {
+    return ims;
+  }
+
+  public void setIms(List<ListField> ims) {
+    this.ims = ims;
+  }
+
+  public List<String> getInterests() {
+    return interests;
+  }
+
+  public void setInterests(List<String> interests) {
+    this.interests = interests;
+  }
+
+  public String getJobInterests() {
+    return jobInterests;
+  }
+
+  public void setJobInterests(String jobInterests) {
+    this.jobInterests = jobInterests;
+  }
+
+  public List<String> getLanguagesSpoken() {
+    return languagesSpoken;
+  }
+
+  public void setLanguagesSpoken(List<String> languagesSpoken) {
+    this.languagesSpoken = languagesSpoken;
+  }
+
+  public Date getUpdated() {
+    if (updated == null) {
+      return null;
+    }
+    return new Date(updated.getTime());
+  }
+
+  public void setUpdated(Date updated) {
+    if (updated == null) {
+      this.updated = null;
+    } else {
+      this.updated = new Date(updated.getTime());
+    }
+  }
+
+  public String getLivingArrangement() {
+    return livingArrangement;
+  }
+
+  public void setLivingArrangement(String livingArrangement) {
+    this.livingArrangement = livingArrangement;
+  }
+
+  public List<Enum<LookingFor>> getLookingFor() {
+    return lookingFor;
+  }
+
+  public void setLookingFor(List<Enum<LookingFor>> lookingFor) {
+    this.lookingFor = lookingFor;
+  }
+
+  public List<String> getMovies() {
+    return movies;
+  }
+
+  public void setMovies(List<String> movies) {
+    this.movies = movies;
+  }
+
+  public List<String> getMusic() {
+    return music;
+  }
+
+  public void setMusic(List<String> music) {
+    this.music = music;
+  }
+
+  public Name getName() {
+    return name;
+  }
+
+  public void setName(Name name) {
+    this.name = name;
+  }
+
+  public Enum<NetworkPresence> getNetworkPresence() {
+    return networkPresence;
+  }
+
+  public void setNetworkPresence(Enum<NetworkPresence> networkPresence) {
+    this.networkPresence = networkPresence;
+  }
+
+  public String getNickname() {
+    return nickname;
+  }
+
+  public void setNickname(String nickname) {
+    this.nickname = nickname;
+  }
+
+  public List<Organization> getOrganizations() {
+    return organizations;
+  }
+
+  public void setOrganizations(List<Organization> organizations) {
+    this.organizations = organizations;
+  }
+
+  public String getPets() {
+    return pets;
+  }
+
+  public void setPets(String pets) {
+    this.pets = pets;
+  }
+
+  public List<ListField> getPhoneNumbers() {
+    return phoneNumbers;
+  }
+
+  public void setPhoneNumbers(List<ListField> phoneNumbers) {
+    this.phoneNumbers = phoneNumbers;
+  }
+
+  public List<ListField> getPhotos() {
+    return photos;
+  }
+
+  public void setPhotos(List<ListField> photos) {
+    this.photos = photos;
+  }
+
+  public String getPoliticalViews() {
+    return politicalViews;
+  }
+
+  public void setPoliticalViews(String politicalViews) {
+    this.politicalViews = politicalViews;
+  }
+
+  public String getPreferredUsername() {
+    return preferredUsername;
+  }
+
+  public void setPreferredUsername(String preferredUsername) {
+    this.preferredUsername = preferredUsername;
+  }
+
+  public Url getProfileSong() {
+    return profileSong;
+  }
+
+  public void setProfileSong(Url profileSong) {
+    this.profileSong = profileSong;
+  }
+
+  public Url getProfileVideo() {
+    return profileVideo;
+  }
+
+  public void setProfileVideo(Url profileVideo) {
+    this.profileVideo = profileVideo;
+  }
+
+  public List<String> getQuotes() {
+    return quotes;
+  }
+
+  public void setQuotes(List<String> quotes) {
+    this.quotes = quotes;
+  }
+
+  public String getRelationshipStatus() {
+    return relationshipStatus;
+  }
+
+  public void setRelationshipStatus(String relationshipStatus) {
+    this.relationshipStatus = relationshipStatus;
+  }
+
+  public String getReligion() {
+    return religion;
+  }
+
+  public void setReligion(String religion) {
+    this.religion = religion;
+  }
+
+  public String getRomance() {
+    return romance;
+  }
+
+  public void setRomance(String romance) {
+    this.romance = romance;
+  }
+
+  public String getScaredOf() {
+    return scaredOf;
+  }
+
+  public void setScaredOf(String scaredOf) {
+    this.scaredOf = scaredOf;
+  }
+
+  public String getSexualOrientation() {
+    return sexualOrientation;
+  }
+
+  public void setSexualOrientation(String sexualOrientation) {
+    this.sexualOrientation = sexualOrientation;
+  }
+
+  public Enum<Smoker> getSmoker() {
+    return this.smoker;
+  }
+
+  public void setSmoker(Enum<Smoker> newSmoker) {
+    this.smoker = newSmoker;
+  }
+
+  public List<String> getSports() {
+    return sports;
+  }
+
+  public void setSports(List<String> sports) {
+    this.sports = sports;
+  }
+
+  public String getStatus() {
+    return status;
+  }
+
+  public void setStatus(String status) {
+    this.status = status;
+  }
+
+  public List<String> getTags() {
+    return tags;
+  }
+
+  public void setTags(List<String> tags) {
+    this.tags = tags;
+  }
+
+  public Long getUtcOffset() {
+    return utcOffset;
+  }
+
+  public void setUtcOffset(Long utcOffset) {
+    this.utcOffset = utcOffset;
+  }
+
+  public List<String> getTurnOffs() {
+    return turnOffs;
+  }
+
+  public void setTurnOffs(List<String> turnOffs) {
+    this.turnOffs = turnOffs;
+  }
+
+  public List<String> getTurnOns() {
+    return turnOns;
+  }
+
+  public void setTurnOns(List<String> turnOns) {
+    this.turnOns = turnOns;
+  }
+
+  public List<String> getTvShows() {
+    return tvShows;
+  }
+
+  public void setTvShows(List<String> tvShows) {
+    this.tvShows = tvShows;
+  }
+
+  public List<Url> getUrls() {
+    return urls;
+  }
+
+  public void setUrls(List<Url> urls) {
+    this.urls = urls;
+  }
+
+  public boolean getIsOwner() {
+    return isOwner;
+  }
+
+  public void setIsOwner(boolean isOwner) {
+    this.isOwner = isOwner;
+  }
+
+  public boolean getIsViewer() {
+    return isViewer;
+  }
+
+  public void setIsViewer(boolean isViewer) {
+    this.isViewer = isViewer;
+  }
+
+  // Proxied fields
+
+  public String getProfileUrl() {
+    return GRAASP_URL+"/#item=user_"+String.valueOf(objectId);    
+  }
+
+  public void setProfileUrl(String profileUrl) {
+    Url url = getListFieldWithType(PROFILE_URL_TYPE, getUrls());
+    if (url != null) {
+      url.setValue(profileUrl);
+    } else {
+      setUrls(addListField(new UrlDb(profileUrl, null, PROFILE_URL_TYPE), getUrls()));
+    }
+  }
+
+  public String getThumbnailUrl() {
+    String pic = picture;
+    if (pic == null || pic.equals("")) {
+      return GRAASP_URL+"/images/pics/user_thumb.png";
+    }
+    return GRAASP_URL+"/user/picture/"+String.valueOf(objectId)+"/thumb/"+pic;    
+  }
+
+  public void setThumbnailUrl(String thumbnailUrl) {
+    ListField photo = getListFieldWithType(THUMBNAIL_PHOTO_TYPE, getPhotos());
+    if (photo != null) {
+      photo.setValue(thumbnailUrl);
+    } else {
+      setPhotos(addListField(new ListFieldDb(THUMBNAIL_PHOTO_TYPE, thumbnailUrl), getPhotos()));
+    }
+  }
+
+  private <T extends ListField> T getListFieldWithType(String type, List<T> list) {
+    if (list != null) {
+      for (T url : list) {
+        if (type.equalsIgnoreCase(url.getType())) {
+          return url;
+        }
+      }
+    }
+
+    return null;
+  }
+
+  private <T extends ListField> List<T> addListField(T field, List<T> list) {
+    if (list == null) {
+      list = Lists.newArrayList();
+    }
+    list.add(field);
+    return list;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return objectId;
+  }
+  
+  @PrePersist
+  public void populateDbFields() {
+    drinkerDb = drinker.toString();
+    genderDb = gender.toString();
+    networkPresenceDb = networkPresence.toString();
+    smokerDb = smoker.toString();
+
+    List<String> lookingFor = Lists.newArrayList();
+    for (Enum<LookingFor> np : this.lookingFor) {
+      lookingFor.add(np.toString());
+    }
+    Map<String, List<String>> toSave = new HashMap<String, List<String>>();
+    toSave.put(LOOKING_FOR_PROPERTY, lookingFor);
+    toSave.put(ACTIVITIES_PROPERTY, this.activities);
+    toSave.put(BOOKS_PROPERTY, this.books);
+    toSave.put(CARS_PROPERTY, this.cars);
+    toSave.put(FOOD_PROPERTY, this.food);
+    toSave.put(HEROES_PROPERTY, this.heroes);
+    toSave.put(INTERESTS_PROPERTY, this.interests);
+    toSave.put(LANGUAGES_PROPERTY, this.languagesSpoken);
+    toSave.put(MOVIES_PROPERTY, this.movies);
+    toSave.put(MUSIC_PROPERTY, this.music);
+    toSave.put(QUOTES_PROPERTY, this.quotes);
+    toSave.put(SPORTS_PROPERTY, this.sports);
+    toSave.put(TAGS_PROPERTY, this.tags);
+    toSave.put(TURNOFFS_PROPERTY, this.turnOffs);
+    toSave.put(TURNONS_PROPERTY, this.turnOns);
+    toSave.put(TVSHOWS_PROPERTY, this.tvShows);
+
+    for (Entry<String, List<String>> e : toSave.entrySet()) {
+      // add new entries
+      for (String v : e.getValue()) {
+        boolean present = false;
+        for (PersonPropertyDb pp : properties) {
+          if (e.getKey().equals(pp.getType()) && v.equals(pp.getValue())) {
+            present = true;
+            break;
+          }
+        }
+        if (!present) {
+          PersonPropertyDb pp = new PersonPropertyDb();
+          pp.setType(e.getKey());
+          pp.setValue(v);
+        }
+      }
+      // remove missing entries
+      List<PersonPropertyDb> toRemove = Lists.newArrayList();
+      for (PersonPropertyDb pp : properties) {
+        if (e.getKey().equals(pp.getType())) {
+          boolean present = false;
+          for (String v : e.getValue()) {
+            if (pp.getValue().equals(v)) {
+              present = true;
+              break;
+            }
+          }
+          if (!present) {
+            toRemove.add(pp);
+          }
+        }
+      }
+      properties.removeAll(toRemove);
+    }
+  }
+
+  @PostLoad
+  public void loadTransientFields() {
+    // no loading of transient fields
+    
+    // drinkerDb = drinker.toString();
+    // genderDb = gender.toString();
+    // networkPresenceDb = networkPresence.toString();
+    // smokerDb = smoker.toString();
+    // 
+    // drinker = new EnumDb<Drinker>(Drinker.valueOf(drinkerDb));
+    // gender = Gender.valueOf(genderDb);
+    // networkPresence = new EnumDb<NetworkPresence>(NetworkPresence.valueOf(networkPresenceDb));
+    // smoker = new EnumDb<Smoker>(Smoker.valueOf(smokerDb));
+    // 
+    // List<String> lookingFor = Lists.newArrayList();
+    // this.activities = Lists.newArrayList();
+    // this.books = Lists.newArrayList();
+    // this.cars = Lists.newArrayList();
+    // this.food = Lists.newArrayList();
+    // this.heroes = Lists.newArrayList();
+    // this.interests = Lists.newArrayList();
+    // this.languagesSpoken = Lists.newArrayList();
+    // this.movies = Lists.newArrayList();
+    // this.music = Lists.newArrayList();
+    // this.quotes = Lists.newArrayList();
+    // this.sports = Lists.newArrayList();
+    // this.tags = Lists.newArrayList();
+    // this.turnOffs = Lists.newArrayList();
+    // this.turnOns = Lists.newArrayList();
+    // this.tvShows = Lists.newArrayList();
+    // 
+    // Map<String, List<String>> toSave = Maps.newHashMap();
+    // 
+    // toSave.put(LOOKING_FOR_PROPERTY, lookingFor);
+    // toSave.put(ACTIVITIES_PROPERTY, this.activities);
+    // toSave.put(BOOKS_PROPERTY, this.books);
+    // toSave.put(CARS_PROPERTY, this.cars);
+    // toSave.put(FOOD_PROPERTY, this.food);
+    // toSave.put(HEROES_PROPERTY, this.heroes);
+    // toSave.put(INTERESTS_PROPERTY, this.interests);
+    // toSave.put(LANGUAGES_PROPERTY, this.languagesSpoken);
+    // toSave.put(MOVIES_PROPERTY, this.movies);
+    // toSave.put(MUSIC_PROPERTY, this.music);
+    // toSave.put(QUOTES_PROPERTY, this.quotes);
+    // toSave.put(SPORTS_PROPERTY, this.sports);
+    // toSave.put(TAGS_PROPERTY, this.tags);
+    // toSave.put(TURNOFFS_PROPERTY, this.turnOffs);
+    // toSave.put(TURNONS_PROPERTY, this.turnOns);
+    // toSave.put(TVSHOWS_PROPERTY, this.tvShows);
+    // 
+    // for (PersonPropertyDb pp : properties) {
+    //   List<String> l = toSave.get(pp.type);
+    //   if (l != null) {
+    //     l.add(pp.getValue());
+    //   }
+    // }
+    // 
+    // this.lookingFor = Lists.newArrayList();
+    // for (String lf : lookingFor) {
+    //   this.lookingFor.add(new EnumDb<LookingFor>(LookingFor.valueOf(lf)));
+    // }
+
+  }
+
+  /*
+   * (non-Javadoc)
+   *
+   * @see org.apache.shindig.social.opensocial.model.Person#getDisplayName()
+   */
+  public String getDisplayName() {
+    return displayName;
+  }
+
+  /*
+   * (non-Javadoc)
+   *
+   * @see org.apache.shindig.social.opensocial.model.Person#setDisplayName(java.lang.String)
+   */
+  public void setDisplayName(String displayName) {
+    this.displayName = displayName;
+  }
+
+  public static FilterCapability getFilterCapability() {
+    return FILTER_CAPABILITY;
+
+  }
+  /**
+   * @return the applictions
+   */
+  public List<AppDb> getApplictions() {
+    return applictions;
+  }
+
+  /**
+   * @param applictions the applictions to set
+   */
+  public void setApplictions(List<AppDb> applictions) {
+    this.applictions = applictions;
+  }
+
+  /** {@inheritDoc} */
+  public Map<String, ? extends Object> getAppData()
+  {
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public void setAppData( Map<String, ? extends Object> appData )
+  {
+  }
+}
diff --git a/java/social-api/src/main/java/org/apache/shindig/social/core/model/WidgetDb.java b/java/social-api/src/main/java/org/apache/shindig/social/core/model/WidgetDb.java
new file mode 100644
index 0000000..ae30477
--- /dev/null
+++ b/java/social-api/src/main/java/org/apache/shindig/social/core/model/WidgetDb.java
@@ -0,0 +1,517 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ */
+package org.apache.shindig.social.core.model;
+
+import static javax.persistence.CascadeType.ALL;
+import static javax.persistence.CascadeType.MERGE;
+import static javax.persistence.CascadeType.PERSIST;
+import static javax.persistence.CascadeType.REFRESH;
+import static javax.persistence.GenerationType.IDENTITY;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+
+import org.apache.shindig.protocol.model.Enum;
+import org.apache.shindig.protocol.model.FilterOperation;
+import org.apache.shindig.social.opensocial.model.Account;
+import org.apache.shindig.social.opensocial.model.Address;
+import org.apache.shindig.social.opensocial.model.BodyType;
+import org.apache.shindig.social.opensocial.model.Drinker;
+import org.apache.shindig.social.opensocial.model.ListField;
+import org.apache.shindig.social.opensocial.model.LookingFor;
+import org.apache.shindig.social.opensocial.model.Name;
+import org.apache.shindig.social.opensocial.model.NetworkPresence;
+import org.apache.shindig.social.opensocial.model.Organization;
+import org.apache.shindig.social.opensocial.model.Person;
+import org.apache.shindig.social.opensocial.model.App;
+import org.apache.shindig.social.opensocial.model.Smoker;
+import org.apache.shindig.social.opensocial.model.Url;
+
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.JoinTable;
+import javax.persistence.ManyToMany;
+import javax.persistence.ManyToOne;
+import javax.persistence.NamedQueries;
+import javax.persistence.NamedQuery;
+import javax.persistence.OneToMany;
+import javax.persistence.PostLoad;
+import javax.persistence.PrePersist;
+import javax.persistence.Table;
+import javax.persistence.Temporal;
+import javax.persistence.TemporalType;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+
+import com.google.inject.name.Named;
+import com.google.inject.Inject;
+
+
+/**
+ * Default Implementation of the Person object in the org.apache.shindig.graaasp.jpa.
+ */
+@Entity
+@Table(name = "widgets")
+@NamedQueries(value = {
+    @NamedQuery(name = WidgetDb.FINDBY_WIDGETID,
+        query = "select w from WidgetDb w where w.id = :id "),
+    @NamedQuery(name = WidgetDb.FINDBY_LIKE_WIDGETID,
+        query = "select w from WidgetDb w where w.id like :id") })
+public class WidgetDb implements App, DbObject {
+
+  public static final String GRAASP_URL = System.getProperty("shindig.container_url");
+  
+  public static final String FINDBY_WIDGETID = "q.widget.findbywidgetid";
+
+  public static final String PARAM_WIDGETID = "id";
+
+  public static final String FINDBY_LIKE_WIDGETID = "q.widget.findbylikewidgetid";
+
+  private static final String INTERESTS_PROPERTY = "interest";
+
+  private static final Map<String, FilterSpecification> FILTER_COLUMNS =
+    new HashMap<String, FilterSpecification>();
+
+  private static final FilterOperation[] ALL_FILTEROPTIONS = new FilterOperation[] {
+      FilterOperation.equals, FilterOperation.contains, FilterOperation.present,
+      FilterOperation.startsWith };
+  private static final FilterOperation[] NUMERIC_FILTEROPTIONS = new FilterOperation[] {
+      FilterOperation.equals, FilterOperation.present };
+  @SuppressWarnings("unused")
+  private static final FilterOperation[] EQUALS_FILTEROPTIONS =
+    new FilterOperation[] { FilterOperation.equals };
+
+  static {
+    FILTER_COLUMNS.put("displayName", new FilterSpecification("displayName", ALL_FILTEROPTIONS));
+
+    // the following are special operations which are accepted, but work differently
+    FILTER_COLUMNS.put("topFriends", new FilterSpecification());
+    FILTER_COLUMNS.put("hasApp", new FilterSpecification());
+  }
+
+  private static final FilterCapability FILTER_CAPABILITY = new FilterCapability() {
+    /**
+     * {@inheritDoc}
+     */
+    public String findFilterableProperty(String fieldName, FilterOperation filterOperation) {
+      FilterSpecification spec = FILTER_COLUMNS.get(fieldName);
+      if (spec != null) {
+        return spec.translateProperty(filterOperation);
+      }
+      return null;
+    }
+
+  };
+
+  public static final String JPQL_FINDALLPERSON = null;
+
+  // TODO The commented out query supports sorting by friend.score but needs a join with FriendDb which returns duplicates.
+  // Using 'group by' to avoid duplicates doesn't work in HSQLDB or Derby - causes a "Not in aggregate function or group by clause" jdbc exception.
+  // public static final String JPQL_FINDPERSON_BY_FRIENDS = "select p from PersonDb p join FriendDb f on p.objectId = f.friend.objectId where p.objectId in (select f.friend.objectId from PersonDb p, FriendDb f where p.objectId = f.person.objectId and ";
+  public static final String JPQL_FINDPERSON_BY_FRIENDS = "select p from PersonDb p where p.objectId in (select f.friend.objectId from PersonDb p, FriendDb f where p.objectId = f.person.objectId and ";
+
+  public static final Object JPQL_FINDPERSON_BY_GROUP = null;
+
+  public static final Object JPQL_FINDWIDGET = "select w from WidgetDb w where ";
+  public static final Object JPQL_FINDWIDGETS = "select w from WidgetDb w where ";
+
+  /**
+   * The internal object ID used for references to this object. Should be generated by the
+   * underlying storage mechanism
+   */
+  @Id
+  @GeneratedValue(strategy = IDENTITY)
+  @Column(name = "id")
+  private long objectId;
+  
+  /**
+   * The internal parentId and parentType used for references to the parent of a widget.
+   */
+  @Basic
+  @Column(name = "parent_id", length = 255)
+  private String parentId;
+  
+  @Basic
+  @Column(name = "parent_type", length = 255)
+  protected String parentType;
+
+  /**
+   * An optimistic locking field.
+   */
+
+  @Basic
+  @Column(name = "entity", length = 255)
+  protected String appUrl;
+  
+  @Basic
+  @Column(name = "format_settings_type", length = 255)
+  protected String appType;
+
+  @Transient
+  protected String token;
+
+  @Transient
+  protected String author;
+  
+  @Transient
+  protected String authorEmail;
+
+  @Basic
+  @Column(name = "name", length = 255)
+  private String displayName;
+
+  @Basic
+  @Column(name = "name", length = 255, insertable = false, updatable = false)
+  private String name;
+  
+  @Basic
+  @Column(name = "picture")
+  protected String picture;
+  
+  
+  /**
+   *
+   */
+  @Transient
+  protected Integer height;
+
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "description", length = 255)
+  protected String description;
+
+
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "id", length = 255, insertable = false, updatable = false)
+  protected String id;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<ListField> ims;
+
+
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "updated_at")
+  @Temporal(TemporalType.TIMESTAMP)
+  protected Date updated;
+
+  /**
+   *
+   */
+  @Transient
+  protected String screenshotUrl;
+  
+  /**
+   *
+   */
+  @Basic
+  @Column(name = "external_thumbnail", length = 255)
+  protected String thumbnailUrl;
+
+
+  /**
+   *
+   */
+  @Transient
+  protected Long utcOffset;
+
+  /**
+   *
+   */
+  @Transient
+  protected List<String> tags;
+
+  // Note: Not in the opensocial js person object directly
+  @Transient
+  private boolean isOwner = false;
+
+  public WidgetDb() {
+  }
+
+  public WidgetDb(String id, String displayName) {
+    this.id = id;
+    this.displayName = displayName;
+  }
+
+  public String getAppType() {
+	  return appType;
+  }
+
+  public void setAppType(String appType) {
+	  this.appType = appType;
+  }
+	  
+  public String getAppUrl() {
+    return appUrl;
+  }
+
+  public void setAppUrl(String appUrl) {
+    this.appUrl = appUrl;
+  }
+
+  public String getToken() {
+    return token;
+  }
+
+  public void setToken(String token) {
+    this.token = token;
+  }
+
+  public String getAuthor() {
+    return author;
+  }
+
+  public void setAuthor(String author) {
+    this.author = author;
+  }
+
+  public Integer getHeight() {
+    return height;
+  }
+
+  public void setHeight(Integer height) {
+    this.height = height;
+  }
+
+  public String getScreenshotUrl() {
+    return screenshotUrl;
+  }
+
+  public void setScreenshotUrl(String screenshotUrl) {
+    this.screenshotUrl = screenshotUrl;
+  }
+  
+  public String getProfileUrl() {
+    return GRAASP_URL+"/#item=widget_"+String.valueOf(objectId);     
+  }
+
+  public void setProfileUrl(String profileUrl) {
+
+  }
+
+  public String getThumbnailUrl() {
+    String pic = picture;
+    if (pic == null || pic.equals("")) {
+      return GRAASP_URL+"/images/pics/widget_thumb.png";
+    }
+    
+    return GRAASP_URL+"/widget/picture/"+String.valueOf(objectId)+"/thumb/"+pic;        
+  }
+
+  public void setThumbnailUrl(String thumbnailUrl) {
+    this.thumbnailUrl = thumbnailUrl;
+  }
+
+  public String getAuthorEmail() {
+    return authorEmail;
+  }
+
+  public void setAuthorEmail(String authorEmail) {
+    this.authorEmail = authorEmail;
+  }                               
+
+  public List<String> getTags() {
+    return tags;
+  }
+
+  public void setTags(List<String> tags) {
+    this.tags = tags;
+  }
+
+  public String getParentId() {
+    return this.parentId;
+  }
+
+  public void setParentId(String parentId) {
+    this.parentId = parentId;
+  }
+  
+  public String getParentType() {
+	  if(this.parentType.equals("User")){
+		  return "@person";
+	  }else{
+		  return "@space";
+	  }
+  }
+
+  public void setParentType(String parentType) {
+    this.parentType = parentType;
+  }
+  
+  public String getName() {
+    return this.name;
+  }
+
+  public void setName(String name) {
+    this.name = name;
+  }
+
+  
+  public String getId() {
+    return id;
+  }
+
+  public void setId(String id) {
+    this.id = id;
+  }
+
+  public List<ListField> getIms() {
+    return ims;
+  }
+
+  public void setIms(List<ListField> ims) {
+    this.ims = ims;
+  }
+
+  public Date getUpdated() {
+    if (updated == null) {
+      return null;
+    }
+    return new Date(updated.getTime());
+  }
+
+  public void setUpdated(Date updated) {
+    if (updated == null) {
+      this.updated = null;
+    } else {
+      this.updated = new Date(updated.getTime());
+    }
+  }
+
+
+  public String getDescription() {
+    return description;
+  }
+
+  public void setDescription(String description) {
+    this.description = description;
+  }
+  
+  public Long getUtcOffset() {
+    return utcOffset;
+  }
+
+  public void setUtcOffset(Long utcOffset) {
+    this.utcOffset = utcOffset;
+  }
+
+  public boolean getIsOwner() {
+    return isOwner;
+  }
+
+  public void setIsOwner(boolean isOwner) {
+    this.isOwner = isOwner;
+  }
+
+  // Proxied fields
+
+
+
+  private <T extends ListField> T getListFieldWithType(String type, List<T> list) {
+    if (list != null) {
+      for (T url : list) {
+        if (type.equalsIgnoreCase(url.getType())) {
+          return url;
+        }
+      }
+    }
+
+    return null;
+  }
+
+  private <T extends ListField> List<T> addListField(T field, List<T> list) {
+    if (list == null) {
+      list = Lists.newArrayList();
+    }
+    list.add(field);
+    return list;
+  }
+
+  /**
+   * @return the objectId
+   */
+  public long getObjectId() {
+    return Long.parseLong(id);
+  }
+
+  @PrePersist
+  public void populateDbFields() {
+
+
+  }
+
+  @PostLoad
+  public void loadTransientFields() {
+
+
+  }
+
+  /*
+   * (non-Javadoc)
+   *
+   * @see org.apache.shindig.social.opensocial.model.Person#getDisplayName()
+   */
+  public String getDisplayName() {
+    return displayName;
+  }
+
+  /*
+   * (non-Javadoc)
+   *
+   * @see org.apache.shindig.social.opensocial.model.Person#setDisplayName(java.lang.String)
+   */
+  public void setDisplayName(String displayName) {
+    this.displayName = displayName;
+  }
+
+  public static FilterCapability getFilterCapability() {
+    return FILTER_CAPABILITY;
+
+  }
+
+  /** {@inheritDoc} */
+  public Map<String, ? extends Object> getAppData()
+  {
+    return null;
+  }
+
+  /** {@inheritDoc} */
+  public void setAppData( Map<String, ? extends Object> appData )
+  {
+  }
+}

