<?xml version="1.0" encoding="UTF-8"?>
<Module>
<ModulePrefs title="Activity Streams">
    <Require feature="opensocial-0.9"/>
    <Require feature="osapi"/>
    <Require feature="dynamic-height"/>
</ModulePrefs>
<Content type="html"><![CDATA[
<style> body {background-color: transparent;} </style>
<link rel="stylesheet" type="text/css" href="libs/jquery.jqplot.min.css" />
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<script language="javascript" type="text/javascript" src="libs/jquery.jqplot.min.js"></script>
<script class="include" language="javascript" type="text/javascript" src="libs/jqplot.dateAxisRenderer.min.js"></script>
<script class="include" language="javascript" type="text/javascript" src="libs/jqplot.canvasTextRenderer.min.js"></script>
<script class="include" language="javascript" type="text/javascript" src="libs/jqplot.canvasAxisTickRenderer.min.js"></script>
<script class="include" language="javascript" type="text/javascript" src="libs/jqplot.categoryAxisRenderer.min.js"></script>
<script class="include" language="javascript" type="text/javascript" src="libs/jqplot.barRenderer.min.js"></script>
<script class="include" language="javascript" type="text/javascript" src="libs/jqplot.canvasAxisLabelRenderer.min.js"></script>


<script type="text/javascript">
function onActivitiesLoaded(response){
  
  updateGraph(response);

  gadgets.window.adjustHeight();

  $("#time_scale").change(function(){updateGraph(response);});
  $("#actions").change(function(){updateGraph(response);});

}

function updateGraph(response) {
  $("#graph").empty();
  counter = format_data(response, $("#time_scale").val(), $("#actions").val(), 0, 0);
  renderGraph(counter, $("#time_scale").val(), $("#actions").val());
}

function format_data(response, type, actions, from, to) {
  var date = new Date;
  if (type == "day")
    var counter = [["Sunday", 0],["Monday", 0],["Tuesday", 0],["Wednesday", 0],["Thursday", 0],["Friday", 0],["Saturday", 0]];
  else {
    var counter = Array(24);
    for (var i=0; i<counter.length; i++) {
      counter[i] = [(i+1)+"h", 0];
    }
  }

  $.each(response.activities, function(i, activity) {
    if ($.inArray(activity.verb, actions) != -1) {
      date = new Date(activity.published);
      if (type == "day") {
        counter[date.getDay()][1] += 1;
      } else {
        counter[date.getHours()][1] += 1;
      }
    }
  });

  return counter;
}
function renderGraph(data, type, actions) {
  $.jqplot('graph', [data], {
    title: 'Number of '+ displayActions(actions) +' per '+ type,
    series:[{renderer:$.jqplot.BarRenderer}],
    axesDefaults: {
      tickRenderer: $.jqplot.CanvasAxisTickRenderer ,
      tickOptions: {
        fontSize: '10pt'
      }
    },
    axes: {
      xaxis: {
        renderer: $.jqplot.CategoryAxisRenderer,
        label: type.charAt(0).toUpperCase() + type.slice(1),
        tickOptions: {
          angle: -30,
        }
      },
      yaxis: {
        label:'Number of '+ displayActions(actions),
        labelRenderer: $.jqplot.CanvasAxisLabelRenderer
      }
    }
  });
}

function displayActions(actions){
  var actionToDisplay = new Array(9);
  actionToDisplay["access"] = "visits";
  actionToDisplay["add"] = "additions";
  actionToDisplay["update"] = "updates";
  actionToDisplay["invite"] = "invitations";
  actionToDisplay["invite-remind"] = "invitation reminders";
  actionToDisplay["request-join"] = "join requests";
  actionToDisplay["join"] = "joins";
  actionToDisplay["remove"] = "removals";
  actionToDisplay["delete"] = "deletions";

  var output = "";
  for(var i=0; i<actions.length; i++) {
    output += actionToDisplay[actions[i]];
    if (i<(actions.length-2))
      output += ", ";
    if (i == (actions.length-2))
      output += " and ";
  }

  return output;
}

function onContextFound(response){
  loadActivities(response.context.contextId, response.context.contextType);
}

function loadActivities(id, type){
  var batch = osapi.newBatch();
  batch.add('activities', osapi.activitystreams.get({contextId: id, contextType: type}));
  batch.execute(onActivitiesLoaded);
}

function findContext(){
  var batch = osapi.newBatch();
  batch.add('context', osapi.context.get());
  batch.execute(onContextFound);    
}

function init()
{
  findContext(); 
}

gadgets.util.registerOnLoadHandler(init);

</script>
<div id="form">
  <form id="time" action="">
    <label for="actions">Actions :</label>
    <select name="actions" id="actions" multiple="multiple">
      <option value="access" selected="selected">Visit</option>
      <option value="add">Add</option>
      <option value="update">Update</option>
      <option value="invite">Invite</option>
      <option value="invite-remind">Send invitation reminder</option>
      <option value="request-join">Join request</option>
      <option value="join">Join</option>
      <option value="remove">Remove</option>
      <option value="delete">Delete</option>
    </select>
    <label for="time_scale">Time scale :</label>
    <select name="time_scale" id="time_scale">
      <option value="day" selected="selected">Day</option>
      <option value="hour">Hour</option>
    </select>
    <label for="from">Time window from </label>
    <input type="date" name="from">
    <label for="to"> to </label>
    <input type="date" name="to">
  </form>
</div>
<div id="graph"></div>
]]></Content>
</Module>