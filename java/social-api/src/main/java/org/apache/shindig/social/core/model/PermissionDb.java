/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
package org.apache.shindig.social.core.model;

import static javax.persistence.CascadeType.ALL;
import static javax.persistence.CascadeType.MERGE;
import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.CascadeType.REFRESH;
import static javax.persistence.GenerationType.IDENTITY;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

import org.apache.shindig.protocol.model.Enum;
import org.apache.shindig.protocol.model.FilterOperation;
import org.apache.shindig.social.opensocial.model.Account;
import org.apache.shindig.social.opensocial.model.Address;
import org.apache.shindig.social.opensocial.model.BodyType;
import org.apache.shindig.social.opensocial.model.Drinker;
import org.apache.shindig.social.opensocial.model.ListField;
import org.apache.shindig.social.opensocial.model.LookingFor;
import org.apache.shindig.social.opensocial.model.Name;
import org.apache.shindig.social.opensocial.model.NetworkPresence;
import org.apache.shindig.social.opensocial.model.Organization;
import org.apache.shindig.social.opensocial.model.Person;
import org.apache.shindig.social.opensocial.model.App;
import org.apache.shindig.social.opensocial.model.Smoker;
import org.apache.shindig.social.opensocial.model.Url;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.PostLoad;
import javax.persistence.PrePersist;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.Version;

/**
 * Default Implementation of the Person object in the org.apache.shindig.graaasp.jpa.
 */
@Entity
@Table(name = "permissions")
public class PermissionDb implements DbObject {
  
  // 3 is owner in Graaasp
  public static final String JPQL_OWNERS_BY_SPACE = "select p.userId from PermissionDb p where p.status = 'joined' and p.rightType = '3' and p.itemType = 'Space'";

  /**
   * The internal object ID used for references to this object. Should be generated by the
   * underlying storage mechanism
   */
  @Id
  @GeneratedValue(strategy = IDENTITY)
  @Column(name = "id")
  private long objectId;
  
  /**
   * The internal itemId and itemType used for references to the item of a widget.
   */
  @Basic
  @Column(name = "item_id", length = 255)
  private String itemId;
  
  @Basic
  @Column(name = "item_type", length = 255)
  protected String itemType;

  @Basic
  @Column(name = "user_id")
  protected String userId;

  @Basic
  @Column(name = "status", length = 255)
  protected String status;
  
  // right_type = {1 = "viewer", 2 = "editor", 3 = "owner"}
  @Basic
  @Column(name = "right_type")
  protected Long rightType;
  
  /**
   *
   */
  @Basic
  @Column(name = "id", length = 255, insertable = false, updatable = false)
  protected String id;

  // Note: Not in the opensocial js person object directly
  @Transient
  private boolean isOwner = false;

  public PermissionDb() {
  }

  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }                               

  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }                               

  public Long getRightType() {
    return rightType;
  }

  public void setRightType(Long rightType) {
    this.rightType = rightType;
  }

  public String getItemId() {
    return this.itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }
  
  public String getItemType() {
	  if(this.itemType.equals("User")){
		  return "@person";
	  }else{
		  return "@space";
	  }
  }

  public void setItemType(String itemType) {
    this.itemType = itemType;
  }
    
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public boolean getIsOwner() {
    return isOwner;
  }

  public void setIsOwner(boolean isOwner) {
    this.isOwner = isOwner;
  }

  // Proxied fields



  private <T extends ListField> T getListFieldWithType(String type, List<T> list) {
    if (list != null) {
      for (T url : list) {
        if (type.equalsIgnoreCase(url.getType())) {
          return url;
        }
      }
    }

    return null;
  }

  private <T extends ListField> List<T> addListField(T field, List<T> list) {
    if (list == null) {
      list = Lists.newArrayList();
    }
    list.add(field);
    return list;
  }

  /**
   * @return the objectId
   */
  public long getObjectId() {
    return Long.parseLong(id);
  }

  @PrePersist
  public void populateDbFields() {


  }

  @PostLoad
  public void loadTransientFields() {


  }

}
